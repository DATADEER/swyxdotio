{
  "markdown": [
    {
      "slug": "clone-open-source-apps",
      "data": {
        "technical": false,
        "title": "Clone Open Source Apps",
        "slug": "clone-open-source-apps",
        "tag_list": [
          "Advice",
          "LearnInPublic"
        ],
        "date": "2018-06-21T00:00:00.000Z",
        "categories": [
          "Advice",
          "LearnInPublic"
        ]
      },
      "content": "\nYou already know you should be making projects to learn things and potentially add to your portfolio. You've read your Malcolm Gladwell, you know that you need 10,000 hours of deliberate practice. Given you're just starting out, I have a slightly contentious suggestion for you: DON'T make anything new.\n\nYour decision-making is a scarce resource. You start every day with a full tank, and as you make decisions through the day you gradually run low. We all know how good our late-late-night decisions are. Making a new app involves a thousand micro decisions - from what the app does, to how it should look, and everything in between. Decide now: Do you want to practice making technical decisions or product decisions?\n\nOk so you're coding. You know what involves making zero product decisions? Cloning things. Resist the urge to make your special snowflake (for now). Oh but then who would use yet another Hacker News clone? I've got news for you: No one was gonna use your thing anyway. You're practicing coding, not making a startup. Remember?\n\nMake the clone on your own, then check the original's source. Now you have TWO examples of how to implement something, so you even get to practice something only senior devs get to after years of experience: understanding the tradeoffs of technical choices!\n\nYou're lucky. You live in an age where companies and teams open source their entire apps. There's [Spectrum](https://github.com/withspectrum/spectrum) and [Codesandbox](https://github.com/CompuIves/codesandbox-client) and [FreeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp/) and [Ghost](https://github.com/TryGhost/Ghost) and if those seem like waaay too big of an app for you (they are huge) go look at the side projects of your mentors (see above). Ryan Florence has [planner](https://planner.now.sh/) and Kent Dodds has [TIL](https://til.netlify.com/)! Make a clone, then show it to them! You are guaranteed to get free feedback.\n\nHere's the subheading: **put a time limit on it**. Deadlines work wonders. Also you're not going for a pixel perfect clone of something that teams of people, way more experienced than you, have made. You want to have a set amount of time, get as much of the interesting features as possible, and then ship it. This guarantees that you will be freed up for the next clone, and the next. Different projects let you try different libraries and stacks, and figure out what you like there. Also you get to practice one of the hardest software engineering skills of all: Project Estimation. You'll create many, many opportunities for yourself to see what you can do in a set amount of time because you're deliberately practicing making things on the clock. And none of that time is taken up by product decisions!\n\nWhen you've done enough and start feeling bored, it's time to let your freak flag fly. You've earned the right to make your app because you've made others. You know what things cost and you have used your tools well enough to get there. You're still learning in public, though! Package up your experience into a talk. Livestream yourself coding. Blog about your game plan, then blog some more as you execute it. Developers who can communicate are in far more demand than developers who can't.\n\np.s. All this will be a lot easier if you Know Your Tools well.\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n\nmore: https://mobile.twitter.com/ryanflorence/status/1119661699617787904\n"
    },
    {
      "slug": "know-your-tools",
      "data": {
        "technical": false,
        "title": "Know Your Tools",
        "slug": "know-your-tools",
        "tag_list": [
          "Advice",
          "LearnInPublic"
        ],
        "date": "2018-06-20T00:00:00.000Z",
        "categories": [
          "Advice",
          "LearnInPublic"
        ]
      },
      "content": "\nYou missed a lot in your bootcamp. I'm not talking about compiler theory from computer science courses. I don't mean algos. I mean a lot of basic knowledge of your tools is lacking. \"A poor craftsperson blames his tools\", they say. But you. You're no \"craftsperson\", you're still a novice. You don't even know your own tools that well. You haven't built that much with them, and you still freak out when things go wrong. It's not your fault, but it's in your power to fix your gaps. The bootcamp gave you a head start, now you have to go the distance.\n\nIf you're a frontend dev: Learn Webpack. Learn Babel. Learn what the CSSWG and TC39 do. Heck, learn Javascript and CSS all over again. Did you know you can use the Chrome Devtools as a profiler and an IDE? Learn bash. Learn git. Learn CI/CD. Learn frontend testing. Learn Docker. Learn AWS, and Firebase. OPEN NODE_MODULES. Yeah, it's a lot, and I don't truly know some of these things either. I'm workin on it. Equally important is figuring out what is ok to miss. I have my list, I'm not sharing it. But there are some things you will use daily in whatever career you end up in, and some other things are sexier or seem important but are really just nice-to-have. Figure out the difference. Tech is a house of cards a mile high, abstractions atop abstractions. Lower levels of abstraction have a longer half-life than higher ones. Kyle Simpson says you should learn one abstraction level below where you work. I think that's directionally but maybe not literally correct.\n\nThe subheading for this one is **avoid FOMO**. Your favorite thought leader says you should check out ReasonML, is Javascript dead? Why the hell do people want to kill Redux so bad? Is CSS-in-JS literally the devil? Vue passed React in Github stars, should you pivot to Vue?\n\nI dunno, do you get paid in Github stars?\n\nFill in -your- gaps. Focus on you and your needs. There are so many opportunities in tech that you can pretty much pick out your turf and play entirely within it AND be completely ignorant of all the other stuff AND still do great! Don't get me wrong: I'm a big fan of playing the meta-game. It is possible to make strategic blunders but it's also impossible to avoid them altogether. Stop trying. It's much better to focus on the \"good enough\" and be directionally but not literally correct. The goal is to be accurate, not precise. Try your best to be right, but don't worry when you're wrong.\n\nThere's more to knowing your tools than just knowing _what_ they are. There's also the _why_ and the _who_. Who made the paradigms we live in now? Who's maintaining it today? Why is the API the way it is? Why did it change from past versions? (If you're feeling adventurous: _how_ does the tool work under the hood?) Let your intellectual curiosity carry you and fill in your lack of experience with research that nobody else bothers to do. Guess what? There could not be an easier subject matter to research, this stuff is literally all online and version controlled with git, and all the people involved are still alive and easily contactable.\n\nAnd when you've filled something in, when you've found something cool in your research, write it up.\n\np.s. Learn in public.\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n"
    },
    {
      "slug": "learn-in-public-hack",
      "data": {
        "technical": false,
        "title": "The Ultimate Hack for Learning In Public",
        "subtitle": "Pick Up What They Put Down",
        "desc": "By Picking Up What They Put Down, you are applying Nir Eyal's Hooked model to provide an inbuilt feedback mechanism to kickstart your",
        "slug": "learn-in-public-hack",
        "tag_list": [
          "Advice",
          "LearnInPublic"
        ],
        "date": "2020-01-01T00:00:00.000Z",
        "categories": [
          "Advice",
          "LearnInPublic"
        ]
      },
      "content": "\nLet's say you're sold on the idea of [Learning In Public](https://www.swyx.io/writing/learn-in-public/).\n\nYou want to start right away but are feeling intimidated at all the advice out there:\n\n- **\"Hey read my blogpost on [Learning Gears](https://www.swyx.io/writing/learning-gears/)!\"** lol typical me being too abstract 😛\n- **\"Just start a blog for the past you!\"** but you've done that before - and no one read it - and you lost interest.\n- **\"Ask people what they want to read!\"** but you don't have people to ask, and people always say yes to free content anyway. Which you write and they then don't read. So you lose interest.\n- **\"Don't worry it takes a while to get an audience!\"** but all the people telling you that are unrelatable because they're already successful in your eyes, so you lose interest.\n\n**You're not alone.**\n\nIn the past 2 years I've talked to a couple hundred people at various stages of their #LearnInPublic journey, and of course I went thru it myself. It's still too hard to start, no matter how many well-intentioned voices tell you what they do and how they did it.\n\nI think, like any new habit or diet, **the best plan for you is the plan you can stick to**.\n\nAfter doing a lot of thinking, **I have a hack for you**. It is 6 words long:\n\n## Pick Up What They Put Down\n\n**Who's \"they\"?** Anyone you look up to, anyone who knows more than you in the thing you're trying to learn. If that's still too broad for you: Look for the maintainers of libraries and languages you use, or the people who put out YouTube videos, podcasts, books, blogposts and courses.\n\n**What do you mean by \"put down\"?** Any **new** library, demo, video, podcast, book, blogpost, or course that _they_ put out. It is important that it be **new**. By virtue of it being **new**, it is simultaneously at the top of _their_ minds, and also the most likely to lack genuine feedback.\n\n(Psst... This is where you come in!)\n\n**How do I pick \"it\" up?** Here is a nonexhaustive smattering of ideas for you:\n\n- **If it's a new library, go try it out.** Report bugs, ask questions about ANY confusing documentation, make a demo using the library, then blog about it!\n- **If it's a new demo, go read the source code!** Then write a walkthrough of the source code explaining everything in your own words.\n- **If it's a new video/talk/podcast/book/blogpost**, summarize it in your own words.\n- **If it's a new course**, go through it, highlight the top 3 things you learned.\n- [Sketch notes](https://illustrated.dev/) for literally anything are always LOVED.\n- [Tan Li Hau](https://twitter.com/lihautan) literally became a Svelte maintainer by [picking up TODO's in the Svelte codebase](https://www.youtube.com/watch?v=NSUa1124ahs)\n- come up with your own ideas, I'm not the boss of you\n\nThe BIG requirement about any of the above is that **you MUST genuinely love/be excited about the thing you're picking up**. If you don't love it, move on quietly. You don't want to build a brand of shitting on things people put out.\n\nYou must also close the loop - when you have produced anything (e.g. a blogpost) based on their work, tag the creator in social media. Twitter is inherently designed for this, but you can also reply in a comment or email it to them with a nice note.\n\n## What happens when you do this?\n\nThere is a VERY high chance that you will get feedback on your blogpost or demo or tweet or whatever, directly from _them_. A retweet and/or follow back is common, especially on repeated interaction where you prove yourself an eager, earnest learner.\n\nIf you try your very best to understand the topic, AND you still get something wrong, you will be corrected. If you [keep your ego small](https://www.swyx.io/speaking/kentcdodds-podcast/), you will handle it. In fact, being wrong in public will be your biggest source of personal growth.\n\n## Why does this work on them?\n\nSimple: **not enough people do it. That's why this is a hack.**\n\nActivity on the Internet has an insane [Zipf's law](https://en.wikipedia.org/wiki/Zipf%27s_law) distribution. This is sometimes called the \"[one percent rule](<https://en.wikipedia.org/wiki/1%25_rule_(Internet_culture)>)\" - 90% of people passively view content, 9% comment on content, 1% create. I would endorse this but for the fact that it is HUGELY wrong:\n\n- I help moderate a [subreddit](https://www.reddit.com/r/reactjs) with ~300k monthly unique visitors - charitably, about 2k of them actually comment, and say 100 people consistently submit content.\n- I get [2-3m tweet impressions](https://www.swyx.io/writing/10000-loose-fans/) a month, but only about 1-2k mentions/replies.\n- Pick any YouTube video you care about. Look at the view count, and look at the number of comments.\n\nBasically, the correct number of passive consumption is closer to 99%, and less than 1% even comment on newly created content. I'm not exaggerating in the least.\n\n> Cesar Kuriyama [randomly tweeted](https://twitter.com/CesarKuriyama/status/331652847806595072) at Jon Favreau about something he made that didnt get picked up. Jon [ended up writing Cesar's app into his classic movie, Chef.](https://www.indiehackers.com/podcast/141-cesar-kuriyama-of-1-second-everyday)\n\nIn short, **people are lazy**. This also means you can get ahead via **strategic nonlaziness**.\n\nWhat's the strategy? Say it with me: **PICK UP WHAT THEY PUT DOWN**.\n\nThere is a _dire_ lack of feedback everywhere. Yes, there are industry superstars with inboxes too hot to respond to. You will get ignored. But even they go out of their way to respond to _some_ feedback. And we already established there aren't too much of those.\n\nOn Twitter in particular, people can be shy promoting their own work. But if _someone else_ on the Internet says nice things about their work, well, shit, they can RT that all day long.\n\n## Why does this work on -you-?\n\nFeedback, feedback, feedback. You lose interest when you get no feedback. What we all crave to keep going is feedback that we're doing something wrong, or right, anything to prime the next action we take. The fact that we don't know what the feedback will be makes it a \"variable reward\" - which is human catnip for forming a new habit.\n\n[Read Nir Eyal's Hooked model](https://www.nirandfar.com/how-to-manufacture-desire/) for more explanation, but basically we are setting up:\n\n- **Trigger**: Something new was created\n- **Action**: \"Pick it up\" a.k.a you create some piece of content based on the new thing\n- **Variable Reward**: You get feedback or endorsement or criticism from the creator\n- **Investment**: You respond to, or internalize, the feedback so you get better the next time around. (aka \"learning\")\n\n## Your call to action\n\nTis the season of launching things. In the next month, dozens of cool new libraries and demos and talks and podcasts and courses will be released, on things that you want to learn.\n\nPick 3 that interest you and \"pick up\" on them.\n\nI virtually guarantee you get feedback on at least one. If you don't aim _too_ high, you will go 3 for 3.\n\nDo this 12 times.\n\nYou will end the year having learned a good deal and having made many new friends along the way. Including me... if you (_ahem_) tag me 😉\n\n## Examples\n\n- [My breakdown of the React Suspense demo](https://dev.to/swyx/a-walkthrough-of-that-react-suspense-demo--4j6a) the day after it was released, in 2018 when I was still getting started with React Twitter, and [you can see the response here](https://nitter.net/search?f=tweets&q=https%3A%2F%2Fdev.to%2Fswyx%2Fa-walkthrough-of-that-react-suspense-demo--4j6a%20)\n- [Me summarizing Boris Cherny's TypeScript book](https://nitter.net/swyx/status/1135525665971695617#m)\n- [Me summarzing Evan You's podcast appearance](https://nitter.net/swyx/status/1199619073836867585#m)\n- Sean Wes: [Learn From People Ahead, Connect With People Beside](https://seanwes.com/podcast/486-sabbatical-episode-finding-community-part-3-of-5-learn-from-people-ahead-connect-with-people-beside/)\n  - Look for the Greatness formula and the Best Friend Method\n"
    },
    {
      "slug": "learn-in-public",
      "data": {
        "technical": false,
        "title": "Learn In Public",
        "slug": "learn-in-public",
        "subtitle": "The fastest way to learn",
        "tag_list": [
          "Advice",
          "LearnInPublic"
        ],
        "date": "2018-06-19T00:00:00.000Z",
        "description": "The fastest way to learn, grow your career, and build your network.",
        "categories": [
          "Advice",
          "LearnInPublic"
        ]
      },
      "content": "\n> Author's Note: I have written an expanded version of this essay in [The Coding Career Handbook](http://learninpublic.org/?from=swyxdotio-LIP).\n> Translations welcome! ([한국어](https://velog.io/@kwanwooi/%EA%B3%B5%EA%B0%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%99%EC%8A%B5%ED%95%98%EB%9D%BC), [Español](https://ricardoerl.com/blog/aprender-en-publico), [中文](https://juejin.im/post/6855456536056037389))\n\nIf there's a golden rule, it's this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\n\nYou already know that you will never be done learning. But most people \"learn in private\", and lurk. They consume content without creating any themselves. Again, that's fine, but we're here to talk about being in the top quintile. What you do here is to have **a habit of creating learning exhaust**:\n\n- Write blogs and tutorials and cheatsheets.\n- Speak at meetups and conferences.\n- Ask and answer things on Stackoverflow or Reddit. **Avoid** the walled gardens like Slack and Discord, they're not public.\n- Make Youtube videos or Twitch streams.\n- Start a newsletter.\n- Draw cartoons ([people](https://code-cartoons.com/) [loooove](https://wizardzines.com/) [cartoons](https://arkwright.github.io/scaling-react-server-side-rendering.html)!).\n\nWhatever your thing is, **make the thing you wish you had found** when you were learning. **Don't judge** your results by \"claps\" or retweets or stars or upvotes - just talk to yourself from 3 months ago. I keep an almost-daily dev blog written for no one else but me.\n\nGuess what? It's not about reaching as many people as possible with your content. If you can do that, great, remember me when you're famous. But chances are that _by far_ the biggest beneficiary of you trying to help past you is _future you_. If others benefit, that's icing.\n\nOh you think you're done? Don't stop there:\n\n- Enjoyed a coding video? Reach out to the speaker/instructor and thank them, and ask questions.\n- Make PR's to libraries you use.\n- Make your own libraries no one will ever use.\n- **Clone stuff you like, from scratch, to see how they work**.\n- Teach workshops.\n- Go to conferences and summarize what you learned.\n\nIf you're tired of creating one-off things, start building a persistent knowledge base that grows over time. [Open Source your Knowledge](https://www.swyx.io/speaking/open-source-knowledge/)! At every step of the way: _Document what you did and the problems you solved._\n\nThe subheading under this rule would be: **Try your best to be right, but don't worry when you're wrong.** Repeatedly. If you feel uncomfortable, or like an impostor, good. You're pushing yourself. Don't assume you know everything, but try your best anyway, and let the internet correct you when you are inevitably wrong. Wear your noobyness on your sleeve.\n\n**People think you suck?** Good. You agree. Ask them to explain, in detail, why you suck. You want to just feel good or you want to **be** good? No objections, no hurt feelings. Then go away and prove them wrong. Of course, if they get abusive block them.\n\nDid I mention that teaching is the best way to learn? **Talk while you code**. It can be stressful and I haven't done it all that much but my best technical interviews have been where I ended up talking like I teach instead of desperately trying to prove myself. We're animals, we're attracted to confidence and can smell desperation.\n\nAt some point you'll get some support behind you. People notice genuine learners. They'll want to help you. Don't tell them, but they just became your mentors. **This is very important: [Pick up what they put down](https://www.swyx.io/writing/learn-in-public-hack)**. Think of them as offering up quests for you to complete. When they say \"Anyone willing to help with **\\_\\_** **\\_\\_**?\" you're that kid in the first row with your hand already raised. These are senior engineers, some of the most in-demand people in tech. They'll spend time with you, 1 on 1, if you help them out (p.s. and there's always something they want help on). You can't pay for this stuff. They'll teach you for free. Most people don't see what's right in front of them. But not you.\n\n\"With so many junior devs out there, why will they help _me_?\", you ask.\n\n**Because you learn in public.** By teaching you, they teach many. You amplify them. You have one thing they don't: a beginner's mind. You see how this works?\n\nAt some point people will start asking you for help because of all the stuff you put out. 80% of developers are \"dark\", they dont write or speak or participate in public tech discourse. But you do. You must be an expert, right? Don't tell them you aren't. Answer best as you can, and when you're stuck or wrong pass it up to your mentors.\n\nEventually you run out of mentors, and just solve things on your own. You're still putting out content though. You see how this works?\n\nLearn in public.\n\np.s. Eventually, they'll want to pay you for your help too. A lot more than you think.\n\n---\n\n> Next: [Learning Gears](https://www.swyx.io/writing/learning-gears/) (How to Start Learning In Public)\n\n> Also: [The Ultimate Hack for Learning In Public](https://www.swyx.io/writing/learn-in-public-hack/) (expanding on \"Pick Up What They Put Down\")\n\n> See Also: [How To Learn In Private](https://www.swyx.io/writing/learn-in-private) (not everything has to be public!)\n\n> Also: [Big L Notation](https://www.swyx.io/writing/big-l-notation) (expanding on why \"Learn In Public\" is the fastest way to learn)\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n\n---\n\n**Related links**\n\n- Talk version of this essay: https://www.swyx.io/speaking/learn-in-public-nyc\n- Patio11: [Do not end the week with nothing](https://training.kalzumeus.com/newsletters/archive/do-not-end-the-week-with-nothing)\n- Chris Coyier: [Showing up and Persistence](https://chriscoyier.net/2013/10/18/mediocre-ideas-showing-up-and-persistence/) and [Working in Public](https://chriscoyier.net/2012/09/23/working-in-public/)\n- Cory House: [Becoming an Outlier](https://vimeo.com/97415346) and [The Art of Learning](https://www.bitnative.com/2013/12/14/programming-your-brain-the-art-of-learning-in-three-steps/) and [Lifestyle Systems](https://www.infoq.com/presentations/lifestyle-software-developer/) and [The 7 Pillar Developer](https://www.youtube.com/watch?v=Nks_Fb5TUjs&feature=emb_title)\n- Jeff Atwood: [How to stop sucking and be awesome instead](https://blog.codinghorror.com/how-to-stop-sucking-and-be-awesome-instead/)\n- Kent C Dodds: [Intentional Career Building](https://kentcdodds.com/blog/intentional-career-building)\n- Joshua Branchaud: Learning In Public by [posting daily TIL's for 5 years](https://github.com/jbranchaud/til)\n- Patrick O’Shaughnessy: [Learn, Build, Share, Repeat](https://twitter.com/david_perell/status/1214559294273683456?s=20)\n\n    > Learn in public, fanatically. Find something you can't stop thinking about and know it better than anyone, and share everything you learn along the way. Once deep enough, start building something too. Make something you have to sell as early as possible. - [Patrick in David Perell's Twitter course](https://twitter.com/drkraft/status/1268194548343279616)\n- LadyBug Podcast: [Blogging 101](https://ladybug.dev/episode/blogging-101/) (esp [Ali Spittel's Blog Post Workflow](https://dev.to/aspittel/my-blog-post-workflow-from-topic-to-publication-4n78))\n- Quincy Larson: [Build your Skills, Build your Reputation, Build your Network](https://twitter.com/ossia/status/1079942716480344065?s=12)\n- [Ali Spittel on syndicating content](https://podcasts.google.com/?feed=aHR0cHM6Ly9mZWVkcy5wb2R0cmFjLmNvbS9WR0F1bHBON01ZMVU&episode=aHR0cHM6Ly9tZWRpYS5ibHVicnJ5LmNvbS9hcnJlc3RlZGRldm9wcy9jb250ZW50LmJsdWJycnkuY29tL2FycmVzdGVkZGV2b3BzL2FycmVzdGVkLWRldm9wcy1wb2RjYXN0LWVwaXNvZGUxNDMubXAz&hl=en&ved=2ahUKEwiFwevO-KvnAhUwFzQIHdd-Dn4QjrkEegQICBAI&ep=6) on the Arrested DevOps podcast\n- Reid Hoffman: [Those Who Teach, Can Do](https://medium.com/@reidhoffman/those-who-teach-can-do-98a30e9a74ea)\n- Shu Omi [did LIP on YouTube](https://www.youtube.com/watch?v=JpzTYxzcF8I) and gained 5k subscribers in 8 months!\n- Gift Egwuenu on [Learning in Public](https://www.youtube.com/watch?v=8VGoj8mrMnY)\n- [How do Rocket Scientists Learn? (Knowledge Management Lessons learned at Goddard, NASA)](https://www.govloop.com/community/blog/how-do-rocket-scientists-learn-aka-knowledge-management-lessons-learned-at-goddard-nasa/)\n\n> In some places, Knowledge Management is about creating systems that get around people’s knowledge deficiencies. At Goddard, it really seems like it is about empowering people to share and reflect on what they know best. It’s a subtle distinction, but I really like that they put people in the center of this work, and start from a place of abundant knowledge in people rather than a lack of information in systems.\n> Social media has a lot of potential, but you need to think about how to facilitate different kinds of (online and offline) relationships between people so that their thinking is improved, innovation occurs, they can get quick answers to complex problems, in order to enhance and accelerate business outcomes.\n> One of the great benefits of using social media as a KM tool is that you are creating and capturing the knowledge at the same time. However, in order for this to truly work people have to be willing to collaborate in the open throughout the project lifecycle. “Learning in Public” is scary for many reasons – people can find and cling to outdated information and users are exposing their knowledge during a vulnerable time in the project (i.e. when they don’t yet have all the answers). However, during this part of the process is when learning can be most valuable. If you share what you know and what you don’t know in the middle of a project, you give people an opportunity to share specific knowledge that can help you in the moment. If it works, this can help save time and money.\n\n- Nathan Barry in his book Authority:\n\n> Back in 2007 Chris Coyier launched a site called css-tricks.com. It was a site dedi- cated to teaching people how to code websites. (CSS is the language that describes how websites should look.) When CSS-Tricks first came out I remember reading a tutorial and arrogantly thinking, “I know that already.” Chris and I were at about the same skill level, so I didn’t learn anything new from him.\n> This continued for a while as he kept putting out new tutorials. But over time, as friends started asking me CSS questions, I found it easier to link to one of Chris’s articles (since they were really well written) than explain everything myself.\n> Years later Chris ran a Kickstarter campaign to redesign his site. Those who con- tributed would get behind-the-scenes access to additional tutorials and content re- lated to the redesign.\n> The goal was set fairly low at $3,500. He quickly blew past the goal and by the end of the campaign had raised $89,697.\n> Incredible.\n> The point is that he did it with relative ease, all because he had built up an audi- ence who loved his work.\n> **He and I started at the same point and our skills progressed at about the same rate. The difference was that he taught and shared, whereas I kept what I was learning to myself. That made the difference between being able to make tens of thousands of dollars on a new project versus releasing to no one.**\n\nNathan in general has a lot of riffs on LIP:\n\n- https://nathanbarry.com/4-ideas/\n- https://nathanbarry.com/consumer-to-creator/\n- https://www.smashingmagazine.com/2013/06/how-to-launch-anything/\n"
    },
    {
      "slug": "learning-gears",
      "data": {
        "technical": false,
        "title": "Learning Gears",
        "slug": "learning-gears",
        "tag_list": [
          "Advice",
          "LearnInPublic"
        ],
        "date": "2019-04-19T00:00:00.000Z",
        "categories": [
          "Advice",
          "LearnInPublic"
        ]
      },
      "content": "\nThe most common question I get when people hear about [#LearnInPublic](https://twitter.com/hashtag/LearnInPublic?src=hash) is how to start.\n\nIn a sense, this is a Bad Question™. What worked for me may or may not work for you. I don't know your situation, your interests, nor your skills. This is why [the original essay](https://www.swyx.io/writing/learn-in-public/) just gives an open ended list of ideas. Being overly prescriptive limits your personal expression, which I hate.\n\nBut I understand the desire for more structure. This is a new muscle to develop. Our entire childhoods we've been trained to learn in private. Now you're trying this new thing. It'd be nice to have a map.\n\nIn the year since I wrote that essay I've stumbled my way towards some sense of what _modes_ of Learning In Public have had disproportionate effectiveness, some by practicing it myself, some by observing others. I finally feel this is worth sharing, so I'll answer this question I've been avoiding.\n\n## Three Gears\n\nI can think of three gears of Learning In Public.\n\n### Explorer\n\nYour **Explorer** gear is your high speed gear. You're just trying to cover as much ground as possible, in many directions.\n\n- The main **problem** to solve is that **you don't know what you don't know**.\n- The **creative exhaust** you make are **mainly notes to self**, possibly in terms only you understand, possibly noting problems only you have. This is mostly in gists and blogposts and tweets and (good) StackOverflow questions, because text is cheap to produce, although Twitch streams are also on the rise. You are often laying out literally your entire state of knowledge for [a metaphorical rubber duck](https://en.wikipedia.org/wiki/Rubber_duck_debugging), looking for holes and documenting for the future.\n- Your public output is episodic - there is **no unifying theme** - you are just a field correspondent reporting from whatever foreign land you find yourself in. This is still useful, because you [can't connect the dots until much later in life](https://www.youtube.com/watch?v=D1R-jKKp3NA).\n- The **public commitment** level is low, usually doable in one day sprints, so this is a great way to get started Learning In Public and also finding what resonates so you can switch gears. It is easy to fall off the wagon though, because no one's really expecting anything from you, because you haven't _committed_ that much.\n\n### Connector\n\nMost people should aim for your **Connector** gear to be their default. This is a powerful, yet nimble gear. You connect people and ideas.\n\n- The main **problem** to solve is that **you know things many don't know**. Hence you should share that and they need to hear you. That takes a little extra effort.\n- The **creative exhaust** you make is **explicitly meant for others**. This means some effort is required that isn't just about your learning, but more about making things easy to digest. Here are the talks, tutorials, cartoons, cheatsheets, books, etc - Higher effort, higher usefulness, longer lasting. You usually arent sharing everything you know, though, so it can feel like you're learning less. However, this is the best way to master fundamentals because you are forced to cover your bases and be able to answer questions you haven't thought to ask.\n- You still dont have a grand **theme** to your work, but usually you are **juggling multiple themes**, and also learning and teaching about their intersections.\n- The **public commitment** is moderate - usually for a few weeks or months - and often involves active exercise of soft skills that you may feel ill equipped for. Check your ego at the door and learn that too. You are \"putting yourself out there\". But also remember Learning In Public is an art, not a science: always rely on and refine your _taste_ rather than objectively trying to please everyone. Find _your_ people, lean on strengths you always thought were irrelevant for coding.\n\nExamples:\n\n- [Samantha Ming](https://twitter.com/samantha_ming)\n- [b0rk](https://wizardzines.com/)\n- [Lin Clark](https://code-cartoons.com/)\n\n> See also: [The Ultimate Hack for Learning In Public](https://www.swyx.io/writing/learn-in-public-hack/) (expanding on \"Pick Up What They Put Down\")\n\n### Miner\n\nReserve the **Miner** gear for when you've struck gold. Something that resonates with people, that you are also abnormally fascinated by. When you strike gold, you'll know. Stop and plant your flag.\n\n- The main **problem** to solve is that something important is too hard, or the world knows too little about something this important. Therefore **you dive deep into something nobody else does**.\n- The **creative exhaust** you make is very specialized - you **do research and build community and infrastructure**. What you do is **meant to last**. Before you, the thing was very hard, or impossible. After you, the thing becomes much easier. The world will thank you.\n- You now have one **theme** that not just unifies your work, but that you become synonymous with. Every person in the world who has the problem you solve, will eventually find you, because that is how the Internet works. (Coincidentally, you no longer need to \"put yourself out there\", people will come to you.) This might feel boring since you're just about one thing all the time, but what seems like one topic to you today (e.g. Machine Learning) will eventually subdivide into different disciplines when you go deep enough (e.g. Supervised Learning, Unsupervised Learning, Reinforcement Learning).\n- The **public commitment** is very high - on the order of years and careers. You're digging a mine and spending energy far more than any other sane person is doing - it helps if the area you've chosen has a good chance of widening and deepening at the same time you're mining. So have some form of macro thesis for why this field in general will be increasingly important. (More on this in future writing.)\n\nExamples:\n\n- Tobias Koppers\n- Jen Simmons\n- Lea Verou\n- Evan You\n- Seb McKenzie\n\n## Why Gears\n\nThese are \"gears\" and not \"levels\" or \"modes\" because you can step in and out of any gear depending on what kind of terrain you're on and how fast and deep you need to go. (I bike a lot so I just like the analogy of \"gears\" - I also like the implication that one gear isn't necessarily better or worse than another, it just depends, and also adopting one gear does mean trading off speed or power.)\n\n## What do I do now?\n\nIf you're just starting to #LearnInPublic, start as an **Explorer**. Map out whatever you're learning, whatever tickles your fancy. Go as fast as you like, an inch deep and a mile wide.\n\nWhen you have a good sense of the terrain and see other Explorers you can help, start being a **Connector**. Link people and ideas, use your full creative talents. Go back and cover gaps in your knowledge.\n\nIf you find yourself tripping over gold, start **Mining**. If it turns out a dud, switch gears. No sweat.\n\nThree gears of learning, all in Public. We're cheering you on.\n\n> See Also: [Big L Notation](https://www.swyx.io/writing/big-l-notation) (expanding on why \"Learn In Public\" is the fastest way to learn)"
    },
    {
      "slug": "specialize-in-the-new",
      "data": {
        "technical": false,
        "title": "Specialize In The New",
        "slug": "specialize-in-the-new",
        "tag_list": [
          "Advice",
          "LearnInPublic"
        ],
        "date": "2018-06-22T00:00:00.000Z",
        "categories": [
          "Advice",
          "LearnInPublic"
        ]
      },
      "content": "\nYou already know the value of a niche - you go up in market value the more specialized you are in anything. So what do you specialize in?\n\nThere are many schools of thought, including ones where you could be a generalist that doesn't specialize in anything. I find one rule to be simplest and most effective above all: Specialize in the New.\n\nDidn't we just agree to avoid FOMO? Well yes, thats an important distinction - don't specialize in _everything_ new. Specializing means you have to say no to a lot of things. Just pick something new that fascinates you, and hopefully many others as well. Since you're learning in public, you'll know when you hit on a real nerve. Budget in the idea that you'll fail a few times before you find Your Thing.\n\nThen the other big objection: There are plenty of jobs/money/etc in (fill in the blank older technology) too! This is usually followed by some big numbers and anecdata. \"My brother's cousin's roommate's friend took this COBOL job and now he's earning six figures on the beach in Tahiti!\"\n\nIf that works for you, good. Here's why _I_ don't do it. It is far easier to rise up the ranks quickly in a new space than in an old, crowded space. You know how people rant and rail against companies who hire based on years of experience? That could go away tomorrow and you'd still have clients/employers silently comparing you with others based on your years of experience. It's human nature. But you know where it's impossible for someone to have 5 years' experience doing X? When X is less than 5 years old.\n\nThere's a practical element to it as well - technologies accumulate a LOT of cruft over time. Best practices form, some of which are total BS, but that is stamped by early experts as The Right Way To Do Things because Reasons. Books are written, careers are made. If you choose to play on their turf, you'll eventually need to read/deal with/overcome/win approval of all of that history. Even if you work twice as hard as the average developer you can only make up for all the context you missed half as slowly. You know where its possible to have read everything ever written about something? When it's new.\n\nThe subheading to this is: **Focus right next to where others are investing heavily.** Joel Spolsky notes that [demand for a product increases when the price of its complements decreases](https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/). \"Complements\" are an abstract idea so I will try to draw an example for you. If you brand yourself as a Firebase consultant and Google keeps adding and bugfixing Firebase functionality, they are in a very small way working for you (as you are also adding value to them). (Side note: this is why the developer relations job is a very special one for a midcareer dev - you are essentially a designated person showing off the investment of a company and team doing the real work in the background. As a focal point and an amplifier, you will get disproportionate credit.) As a developer (and not a startup) you don't even really have to make the bank shot of figuring out the overlooked adjacencies next to an area of heavy investment; you can just make yourself all about that area directly and let the market tell you where gaps exist. What's broadly true is that heavy investment usually leads to the cost or \"price\" of that thing decreasing, as the usual plan is larger scale at lower unit cost.\n\nI have an economics background so if I lost you there, it's my fault. But I really want to impress upon you that picking the right horse in this game of specializing for the new isn't that hard because the market is going to be fairly obvious about it. Why more people don't do it is because most people are busy being experts in other, older things. In this green field space, your \"weakness\" becomes a strength.\n\nPlant your flag on fertile ground, and say, \"this is what I do\". It will carry you far.\n\np.s. Clone open source apps using your technology; demonstrate how it is better and make fixes where it is worse. \"react-router\" was built by early adopters of React who simply missed the old router from Ember.\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n"
    },
    {
      "slug": "avoid-fotc",
      "data": {
        "technical": true,
        "title": "Avoiding Flash of Unthemed Code",
        "description": "If your site has a dark mode or custom theme, you might have a flash of the default theme before JavaScript loads. Here is the solution.",
        "slug": "avoid-fotc",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "date": "2020-02-17T00:00:00.000Z"
      },
      "content": "\nIf your site has a dark mode or custom theme, you might have a flash of the default theme before JavaScript loads. This site has both a light mode and a custom-settable theme, serialized into localStorage. \n\nPreviously it would load the default (dark mode) and then as the JS ran it would transition smoothly into your custom set theme. Obviously not great if you keep landing on my site and it keeps flashing you with the colors you don't want.\n\nI was [browsing /r/reactjs and saw this post on a dark mode toggle](https://www.reddit.com/r/reactjs/comments/f5i7zc/i_has_fun_making_this_little_dark_mode_toggle/), which led me to [Donavon's useDarkMode](https://github.com/donavon/use-dark-mode) hook, which then led me to [noflash.js.txt](https://github.com/donavon/use-dark-mode/blob/develop/noflash.js.txt). Ah! Here was the solution!\n\nBasically, inline the localStorage reading into the html you generate. I tried putting this in `<svelte:head>` in my Sapper `_layout.svelte` file and it worked! (It's still WIP, because I want to add this to an auth system, but try it out!)\n\n\nHere's the code snippet for implementing custom theming in your Svelte/Sapper app!\n\n```html\n<script>\n  import { onMount } from 'svelte'\n  import { themeStore } from '../theme.js' // a writable store\n\n  onMount(renderCSS)\n  themeStore.subscribe(renderCSS) // subscribe to theme updates elsewhere in the UI\n  function renderCSS() {\n    if (typeof document === 'undefined') return // SSR\n    const stylesheet = document.getElementById(\"unique-stylesheet-id\");\n    if (!stylesheet) return // not rendered yet\n    let string = ``\n    if ($themeStore.bgColor) string += `--bg-color: ${$themeStore.bgColor};`\n    if ($themeStore.textColor) string += `--text-color: ${$themeStore.textColor};`\n    if ($themeStore.linkColor) string += `--link-color: ${$themeStore.linkColor};`\n    if ($themeStore.lineLength) string += `--line-length: ${$themeStore.lineLength};`\n    stylesheet.innerHTML = `html { ${string} }`\n  }\n</script>\n\n<svelte:head>\n  <style id=\"unique-stylesheet-id\"> </style>\n  <script>\n    // read the stored theme if it exists, \n    // and add it to stylesheet, before the user sees it\n    (function() {\n      let temp = localStorage.getItem('swyx_io_themeStore')\n      if (temp) {\n        temp = JSON.parse(temp) // store object\n        if (typeof document === 'undefined') return // SSR\n        const stylesheet = document.getElementById(\"unique-stylesheet-id\");\n        let string = ``\n        if (temp.bgColor) string += `--bg-color: ${temp.bgColor};`\n        if (temp.textColor) string += `--text-color: ${temp.textColor};`\n        if (temp.linkColor) string += `--link-color: ${temp.linkColor};`\n        if (temp.lineLength) string += `--line-length: ${temp.lineLength};`\n        stylesheet.innerHTML = `html { ${string} }`\n      }\n    })()\n  </script>\n</svelte:head>\n```"
    },
    {
      "slug": "bad-ways-to-get-data",
      "data": {
        "technical": true,
        "title": "Bad Ways to Get Data",
        "slug": "bad-ways-to-get-data",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "date": "2019-09-14T00:00:00.000Z"
      },
      "content": "\nIn working on my [Sapper export library](https://www.npmjs.com/package/ssg), I ran into a very peculiar problem: my pages were being generated a lot more slowly than expected:\n\n- I was generating ~100 pages, and it took about 16 seconds (0.16s/page)\n- https://insiderx.com/ does 30k pages, and it takes 15 minutes (0.03s/page)\n- an extremely simple tweak of the default Sapper app generates 100k very content light pages in 95 seconds (0.001s/page)\n- [Gatsby v2](https://github.com/gatsbyjs/gatsby/pull/6226/) built about 5000 pages in 37 seconds, 25k pages in 7.5mins (0.01 - 0.02s/page)\n\n## Table of Contents\n\n## Do Expensive Reads Over and Over\n\nSo I was at least an order of magnitude off of where I should be. I originally thought that this was justified, as I'd been told Sapper uses puppeteer to crawl pages, but this was wrong. I thought it might be json serialization/desrialization over the local server, but this was wrong.\n\nIt was the fetching of the data.\n\nBecause I had handcooked my own data process to be a single function that, when called, returned a Big Ball of Data, it was easy to code each page call to fetch this Big Ball every single page despite not needing it. If the reads were expensive (which they were, with [syntax highlighting](https://github.com/octref/shiki)), then they were executed for each file, for each page, over and over and over again.\n\nOnce I realized this, the fix was obvious. Refactor the data pipeline to have an upfront data read, dump it somewhere as a static, postprocessed file, and then only refer to that static file where reads are guaranteed to be cheap.\n\nAs of writing, this blog now exports its ~100 pages in 7s (0.07s/page). Still slow but half as bad.\n\n## Do One Big Read Upfront\n\nSo this is where we are now. everything happens in sequence. I can't do anything with the result of the first file read until I am done with the last file read. I am storing the data as one big ball, which means reading it is also one big ball. Which of these are the bottlenecks? Or is it something else I don't even know about?\n\n## Have No Way to Profile\n\nIt seems like a really good way to be bad at getting data quickly is to not have any information with which to improve.\n\n## Have No Way to Test Cheaply\n\nSome plugin systems encourage tacking plugin after plugin with no way to debug apart from just running the code and seeing if it works. Plugins should be led by an introspection API that can be logged out and studied without actually executing. A strong parallel is GraphQL's schema system and GraphiQL.\n\nIn short: have a [Dry Run](https://mobile.twitter.com/swyx/status/1172212419764064256). (more [Dry Run examples](https://twitter.com/aj_kerrigan/status/1172964279127068673?s=20) here)\n\n## Use synchronous I/O in an asynchronous environment\n\n[Sapper uses `writeFileSync` to write files.](https://github.com/sveltejs/sapper/pull/894) This means essentially each file writing blocks the next. Pretty silly when Node is supposed to be async by default? Very nice way to mutex yourself for convenience.\n\n## Do Everything Twice\n\nCurrently I read source data, combine and save it to the Big Ball, then query against it for a slice, and then save the slice again. Why not directly read and save slices and be the end of it?\n\nThere's a need to store indexes that cut across slices. Should we do that during, between, or after the slice read/writes?\n\n## Have No Idea if You Need to Redo Work\n\n[Immediate mode](<https://en.wikipedia.org/wiki/Immediate_mode_(computer_graphics)>) is easy to debug and write, because you throw away all state and so you are only responsible for declaring new state, however of course Retained mode can be more efficient if you do it right.\n\nThe way to do this is to have the idea of \"pure functions\" in data fetches. Given this assumption, you can memoize on these inputs, and skip fetches.\n\nThere's a related idea as well, where if you consider that data fetch processes can be expensive both in the initial fetch and also in the postprocessing, to do two things:\n\n- if it is possible to fetch an index, memoize on that index and only fetch items based on specific invalidated caches.\n- You can still do the full initial fetch, but still memoize the postprocessing.\n\n## Have No Way to Estimate Time For Completion\n\nThe halting problem is intractable, but you can at least give a credible estimate of time to completion by using cumulative and prior results. This is important for long processes like Machine Learning.\n\n## Ultimate lesson: Have a Plan\n\nI think this lesson is a general one from the Database world - before making big data queries, make a [Query Plan](https://en.wikipedia.org/wiki/Query_plan)! Also called a manifest. I guess the difference between a plan and a manifest is that a manifest can have useful info for others to consume, while a plan has no such obligation.\n\nYou can then make optimizations _across_ the plan, as well as memoize parts of it based off a manifest, and so on.\n\nThat any large data pipeline should learn lessons from the data world seems so brutally obvious in retrospect, but we consistently fail to design prototypes and API's that respect this basic principle.\n"
    },
    {
      "slug": "oss-repo-setup",
      "data": {
        "technical": true,
        "title": "Best Practice Open Source Repo Setup",
        "slug": "oss-repo-setup",
        "categories": [
          "Tech"
        ],
        "date": "2020-01-19T00:00:00.000Z",
        "description": "Quick and simple ways to set up Open Source Repos with Best Practices"
      },
      "content": "\n*Essay status: mostly baked. Meant for beginners to OSS.*\n\n## Table of Contents\n\nI often make the joke that GitHub doesn't do enough to encourage community standards:\n\n[![https://pbs.twimg.com/media/EA-CXDMWkAEtMKI?format=png&name=small](https://pbs.twimg.com/media/EA-CXDMWkAEtMKI?format=png&name=small)](https://twitter.com/swyx/status/1157286966733496323)\n\n\n## Why Standards Are Important\n\nThese standards aren't just made up for shits and giggles. They genuinely help the open source community work better together:\n\n- **Descriptions** are important as short oneliners for people to understand what your repo is for.\n- **Readme's** are important for people to understand what your repo does and how to use it. I have [strong views here!](https://twitter.com/swyx/status/1218711368989278208)\n- **Codes of Conduct** help define what is permissible behavior in your community. And yes, every open source repo is a community.\n- `CONTRIBUTING.md` welcomes potential contributors and gives them information they need to get started. This is [particularly prone to unhelpful boilerplate](https://twitter.com/swyx/status/983467648997609477) - more thoughtful customization would help contributors. [Here is a great example from Kent C. Dodds](https://github.com/testing-library/react-testing-library/blob/master/CONTRIBUTING.md).\n- **Licenses** are important so people know what they can or cannot do with your code. [GitHub's default is no license](https://twitter.com/swyx/status/1218711368989278208) - this is bad, because without a license, some people are technically not even allowed to LOOK at your code.\n- **Issue and PR templates** help maintainers ask basic checklist questions to improve the quality of issues and contributions (and waste less time on back-and-forth).\n- `.gitignore` is important because people often forget to ignore their `node_modules` and `.DS_Store` and other non-core folders. Consider also adding `.vscode`\n- (optional) - `CHANGELOG.md`, `.nvmrc`, `.gitattributes`, `CODEOWNERS`, `.editorconfig`, `.prettierrc`, `SUPPORT`\n\nThis isn't a huge list of stuff, but it can be a bit of a drag to set all this up manually especially if you operate [Open Source by Default](http://artsy.github.io/series/open-source-by-default/). Most of my own repos don't even meet these standards because it is such a drag to set them up. \n\nIn GitHub, you can check what you're missing by going to the `More > Insights > Community` page on your repo:\n\n![https://github.com/jeroenouw/cgx/raw/master/community-score.png](https://github.com/jeroenouw/cgx/raw/master/community-score.png)\n\nAnd it has nice UI prompts to help you add things if you are missing them.\n\n## Automate It\n\nHere are some tools and bash scripts to run thanks to my friends [Tierney](https://twitter.com/bitandbang/status/1212223793898373120) and [Phil](https://twitter.com/philnash): \n\n```bash\nnpx license mit > LICENSE.md  # initialize your license\nnpx gitignore node  # initialize your gitignore\nnpx covgen YOUR_EMAIL_ADDRESS # code of conduct\ngit init # initialize git\nnpm init -y # initialize package.json, accept all defaults\n```\n\nYou can inline this into a oneliner bash command: `npx license mit > http://LICENSE.md && npx gitignore node && npx covgen YOUR_EMAIL_ADDRESS` (adding in git and npm init if you wish).\n\nNote that in order to use `npm init -y` with decent defaults, you should set them:\n\n```bash\nnpm set init.author.name \"Your name\"\nnpm set init.author.email \"your@email.com\"\nnpm set init.author.url \"https://your-url.com\"\nnpm set init.license \"MIT\"\nnpm set init.version \"1.0.0\"\n```\n\n[Kyle](https://twitter.com/kylewelch/status/1219011921812316160) and [Phil](https://philna.sh/blog/2019/01/10/how-to-start-a-node-js-project/) put this in bash scripts to add a few other steps all in a single `init_repo` command:\n\n```bash\ninit_repo() {\n  # delete any of the below per your preference\n  mkcd $1\n  git init\n  npm init -y\n  npx license $(npm get init.license) -o \"$(npm get init.author.name)\" > LICENSE\n  npx gitignore node\n  npx covgen \"$(npm get init.author.email)\"\n  git add -A\n  git commit -m \"Initial commit\"\n}\n```\n\nOf course, these steps don't take care of ALL the standards listed above - so far the only tool I have come across that handles them all is [CGX](https://github.com/jeroenouw/cgx)\n\n![https://github.com/jeroenouw/cgx/raw/master/cgx-demo.gif?raw=true](https://github.com/jeroenouw/cgx/raw/master/cgx-demo.gif?raw=true)\n\nThis generates (according to their README):\n\n```markdown\n### Github, Gitlab and Bitbucket\n* License \n  - MIT\n  - ISC\n  - Apache 2.0\n  - BSD 2-Clause\n  - GPLv3\n* Changelog\n* Contributing\n* Readme\n* Todo\n* Code of Conduct\n\n### Github specific\n* Bug report (issue)\n* Security vulnerability report\n* Feature request (issue)\n* Pull request template\n* All files at once\n\n### Gitlab specific\n* CI template\n* Bug (issue)\n* Feature proposal (issue)\n* Merge request\n* All files at once\n\n### Bitbucket specific\n* In future versions\n```\n\n## Make Your Own\n\nIsaac Schleuter, npm founder, [chimed in](https://twitter.com/izs/status/1219083765852491776?s=20) that you can actually make your own and it can be invoked via the `npm init` command! TIL!\n\n## Other Useful Tools and Reads\n\n- https://github.com/donavon/init-readme\n- https://philna.sh/blog/2019/01/10/how-to-start-a-node-js-project/\n- https://medium.com/@jdxcode/for-the-love-of-god-dont-use-npmignore-f93c08909d8d\n- https://twitter.com/DerekNonGeneric/status/1219063020250456064\n- https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github?af=95qfq1\n- For large projects: enforcing CODEOWNERS: https://twitter.com/cramforce/status/1182349710121734145\n- (other tools? [Let me know](https://twitter.com/swyx))\n"
    },
    {
      "slug": "collapsing-layers",
      "data": {
        "technical": true,
        "title": "Collapsing Layers",
        "slug": "collapsing-layers",
        "subtitle": "Doing Less to Do More",
        "categories": [
          "Tech"
        ],
        "date": "2020-01-20T00:00:00.000Z",
        "description": "As Moore's Law ends, devices multiply, and software becomes critical to life, we must take another look at our full stack for continued gains in efficiency, reliability and security."
      },
      "content": "\n_Essay status: confident in framing, not confident in timing. Still looking for more examples_\n\n**The future of technology is less layers, not more.**\n\n## Table of Contents\n\n## The Mess We're In\n\nAs hardware has gotten faster and cheaper over time, we have chosen to stack layer after layer of software on top of each other in the name of ease of use (both taking away lower level concerns for those who would otherwise have to handcode it, and also enabling an ever-wider group of people to write software). This has made a lot of people very angry and been widely regarded as a bad move.\n\nBut it was the right move - enabling more people to write and use more software accelerated the demand for all technology, hardware included.\n\nOf course, we have always had frequent calls for a return to simplicity and more efficient software. [Niklaus Wirth](https://en.wikipedia.org/wiki/Wirth%27s_law) in 1995 [pled for Lean Software](http://doi.ieeecomputersociety.org/10.1109/2.348001). There is a delicious irony in the contrast between Moore's Law and Wirth's Law - this is a special case of [Jevons paradox](https://en.wikipedia.org/wiki/Jevons_paradox). My favorite modern framing of pits the former CEOs of Intel vs Microsoft: [What Andy giveth, Bill taketh away](https://en.wikipedia.org/wiki/Andy_and_Bill%27s_law). [Joe Armstrong](<https://en.wikipedia.org/wiki/Joe_Armstrong_(programmer)>) gave a great Strange Loop talk on this fittingly titled [The Mess We're In](https://www.youtube.com/watch?v=lKXe3HUG2l4). At the OS level, [Casey Muratori](https://caseymuratori.com/about) notes that Linux + FreeBSD itself is irreducible bloat, and calls it the [Thirty-Million Line Problem](https://www.youtube.com/watch?v=kZRE7HIO3vk&feature=youtu.be) - (thanks [Richard Feldman](https://twitter.com/rtfeldman) for the pointer!)\n\nIn the 2010's we carried on as our predecessors did. [As the modern iteration of the joke goes](https://twitter.com/iamdevloper/status/926458505355235328?lang=en):\n\n> 1969:\n>\n> - what're you doing with that 2KB of RAM?\n> - sending people to the moon\n\n> 2018:\n>\n> - what're you doing with that 1.5GB of RAM?\n> - running Slack\n\nAnother favorite stat I like comes from [Jake and Surma](https://www.youtube.com/watch?v=TsTt7Tja30Q) on the size of Minesweeper on Windows:\n\n- Windows 95: 9.6kb\n- Windows Vista: 4MB\n- Windows 10: 105MB\n\n**That is 1,050,000% bloat in 20 years.**\n\n## What's changing?\n\nThree factors at play: the slowing of Moore's law, the rise of mobile and wearable devices, and the demand for more secure and reliable software.\n\n### Moore's Law\n\nRumors of Moore's law's death have been greatly exaggerated before, but we still hold it to be broadly true. In 2016 the industry collectively agreed it would [die by 2021](https://www.techrepublic.com/article/moores-law-dead-in-2021-heres-what-the-next-revolution-will-mean/), but right on target, [Intel in 2019 said it was back on](https://venturebeat.com/2019/10/24/intel-ceo-7nm-in-2021-will-put-us-back-on-moores-law-cadence/). Of course technically, the law as stated has [died a few \"deaths\" already](https://www.extremetech.com/extreme/203490-moores-law-is-dead-long-live-moores-law): we just kept shifting the bar from transistor density to power consumption to marginal cost. So what makes this time any different?\n\nMoore's law won't suffer a dramatic death, it will just slow and become irrelevant compared to progress seen by adopting other chip architectures. We will move from 10nm to 7nm to 5nm and there's a quantum effect-imposed hard limit down near 1nm. But each process node upgrade is getting slower, and more expensive. Meanwhile, we are already shunting plenty of calculations to GPUs, even on smartphones. This is a \"collapsing of layers\" between workload and chipset, and of course similar movements are happening for all large scale workloads like [cryptocurrency mining](https://en.bitcoin.it/wiki/ASIC) and [machine learning](https://en.wikipedia.org/wiki/Tensor_processing_unit) applications. For general computing consumer hardware, Moore's law is already effectively dead - laptops have not materially gained clock speed in a decade, and we have simply added multiple cores and GPUs.\n\nThere is still hope - anything from [quantum computers](https://ai.googleblog.com/2019/10/quantum-supremacy-using-programmable.html) to [photonic chips](https://qz.com/852770/theres-a-limit-to-how-small-we-can-make-transistors-but-the-solution-is-photonic-chips/) to [3d chips](https://www.engadget.com/2018/12/12/intel-foverus-3d-chip/0) - but all of these are at the \"science fair\" stage and at even longer odds than process node improvements on traditional silicon.\n\n**What's easier - solving quantum computing or taking another look at 50 years of software bloat?**\n\n### Mobile and Wearable Devices\n\nNo matter what happens to high end, \"full powered\" computers, the _range_ of computers has also broadened tremendously in our lifetimes and will continue to do so. Just like PCs lagged behind Mainframes, smartphones lag behind PCs, and wearable devices like watches and headphones will lag even further. All of these will always need faster processing at low power at low cost. We cannot conceivably write software for these devices like we do for PCs.\n\n### More Secure and Reliable Software\n\nSoftware used to be written for technical people, for occasional uses where lives and livelihoods did not depend on it. As [software eats the world](https://techcrunch.com/2016/06/07/software-is-eating-the-world-5-years-later/), these assumptions must change.\n\nOf course, most software is not life-or-death, but it is hard to deny that there is a tremendous demand for more reliable software, both from users in the form of fewer bugs and crashes and bad states, as well as from developers in the form of having a more stable substrate on which to write as well as deploying more reliable code per hour (since that is the ultimate limited resource).\n\nI choose to focus on reliability, not speed, so as not to overlap with the above points - we always want faster software. But of course speed leaks into reliability, with timeouts and hidden race conditions and the like. It is a bolder assertion that we can outright achieve more reliable software as well by collapsing layers. I recognize that this is not a necessary result, and that it is somewhat unsubstantiated. But each layer is an abstraction, and [all non-trivial abstractions, to some degree, are leaky](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/). Fewer layers, fewer leaks, fewer bugs - at the cost of having to do more per-layer.\n\nI really don't know anything about security, but this is a major dimension of concern on every device at every level. [By all accounts we are severely lacking here](https://blog.jessfraz.com/post/why-open-source-firmware-is-important-for-security/). And a re-examination and collapsing of layers with the benefit of today's knowledge is likely to yield benefits.\n\n## Dealing with the Cost\n\nCalling for a reversal in a 50 year trend in software bloat is, frankly, ridiculous. I understand that humans are really bad at responding to slow moving train wrecks. Using **nearly-free, tried and tested tech with known bugs** is preferable to sinking a bunch of time into **new, unproven tech with unknown bugs.**\n\nAlthough the cost of ignoring these issues is rising due to the reasons listed above, we may need a distinct flashpoint event or movement or community that helps to galvanize and coordinate action at every layer of the stack. I confess I have no idea how to do this. I'd love more conversation about it.\n\nHowever, I do like one concept that has taken in my mind in the past year. The simple phrasing: **layers that belong together, should live together**. In backend API design, it is well known that sorting, filtering and paging of database results belong at the same layer of the stack, since trying to place one thing at a different layer to the other requires so much transmission of information that you basically end up merging layers poorly. So in terms of cost, the collapsing of layers pays for itself because we were paying for the cost anyway through needing to punch holes in layers that ought to have been designed together but never were, through accident of history.\n\nI wonder what other layers \"belong together\".\n\n**We might also add layers to reduce layers**. In 2016 Dan Abramov kicked off [a movement to bundle layers in the JavaScript ecosystem](https://increment.com/development/the-melting-pot-of-javascript/). The idea here is that, yes, we are adding layers, but we can reduce a bunch of layers to implementation detail. So from the outside it looks like just one layer, while on the inside there are of course a bunch of layers that are collectively managed by a generous open source community (socializing the cost).\n\nThis is a \"cheat\", of course - a bunch of layers stuck together with duct tape and elbow grease. We aren't really collapsing layers at all, and it is leaky as hell - but it works to prove out the demand for simplicity, and paves the way [for other tools](https://parceljs.org/) designed from the ground up to handle this.\n\n## What's collapsing?\n\nI intend this to be a living list of current movements in collapsing layers, to inspire the reader as to the wealth of opportunities and the degree of impact that can be had.\n\n- Hardware:\n  - We talked about ASICs above. [Oxide](http://dtrace.org/blogs/bmc/2019/12/02/the-soul-of-a-new-computer-company/) arguably takes \"the ASIC approach\" to the private cloud.\n  - [NERF and the Open Source Firmware movement](https://blog.jessfraz.com/post/why-open-source-firmware-is-important-for-security/)\n  - [Unikernels](https://thenewstack.io/why-the-unikernel-might-outpace-generic-linux-for-cloud-native-ops/): [servers using 10% of normal energy/CPU cycles](https://www.youtube.com/watch?v=msnQyUwz7ws&feature=emb_title)\n  - [Packet](https://www.packet.com/blog/oops-we-forgot-to-build-a-managed-kubernetes-service/) punching through the big cloud names and focusing heavily on automated bare metal\n- Software:\n  - JavaScript: [Deno](https://deno.land/) folds TypeScript into Node's spiritual successor. [The Pika Project](https://github.com/pikapkg) is helping make build tools optional. [Rome](http://romejs.dev/) is being created to fold prettifying, linting and bundling and typechecking into a single AST run. [Parcel](https://parceljs.org/) folded a bunch of plugins into the build tool to make a true optional config experience. [Svelte](http://svelte.dev/) takes a compiler approach to preserve the declarative authoring experience of frontend frameworks without a virtual DOM layer, also adding in styling and animations in the same toolkit.\n  - Reason Native: [`esy` helps compile Reason apps](https://reasonml.github.io/docs/en/quickstart-ocaml) to native code, [removing several layers](https://www.youtube.com/watch?v=QD9hpiBZQvA&feature=youtu.be) and reporting 10x faster startup and 5x less memory usage\n- Infrastructure:\n  - [JAMstack](http://jamstack.org/) is arguably a movement to collapse deployments straight to the essentials of [Git -> Build -> CDN](https://twitter.com/Netlify/status/1177579567059546113)\n- Developer Tools:\n  - [Darklang](https://medium.com/darklang/unveiling-dark-e0be6f1e0b06) is collapsing IDE + Language + Cloud Infrastructure\n- [What else am I missing?](https://twitter.com/swyx)\n\n## Challenges\n\nTo be honest, I myself struggle to reconcile this idea with [Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy). I feel a little better that [Linux itself is 15m lines of code](https://unix.stackexchange.com/questions/223746/why-is-the-linux-kernel-15-million-lines-of-code) - in other words - maybe its more about the simple number of layers than the actual depth or thickness of each layer. Rich Harris puts it better than I can: [small modules may be better for developers at the cost of users](https://medium.com/@Rich_Harris/small-modules-it-s-not-quite-that-simple-3ca532d65de4).\n\nI do think that Collapsing Layers is only suitable for a more mature subset of technologies. If something is nascent, growing like a weed, prone to change - you probably still want to tack on more layers. [AWS is growing at 40% a year](https://www.zdnet.com/article/amazon-delivers-mixed-q3-results-as-aws-growth-slows/) and unusable? Fine, add [a second layer cloud](https://softwareengineeringdaily.com/2019/10/14/how-to-build-a-cloud-provider-with-anurag-goel/). Nondeveloper Prosumers want to make software en masse? [Fine, slap a GUI on everything](https://webflow.com/blog/no-code-is-a-lie).\n\nJim Barksdale is famous for noting that there are [two ways of making money in business: bundling and unbundling](https://hbr.org/2014/07/marc-andreessen-and-jim-barksdale-on-how-to-make-money). This is often applied to the business of software, but one can argue the same for technology architecture. It's time to bundle the basics.\n\n## Further Notes\n\n- https://tonsky.me/blog/disenchantment/\n- [Unikernels: The Next Stage of Linux’s Dominance](https://dl.acm.org/doi/pdf/10.1145/3317550.3321445)\n"
    },
    {
      "slug": "django-on-render",
      "data": {
        "technical": true,
        "title": "How To Deploy a Django App to Render.com",
        "slug": "django-on-render",
        "categories": [
          "Python"
        ],
        "date": "2020-02-07T00:00:00.000Z",
        "description": "Messing around learning Django and deploying"
      },
      "content": "\nI pottered around a bit with Django today, blasting through [the tutorial](https://docs.djangoproject.com/en/3.0/intro/tutorial01/). However [the deployment section](https://docs.djangoproject.com/en/3.0/howto/deployment/) was rather impenetrable for someone who doesn't even know what WSGI stands for. \n\nI figured I should try deploying it to [Render.com](http://render.com/) to learn both.\n\n## Table of Contents\n\n## TL;DR\n\n[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://dashboard.render.com/iac/new?repoOwner=sw-yx&repoName=django-quick-start&branch=master&provider=GITHUB)\n\n## Steps\n\nThe official [Render tutorial for Django](https://render.com/docs/deploy-django) uses PostGres, which means the web server and database takes up your two free deployments. It also [had issues when I tried it](https://github.com/render-examples/django-quick-start/issues/1). So I wanted to try a \"from scratch\" Django project, from the official tutorial, using SQLite.\n\n1. Going through the whole tutorial will get you something like https://github.com/sw-yx/django-quick-start. I modified `mysite` a bit to add a nicer landing page. Commit it to a GitHub repo.\n2. [Go to your Render dashboard and start a new web service](https://dashboard.render.com/select-repo?type=web).\n3. Make sure to configure the necessary commands and env vars:\n\n- `DJANGO_SECRET_KEY`: something strong. can generate with `echo \"$(openssl rand -base64 32)\"`\n- Build command: `./build.sh` - this script, not from the tutorial, installs Python's `requirements.txt` - i'm not totally sure if this is needed, I copied it from https://github.com/render-examples/django-quick-start/ so I assume it is\n- Start command: `cd mysite && gunicorn mysite.wsgi:application`. Note the `cd mysite` is just because of the filestructure of my project I had set up. A \"professional\" project would presumably be a little flatter. You will note the weird syntax of `mysite.wsgi:application` - `application` is the variable where the WSGI callable is stored.\n\nI had previously [tried and failed](https://github.com/render-examples/django-quick-start/issues/1) to use Render's Django Quick Start repo, so if you had `DJANGO_SETTINGS_MODULE` set to `config.settings.production`, Django will be looking for a file that doesn't exist and fail nastily. Delete it.\n\nWith that, your Django app should be up and running. Mine is deployed at: https://django-test-9g3f.onrender.com/ and you can see the stateful voting app in action at https://django-test-9g3f.onrender.com/polls. https://django-test-9g3f.onrender.com/admin also works.\n\n## Render.yaml\n\nIAAC is important for scaling/reproducability, and a nice one click deploy experience. The docs aren't fully fleshed out yet but fortunately there is [a decent sample YAML file published](https://render.com/docs/yaml-spec). I was also able to find plenty of examples by [searching GitHub](https://github.com/search?q=filename%3Arender.yaml&type=Code).\n\n```yaml\nservices: \n- type: web\n  name: djangotutorial\n  env: python\n  buildCommand: \"./build.sh\"        # ensure it's a string\n  startCommand: cd mysite && gunicorn mysite.wsgi:application\n  repo: https://github.com/sw-yx/django-quick-start.git # optional\n  # plan: standard # optional\n  healthCheckPath: /\n  # autoDeploy: false             # optional\n  envVars:\n  - key: DJANGO_SECRET_KEY\n    generateValue: true       # will generate a base64-encoded 256-bit secret\n```\n\nMost \"[Deploy to Render](https://render.com/docs/deploy-to-render)\" buttons take the referer url to determine which repo to deploy, but you can customize this by just linking directly to the dashboard with the right path variables e.g. https://dashboard.render.com/iac/new?repoOwner=sw-yx&repoName=django-quick-start&branch=master&provider=GITHUB\n\n## Failures and Todos\n\nYou'll observe that all static assets fail to load in production, despite it working in local development. I reckon this is some misconfiguration of the static assets finding that I did. The official example has [other static file finding strategies](https://github.com/render-examples/django-quick-start/blob/c48c0ced13ed6a17c2708334548f248a0763a531/config/settings/base.py#L140-L154) i have yet to explore.\n\n## Misc\n\nI made this dump of Render's env vars, which I figured I could use in my application code: \n\n```js\n{\n  KUBERNETES_SERVICE_PORT_HTTPS: '443',\n  PIPENV_VENV_IN_PROJECT: 'true',\n  KUBERNETES_SERVICE_PORT: '443',\n  BLACK: '\\x1b[30m',\n  RENDER_SERVICE_CONTEXT_ROOT: '/opt/render/project/src',\n  PIPENV_QUIET: 'true',\n  HOSTNAME: 'srv-bosg45n8jd5vhm4jst80-77f6f7f849-v7gcc',\n  IS_PULL_REQUEST: 'false',\n  USER_RUN_COMMAND: 'cd mysite && gunicorn mysite.wsgi:application',\n  PYTHON_VERSION: '3.7.6',\n  NPM_CONFIG_CACHE: '/opt/render/.cache',\n  RENDER_NODE_INSTALLED: 'true',\n  DJANGO_SECRET_KEY: 'REDACTED',\n  ENTER_STANDOUT: '\\x1b[7m',\n  BLUE: '\\x1b[34m',\n  WHITE: '\\x1b[37m',\n  NODE_VERBOSE: 'false',\n  CYAN: '\\x1b[36m',\n  YARN_CACHE_FOLDER: '/opt/render/.cache',\n  RENDER_EXTERNAL_HOSTNAME: 'django-test-9g3f.onrender.com',\n  RENDER_PRE_RUN_COMMAND: 'source /opt/render/project/src/.venv/bin/activate',\n  RENDER_GIT_REPO_SLUG: 'sw-yx/django-quick-start',\n  PWD: '/opt/render/project/src/mysite',\n  RENDER_ROOT: '/opt/render',\n  RENDER: 'true',\n  DEFAULT_NODE_VERSION: '12.13.0',\n  PORT: '10000',\n  NODE_ENV: 'production',\n  PIPENV_YES: 'true',\n  YELLOW: '\\x1b[33m',\n  RESET: '\\x1b(B\\x1b[m',\n  GUNICORN_CMD_ARGS: '--preload --access-logfile - --bind=0.0.0.0:10000',\n  NPM_CONFIG_DEVDIR: '/opt/render/.cache',\n  PIPENV_CACHE_DIR: '/opt/render/.cache',\n  HOME: '/opt/render',\n  RENDER_EXTERNAL_URL: 'https://django-test-9g3f.onrender.com',\n  LANG: 'C.UTF-8',\n  KUBERNETES_PORT_443_TCP: 'tcp://10.131.0.1:443',\n  VIRTUAL_ENV: '/opt/render/project/src/.venv',\n  RENDER_PM_DIR: '/opt/render/project/src',\n  RENDER_SERVICE_TYPE: 'web',\n  VIRTUAL_ENV_DISABLE_PROMPT: 'true',\n  GPG_KEY: '0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D',\n  TMPDIR: '/tmp',\n  FORWARDED_ALLOW_IPS: '*',\n  MAGENTA: '\\x1b[35m',\n  PIP_CACHE_DIR: '/opt/render/.cache',\n  BOLD: '\\x1b[1m',\n  XDG_CACHE_HOME: '/opt/render/.cache',\n  NODES_ROOT: '/opt/render/project/nodes',\n  TERM: 'xterm-256color',\n  RENDER_INTERNAL_IP: '10.104.65.37',\n  NPM_CONFIG_LOGLEVEL: 'error',\n  RENDER_GIT_BRANCH: 'master',\n  RENDER_GIT_COMMIT: 'f9f9d37069642bfd32c762d00c6e4e74ce329a65',\n  VENV_ROOT: '/opt/render/project/src/.venv',\n  RENDER_SERVICE_NAME: 'django-test-9g3f',\n  SHLVL: '0',\n  KUBERNETES_PORT_443_TCP_PROTO: 'tcp',\n  PYTHON_PIP_VERSION: '20.0.2',\n  KUBERNETES_PORT_443_TCP_ADDR: '10.131.0.1',\n  RENDER_ENV: 'python-3',\n  RENDER_INTERNAL_HOSTNAME:\n    'srv-bosg45n8jd5vhm4jst80.usr-bosfgpn8jd5vhm4jsorg.svc.cluster.local',\n  RENDER_DISCOVERY_SERVICE: 'django-test-9g3f-discovery',\n  RENDER_DIR: 'render',\n  WEB_CONCURRENCY: '4',\n  RED: '\\x1b[31m',\n  RENDER_PROJECT_DIR: 'project',\n  PYTHON_GET_PIP_SHA256:\n    'da288fc002d0bb2b90f6fbabc91048c1fa18d567ad067ee713c6e331d3a32b45',\n  EXIT_STANDOUT: '\\x1b[27m',\n  KUBERNETES_SERVICE_HOST: '10.131.0.1',\n  LC_ALL: 'C.UTF-8',\n  KUBERNETES_PORT: 'tcp://10.131.0.1:443',\n  KUBERNETES_PORT_443_TCP_PORT: '443',\n  PYTHON_GET_PIP_URL:\n    'https://github.com/pypa/get-pip/raw/42ad3426cb1ef05863521d7988d5f7fec0c99560/get-pip.py',\n  PATH:\n    '/opt/render/project/src/.venv/bin:/opt/render/project/src/.venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',\n  RENDER_PM_ROOT: '/home/render',\n  GREEN: '\\x1b[32m',\n  RENDER_POD_NAME: 'srv-bosg45n8jd5vhm4jst80-77f6f7f849-v7gcc',\n  NODE_VERSION: '',\n  NODE_MODULES_CACHE: 'true',\n  RENDER_PROJECT_ROOT: '/opt/render/project',\n  DEBIAN_FRONTEND: 'noninteractive',\n  OLDPWD: '/opt/render/project/src',\n  RENDER_SRC_ROOT: '/opt/render/project/src',\n  _: '/opt/render/project/src/.venv/bin/gunicorn',\n  SERVER_SOFTWARE: 'gunicorn/20.0.4',\n  DJANGO_SETTINGS_MODULE: 'mysite.settings'\n}\n```"
    },
    {
      "slug": "documentation-levels",
      "data": {
        "technical": true,
        "title": "Documentation Levels",
        "slug": "documentation-levels",
        "subtitle": "for Open Source Projects",
        "categories": [
          "DX"
        ],
        "date": "2020-01-29T00:00:00.000Z",
        "description": "People can't use your code without docs. People might get overwhelmed with too many docs. How can we match the maturity of docs to the maturity of the project?"
      },
      "content": "\nWe had an [interesting discussion](https://twitter.com/swyx/status/1222365733436346369) yesterday on what makes great docs (in this context we are only talking about OSS docs). We all know docs are important, but we can't necessarily articulate what makes good docs. It's more of a \"I'll know it when I see it\" situation.\n\n- No docs is bad.\n- More docs is good.\n- A pile of disorganized, out of date docs is bad.\n- The best docs are the ones I don't have to read (until just before I need them, or visual affordances make them unnecessary).\n\nCan we do better than this vague intuition?\n\n## Table of Contents\n\n## Matching Maturity\n\nThere are docs extremists - they aren't happy until every last thing is spelled out, and they want every project to have tip top docs quality. The thing is, docs do have a maintenance cost, and docs are expensive (in developer time) to write. Possibly the only thing worse than no docs are out-of-date docs that don't help you figure out if they are out of date. The idea of docs driven design is a popular solution for this - if you know you have perfect discipline - but it doesn't answer the question of what kinds of docs you can offer to help the user.\n\nI think we need to articulate a spectrum of acceptable docs. The maturity of docs should match the maturity of the project.\n\nI'm not a technical writer or documentarian so I don't know if there is existing thinking on this, but this is mine so far.\n\n## Docs Goals\n\nHigh level user centric goals of docs:\n\n- Beginners: get to success as quickly as possible, avoid/recover from mistakes\n- Intermediate: contrast with comparable projects, learn every API/option\n- Experts: keep up with changes and future plans\n- Contributors: How to contribute, how the project is setup\n\n[Quote Dan Abramov](https://twitter.com/dan_abramov/status/1083472984252260352):\n\n> Top two mistakes in documentation:\n>\n> - Assuming people know everything\n> - Assuming people are stupid\n\n## Brainstorming Docs Features\n\nI tried to loosely order this but ofc it is up to interpretation. A lot of this is my brainstorm, plus [Mark's summary of the great Divio blogpost](https://github.com/reduxjs/redux/issues/3609):\n\n- Homepage/Readme:\n  - Set a good first impression\n  - Answer What is this?\n  - Answer What can it do for me?\n  - Answer Where to learn more?\n- Answer questions where the user expects them\n  - **One sentence description for github headline**\n  - One paragraph description with more context\n  - Comparison vs comparable libraries\n  - **Feature list/Project Goals**\n  - **Problem Statement** - what you solve, how the developer/end user is better off with your thing than handwritten. aka Why You Exist\n- **Project Status**\n  - CI badges, version badges\n  - [there is research](https://twitter.com/sback_/status/1047134062597611520) that shows that the kind of maintainer that adds more maintenance badges is correlated with better project quality ([15 is the minimum, okay?](https://twitter.com/swyx/status/1070592812977217536?s=20))\n  - short sentence if the project is inactive or looking for maintainers\n- **Install + Config Instructions**\n  - split by user group\n  - Migration docs from other tools\n  - types/testing notes\n- **Config/API Docs**\n  - what it expects, what outcome to expect\n  - Warn about mistakes just before people are likely to make them\n  - comparison to deprecated APIs for old users to find them\n  - state at which version new APIs were added, or deprecated\n- API **Examples**\n  - can colocate with API docs, but careful not to crowd out the docs\n  - **make sure it is copy- and paste-able**. leave comments for where the user will have to fill in with their own code\n  - Only describe\n  - Code / information oriented\n  - Austere and to the point\n  - Structure around the code\n  - Be consistent and accurate\n- **How-To Guide/Cookbook/Recipes**\n  - copy and paste for common usecases\n  - Answer questions that a beginner might not formulate\n  - Can assume some understanding of the basics\n  - Provide a series of steps\n  - Focus on results\n  - Solve a specific problem\n  - Don't explain concepts\n  - Give some flexibility / ways to adapt\n  - Leave things out - keep it practical, not complete\n  - Name it well\n- Recovering from Failure\n  - **Common Mistakes** (incl pre-emptive warnings - [Eleventy](http://11ty.io/) does a great job of this)\n  - Link to community slack/gitter/twitter\n  - **Known Issues**\n- **Tutorial**\n  - can take the form of **Getting Started**, assume no knowledge\n  - Explain acronyms, jargon\n  - step through APIs\n  - Learn by doing\n  - Get the user started, even if it's not the \"correct\" way\n  - Make sure it works\n  - Ensure they see results immediately\n  - Tutorial must be repeatable\n  - Focus on concrete steps, not abstract concepts\n  - Provide minimum necessary explanation, and focus on only steps they need now\n- **Live Demos**\n  - real use cases\n  - dont force people to clone and install and run just to see your demo\n  - for bundler/compiler/transpiler type projects, offer a REPL\n- **Third Party Plugins/Libraries**\n- User/Maintainer Content\n  - Official Blog\n  - Talks\n  - 3rd Party Blogs\n  - Video Tutorials\n  - Podcasts\n- Meta (as in [MetaLanguage](https://www.youtube.com/watch?v=_0T5OSSzxms))\n  - Origin Story/Naming\n  - Conceptual Understanding\n    - Clarify and broaden coverage of a topic\n    - Provide background and context (\"how X works with Y\", \"why a design decision\", etc)\n    - Discuss alternatives and opinions\n    - Don't give instruction or technical reference\n  - Who Uses Us\n    - Logos\n    - Quotes/endorsements/testimonials\n    - Link to production use\n  - Funding\n  - Migration from previous versions\n  - Versioned docs\n  - Roadmap\n  - Reader-friendly Changelog\n  - Helping Contributors\n    - Maintainer Responsibilities\n    - Contributor Recognition\n    - How it Works under the hood\n    - CONTRIBUTING.md\n    - Easy Local Edits - when someone spots something wrong, or wants to add something, how easy is it?\n- Search\n- Anti-Docs\n  - **Project NonGoals** - things we will never do\n  - **When NOT to use us**\n- \"1 to N\" Docs\n  - Different docs for different audiences (eg JS/Android/iOS)\n  - **i18n for Different languages**\n- Build Docs into the tool\n  - dev-mode warnings\n  - minified production error codes (eg React/[TSDX](https://twitter.com/jaredpalmer/status/1161678891209113601))\n\n## Brevity as a MetaFeature\n\n- Docs don't linearly increase in quality with word count. You cannot hedge by throwing more words at a problem.\n- Try to have your target user persona in mind and write specifically for them, only what they need and what they are about to need.\n- Use links and other UI options to branch out for other user types.\n- Be very conscious of visual hierarchy - don't put irrelevant details, in-depth explanations, jokes and anecdotes where someone is looking to get quick hits.\n- Code examples should be small yet useful - don't dump entire apps that would take more time to customize than it would be to write from scratch.\n\nHere's [Tania Rascia](https://twitter.com/taniarascia/status/1222361724143226881):\n\n> - specific goals, laid out upfront\n> - prerequisites\n> - demo with source code\n> - irrelevant details, in-depth explanations, and anecdotes removed\n> - small! blocks of code\n> - provide a one sentence explanation and example for each term, no more.\n> - run through the example as you make it\n\n## Bottom Line Up Front\n\nI call this the Recipe Rule - Recipe Blogs making you scroll through 10 pages of life stories and long walks on the beach before showing the damn recipe.\n\n[Here's David Khourshid](https://twitter.com/DavidKPiano/status/1046833198146228225):\n\n> The top 3️⃣ things I want to read in READMEs, vs. actual READMEs:\n>\n> - Introduction\n> - License\n> - Philosophy\n> - Features\n> - Compatibility\n> - Contributing\n> - Changelog\n> - Community\n> - Preface\n> - Overview\n> - Installation 1️⃣\n> - Examples 2️⃣\n> - API 3️⃣\n\n## Levels\n\nI also like [Brian Chesky's idea of growing customer experience by hotel analogy](https://mastersofscale.com/brian-chesky-handcrafted/). If a 1 star hotel is just a bed, a 3 star hotel has a gym, 4 star has a pool, and 5 star hotel has dining, spa and concierge, etc. What is a 6 star hotel? 10 star? and so on.\n\nSo let's split up those features above by levels - and pair the levels with where the project is. Every level includes the prior level.\n\n- **Level 0: Basic proof of concept**\n  - _Example audience: you/colleagues/hobbyists_\n  - One sentence description for github headline\n  - README with API docs - goal is to save yourself from looking at source code\n- **Level 1: v0.x**\n  - _Example audience: greenfield early adopters. Ok with missing documentation, they are here for the idea. can contribute code/docs_\n  - One paragraph description with more context - could be a sales pitch but also give an idea of when to use you\n  - Feature list/Project Goals\n  - Install + Config Instructions\n- **Level 2: v1**\n  - _Example audience: brownfield early adopters. Ok with bugs, they have some problem that isnt well addressed. Needs convincing._\n  - Comparison vs comparable libraries\n  - Problem Statement - what you solve, how the developer/end user is better off with your thing than handwritten. aka Why You Exist\n  - Basic Examples\n  - Live Demos\n- **Level 3: vX**\n  - _Example audience: early majority user. Wants ease of use, quick wins. Need to be very reliable. Needs content to sell solution to team_\n  - Project Status badges\n  - Tutorial\n  - Third Party Plugins/Libraries\n  - How-To Guide/Cookbook/Recipes\n  - User/Maintainer Content\n    - Official Blog/Project and Meeting Notes\n    - Talks\n    - 3rd Party Blogs\n    - Video Tutorials\n    - Podcasts\n  - Comprehensive Examples\n  - Examples\n    - [Svelte](https://twitter.com/swyx/status/1220905001926696962?s=20)\n- **Level 4: Production use for multiple years**\n  - _Example audience: expert user. Needs API stability/migration instructions, deep insight on how the project works and how it can solve problems. Needs to customize/adapt for at-scale/weird usecases_\n  - Growing the MetaLanguage\n    - Origin Story/Naming\n    - Who Uses Us\n      - Logos\n      - Quotes/endorsements/testimonials\n      - Link to production use\n    - Funding\n    - Migration docs from previous versions\n    - Roadmap\n    - Reader-friendly Changelog\n  - Anti-Docs\n  - Helping Contributors\n    - Maintainer Responsibilities\n    - Contributor Recognition\n    - How it Works under the hood\n    - CONTRIBUTING.md\n    - Easy Local Edits - when someone spots something wrong, or wants to add something, how easy is it?\n  - Examples\n    - [Eleventy](https://www.11ty.dev/)\n- **Level 5: Community of Production users**\n  - _Example audience: Industry beginner. They may not know any alternatives. You are the entire world to them._\n  - Explain acronyms, jargon\n  - \"1 to N\" Docs\n    - Different docs for different audiences (eg JS/Android/iOS)\n    - Different languages\n  - Examples\n    - [Vue](https://vuejs.org/)\n    - [Django](https://docs.djangoproject.com/en/3.0/) - some [meta thoughts here](https://jacobian.org/2009/nov/10/what-to-write/)\n    - [React](https://reactjs.org)\n- **Level 6: ????**\n  - \"Too Big To Fail\" projects?\n  - What belongs here? how to push the boundaries of docs?\n    - build docs into the tool\n  - Establishing a foundation or ECMA spec\n  - Docs that are Useful for non-users?\n  - [Corporate/professional docs team?](https://twitter.com/TensorNo/status/1222664055011213312)\n\nA more ambitious framing of this might put them into a pyramid \"hierarchy of needs\". However I don't think it is appropriate yet at this stage while I explore this idea.\n\n## Further Reading\n\n- https://github.com/noffle/art-of-readme \"Things I've learned about writing good READMEs.\"\n- https://www.hillelwayne.com/post/learning-a-language/\n- https://www.divio.com/blog/documentation/\n- https://github.com/reduxjs/redux/issues/3609 has a bunch of great links\n- https://vimeo.com/32957711 John Resig on JQuery's OSS community\n- everything in this thread https://twitter.com/adamwathan/status/1257641015835611138\n- https://jacobian.org/2009/nov/10/what-to-write/ Django contributor's thoughts on Django docs\n- https://spec.fm/podcasts/toolsday/318867 Toolsday on Inspirational Doc Sites\n  - Shopify Polaris\n  - Svelte Docs\n  - Stripe API Docs\n  - Cypress Docs\n  - Gatsby\n  - Google Codelabs\n  - Polly\n- Google on Technical Writing https://developers.google.com/tech-writing\n- IA questions https://medium.com/eightshapes-llc/information-architecture-lenses-8a3929a106dd\n- Personas https://articles.uie.com/when-it-comes-to-personas-the-real-value-is-in-the-scenarios/\n- Empathy mapping https://www.nngroup.com/articles/ux-mapping-cheat-sheet/\n  - and journey mapping https://www.nngroup.com/articles/storyboards-visualize-ideas/\n"
    },
    {
      "slug": "ejectable-defaults",
      "data": {
        "technical": true,
        "title": "Ejectable Defaults",
        "slug": "ejectable-defaults",
        "subtitle": "Zero Config First, Full Config Later",
        "categories": [
          "Tech",
          "JavaScript",
          "DX"
        ],
        "date": "2019-10-05T00:00:00.000Z",
        "description": "Borrowing heavily from Gatsby Themes to improve the Sapper developer experience, and a discussion of how Ejectable Defaults fits with the Zero Config movement"
      },
      "content": "\n## Table of Contents\n\n## TL;DR\n\n**Bottom Line Up Front: Ejectable Defaults are Great!**\n\nOne idea I've been playing around a lot with is the idea of **ejectable defaults**. Broadly speaking, this idea leads to a fantastic developer experience for getting build tools going:\n\n- your build tool carries internal default files with it, so that you can run it with zero config. **Zero config is the best possible initial developer experience.**\n- as you grow, you need more control. you can then choose to eject some of these files to modify them and assume full control. **Full config is the best possible subsequent developer experience.**\n\n> ⚠️when I refer to config, I refer to the broad concept of \"wiring things up\" - so not just simple config files, but also other files that may need to be present, adding plugins, and boilerplate code that may need to be written, just for things to work.\n\nI recently brought this idea to [Sapper](https://sapper.svelte.dev). Here's a list of files you need in a [normal Sapper project](https://github.com/sveltejs/sapper-template/) to get it working:\n\n- `rollup.config.js`\n- `src/client.js`\n- `src/server.js`\n- `src/service-worker.js`\n- `src/template.html`\n-  I also have other files I typically want in my `ssg` project.\n\nThis means that to get started you often have to clone from git ([degit](http://npm.im/degit) is a wonderful tool for doing this!), and clutter up the codebase a bit with boilerplate.\n\nHere's the developer experience I'm implementing in `ssg` ([6 minute demo here](https://www.youtube.com/watch?v=JpsxYhkVC7M))\n\n```bash\n$ yarn add ssg\n$ echo \"<h1>hi</h1>\" >> src/routes/index.svelte\n$ yarn ssg dev\n```\n\nAnd you have a Hello world site, starting from a blank directory!\n\n`ssg` just ships with default versions of those files by default. If they don't exist in your project, `ssg` just uses its internal default versions as a fallback. This means that there is nothing more in your repo than exactly what you need to get your project going.\n\nAs you develop, you often want to customize these defaults. It may mean having to go look up how to modify or copy out these files. That's why `ssg` ships a small CLI to do exactly this.\n\n```bash\n$ yarn ssg eject\n✔ Pick files to copy out · template.html, client.js\n✔ A file exists at src/template.html. Are you sure you want to overwrite? (y/N) · false\n✔ A file exists at src/client.js. Are you sure you want to overwrite? (y/N) · true\ncopied /Users/swyx/Work/community/node_modules/ssg/ejectableFiles/client.js to src/client.js\n```\n\nFrom here the user is expected to take full ownership of these files, as though it were a regular Sapper project. This is a very simple and predictable assignment of responsibility between tool and user.\n\nThe rest of this blogpost covers my journey getting to this point.\n\n## Recent Context\n\nOne reason I have been so publicly excited about [Gatsby Themes](https://www.gatsbyjs.org/docs/themes/) is that they represent the next logical step in developer experience and consolidated tooling. \n\nAs you know, [I've Had Thoughts on the state of JS tooling](https://www.swyx.io/writing/js-tooling/). \n\nIn 2016 Dan Abramov and collaborators started a movement for more consolidated tooling in React with [`create-react-app`](https://github.com/facebook/create-react-app). This was hugely influential: \n\n- you can see my talk on this on [Creating Create-React-App](https://www.swyx.io/speaking/creating-cra/)\n- Dan also wrote [The Melting Pot of JavaScript](https://increment.com/development/the-melting-pot-of-javascript/) and [gave a great talk](https://www.youtube.com/watch?v=G39lKaONAlA) on it\n- a bunch of copycats sprung up - Travis' [create-react-library](https://github.com/transitive-bullshit/create-react-library), even [tsdx](https://github.com/jaredpalmer/tsdx/) (which I help maintain) is basically `create-react-app` for TypeScript libraries. \n- This idea even sprung up in libraries, not just build tools. [Apollo Boost](https://github.com/apollographql/apollo-client/tree/master/packages/apollo-boost) helped tame the insane mess of apollo things you need to hook together to say hello world. [Redux Starter Kit](https://github.com/reduxjs/redux-starter-kit) gave a recommended bundle of things that help solve most people's pain points in an opinionated bundle.\n\nThe idea was to bundle a bunch of unopinionated things into single reusable opinionated things. \"Toolboxes\" over boilerplates. [Kent called these tool kits](https://kentcdodds.com/blog/concerning-toolkits). Whatever you call them, they're useful and obviously the right idea.\n\n## Zero Config\n\nSince you're going for opinionatedness, it's tempting to go all the way. The less you have to configure, the less you can mess up, the less you need to test, the less you need to read and document and teach, and the easier you can upgrade if you trust in beneficient maintainers. \n\n`create-react-app` did this, banking on a hard no config requirement. This is a very difficult battle to fight, because needs understandably differ, and you could continue using the thing *if they just added one flag for your thing*. You name it, the CRA maintainers have had to fight it off, from customizing Babel configs to Webpack configs to differential bundling to absolute module resolution...\n\nCertain configs are widespread enough that they \"don't count\" towards a no-config requirement. For example, most everybody (except CRA) allow you to specify a `.babelrc` to tweak your Babel plugins, even if they don't let you directly modify the underlying webpack or rollup config. `tsconfig.json` has also arguably reached this level of ubiquity.\n\nWhat's common among them is that they are all flat static files - they just contain simple values, with no executable code. I'll have a followup blogpost on the benefits of Formats over Functions. (let me know if you Have Thoughts on this)\n\nBut if you wanted more control, CRA forced you into a scary irreversible decision: `eject`. Eject is a bad word. So bad that CRA even surveys you asking you why you felt you had to eject.\n\nThe problem is, everyone eventually wants more control. I won't bother elaborating, I trust you get this.\n\n## Optional Config\n\n[Next.js does this very well](https://nextjs.org/docs#custom-configuration). You can go very far with Next.js not even knowing that you can configure it with a `next.config.js` file. This is because Next.js has sensible defaults that offer a great out of the box experience. Likewise for Gatsby, although I feel configs are basically required in Gatsby projects due to everybody using the plugin system.\n\nBoth of these projects hinge their optional configs on a single file. (I only comment on these because I am more familiar with them, I'm sure there are plenty more examples I have no idea about) This makes it easy to find and document, but can offer challenges for certain needs. \n\nMost often this is felt in how they allow users to modify the default webpack configs. Asking users to modify your default webpack config often means leaking implementation detail, requiring a bunch of docs (primarily, knowing what's already there without looking at it). I personally have never felt at ease doing it. But again, allowing it is incredibly valuable.\n\n> Aside: some people like to sidestep build tools altogether and ask users to bring their own build chains. This reduces the developer experience but improves maintainability and ensures you don't end up just getting a bunch of issues of people asking you how to debug their webpack config. However, a big value add of tools like CRA, Next.js, and Gatsby, is allowing developers to be productive without being webpack experts. You lose a massive audience and value add by letting go of this one thing. So the jury is still out on whether it is worth it.\n\nThis concept applies beyond build tool configs though. Many projects want to help their users add functionality quickly and easily, even though they could code it up themselves, it might take a lot of work to get it right and maintain it, so eventually a plugin system is born. These bring with them microcosms of the design issues their parent tools face, sometimes even necessitating [plugins for plugins](https://www.gatsbyjs.org/packages/gatsby-remark-images/?=remark#how-to-use) and [presets for groups of plugins](https://babeljs.io/docs/en/presets) because why not.\n\nAll of this is fine and good and kinda sorta works but I can't quite shake the feeling that it could be better...\n\n## Shadowing and Ejecting\n\nGatsby Themes took this problem solving to the next level, which is why I have been a very enthusiastic fan of the project. \n\n> Aside: for background on Gatsby themes, check the [docs](https://www.gatsbyjs.org/docs/themes/), try themes in the [Theme Jam](https://themejam.gatsbyjs.org), check out some posts on [Chris Bisardi](https://www.christopherbiscardi.com/post) and [John Otander](https://johno.com/writing)'s blogs, and in particular [Jason's Gatsby Themes livestream](https://www.gatsbyjs.org/blog/2019-02-11-gatsby-themes-livestream-and-example/)\n\nGatsby Themes are plugins that ship their own components. These offer the flexibility of configuring plugins with the developer experience of minimal config. With themes, you can basically `npm install` a whole site, including UI. This extends the idea of \"toolkits\" or \"starter kits\" to pretty much everything you can possibly want or need in a site. It is a fantastic idea.\n\nHowever it has some pain points. It's relatively easy to say that themes should be infinitely inheritable, so you can ship themes in themes in themes, and build up a full site that way. It's much harder to actually write components and API boundaries that compose well like this, especially with Shadowing involved (explained below). In practice, I have not found any use to having more than 1 theme layer, for now (I'm sure this will change as we discover what works).\n\nThe other pain point comes with actually taking advantage of the shadowing. Theme components can be Shadowed ([What is Component Shadowing?](https://www.christopherbiscardi.com/post/component-shadowing-in-gatsby-child-themes/)) with a [Guessable API](https://johno.com/guessable). However you had to go look up how to shadow the things by reading docs or digging inside `node_modules`. \n\nMore to document, more to remember. Not great!\n\nSo Chris spun up a [wonderful little CLI](https://github.com/ChristopherBiscardi/gatsby-theme) to `eject` these components for the purposes of shadowing ([he livestreamed his process working on it, check it out!](https://www.youtube.com/channel/UCiSIL42pQRpc-8JNiYDFyzQ/search?query=cli)). So with this thing you can run `gatsby-theme eject` and see a list of things you can eject, and it pops them out for you to modify to your heart's content. (The CLI does some neat transforms to sort out relative imports for you).\n\nSo the combination of shadowable components and the ability to eject them for further work solves this seemingly intractable tradeoff between wanting to offer a low config developer experience, yet a progressive and reversible upgrade for users who feel they might need more power.\n\n## Shadowing without Webpack\n\nChris implemented [Component Shadowing as a webpack plugin](https://www.christopherbiscardi.com/post/using-gatsby-component-shadowing-without-gatsby/) you can use without using Gatsby, but what if you want to extend this concept outside of webpack?\n\nIn Sapper's core code, it attempts to read this required file and throws if it is not found:\n\n```ts\nimport * as fs from 'fs';\n\nexport default function read_template(dir: string) {\n\ttry {\n\t\treturn fs.readFileSync(`${dir}/template.html`, 'utf-8');\n\t} catch (err) {\n\t\tif (fs.existsSync(`app/template.html`)) {\n\t\t\tthrow new Error(`As of Sapper 0.21, the default folder structure has been changed:\n  app/    --> src/\n  routes/ --> src/routes/\n  assets/ --> static/`);\n\t\t}\n\n\t\tthrow err;\n\t}\n}\n```\n\nSo I added a [default `runtime/internal/template.html`](https://github.com/sw-yx/sapper/blob/forkedSapper/runtime/internal/template.html) and replaced the throw with the fallback:\n\n```ts\nimport * as fs from 'fs';\nimport * as path from 'path'\nexport default function read_template(dir: string) {\n\ttry {\n\t\treturn fs.readFileSync(`${dir}/template.html`, 'utf-8');\n\t} catch (err) {\n\t\tif (fs.existsSync(`app/template.html`)) {\n\t\t\tthrow new Error(`As of Sapper 0.21, the default folder structure has been changed:\n  app/    --> src/\n  routes/ --> src/routes/\n  assets/ --> static/`);\n\t\t}\n\t\t// use fallback template\n\t\tconst fallbackPath = path.resolve(__dirname, '../runtime/internal/template.html')\n\t\treturn fs.readFileSync(fallbackPath, 'utf-8')\n\t}\n}\n```\n\nOnce I could do that, I was pretty hooked. I went through and added fallback defaults for [all of the required files](https://github.com/sw-yx/sapper/tree/forkedSapper/runtime/internal). But I still had one hard dependency... `rollup.config.js`! The big Kahuna.\n\nReading this was [implemented inside Sapper as a simple `load_config`](https://github.com/sveltejs/sapper/blob/master/src/core/create_compilers/RollupCompiler.ts#L140):\n\n```ts\n\tstatic async load_config(cwd: string) {\n\t\tif (!rollup) rollup = relative('rollup', cwd);\n    const input = path.resolve(cwd, 'rollup.config.js');\n    // ....\n  }\n```\n\nSo I did the simplest possible thing I could think of:\n\n```ts\n\tstatic async load_config(cwd: string) {\n\t\tif (!rollup) rollup = relative('rollup', cwd);\n    let input = path.resolve(cwd, 'rollup.config.js');\n    if (!require('fs').existsSync(input)) {\n      input = path.resolve(__dirname, '../runtime/internal/fallback.rollup.js') // opted for a different name so it is easier to find\n    }\n    // ...\n  }\n```\n\nIf I tried the same approach as the other subjects we already discussed, I would have to take on rollup maintenance burden and offer ways to modify it. I was keen on finding another way. So this is what I ended up with - to be clear I didnt think this through very hard, but it seems an interesting solution.\n\nI then implemented [the `eject` code](https://github.com/sw-yx/ssg/blob/d253f841d45694b128cc0091084457f8bb1f10ef/packages/ssg/src/eject.ts). It wasn't hard at all, given my prior experience. You can see the code at that link, but here are some implementation notes if you're doing this:\n\n- I had to ship the ejectable files separately because of technicalities with project governance but arguably the files you eject should be the same files you use in the fallback\n- i use Jon Schlinkert's [enquirer](https://github.com/enquirer/enquirer) as best in class CLI UI library. Usual caveats apply with [anything in the Schlinkerverse](https://www.reddit.com/r/webdev/comments/8kq21d/new_to_web_development_is_it_normal_to_have_so/).\n- knowing the difference between `__dirname` and `process.cwd` is very helpful\n- copying files is a potentially destructive action. Prompt for overwrite and also preserve the old file:\n\n```ts\nif (fs.existsSync(destinationPath)) {\n  const prompt = new Confirm({\n    name: 'question',\n    message: `A file exists at ${chalk.cyan(destinationPath)}. Are you sure you want to overwrite? (y/N)`\n  });\n  const answer = await prompt.run()\n  if (!answer) return // dont override, terminate early\n  try {\n    fs.renameSync( destinationPath, destinationPath + '.old'); // preserve old file\n  } catch (err) {\n    console.log('renaming failed. copying and overwriting instead.')\n    fs.copyFileSync( destinationPath, destinationPath + '.copy');\n  }\n}\nfs.copyFileSync(sourceFile, destinationPath);\n```\n\nSo that's what i've done so far. If you watch the demo video it has the developer experience I have in mind and described at the start of this article.\n\n## [6 Minute Demo Video](https://www.youtube.com/watch?v=JpsxYhkVC7M)\n\n## Appendix\n\nI'm quite interested in how various tools allow their usess to modify internal configs. Here are some notes I took.\n\nNext.js offers helpful utilities but also relies on nonstandard APIs:\n\n```js\n// next.config.js\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {\n    // buildId - String: the build id used as a unique identifier between builds\n    // dev - Boolean: shows if the compilation is done in development mode\n    // isServer - Boolean: shows if the resulting configuration will be used for server side (true), or client side compilation (false)\n    // defaultLoaders - Object: Holds loader objects Next.js uses internally, so that you can use them in custom configuration\n\n    // Example using webpack option\n    config.plugins.push(new webpack.IgnorePlugin(/\\/__tests__\\//))\n    return config\n  },\n  webpackDevMiddleware: config => {\n    // Perform customizations to webpack dev middleware config\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\nWhereas Gatsby somehow throws Redux actions into the mix:\n\n```js\n// gatsby-node.js\nexports.onCreateWebpackConfig = ({\n  stage,\n  rules,\n  loaders,\n  plugins,\n  actions,\n}) => {\n  actions.setWebpackConfig({\n    module: {\n      rules: [\n        {\n          test: /\\.less$/,\n          use: [\n            // We don't need to add the matching ExtractText plugin\n            // because gatsby already includes it and makes sure its only\n            // run at the appropriate stages, e.g. not in development\n            loaders.miniCssExtract(),\n            loaders.css({ importLoaders: 1 }),\n            // the postcss loader comes with some nice defaults\n            // including autoprefixer for our configured browsers\n            loaders.postcss(),\n            `less-loader`,\n          ],\n        },\n      ],\n    },\n    plugins: [\n      plugins.define({\n        __DEVELOPMENT__: stage === `develop` || stage === `develop-html`,\n      }),\n    ],\n  })\n}\n```\n\nbut offer some niceties like ` actions.replaceWebpackConfig` if you need it.\n\nReact-Static uses [a plugin with many many lifecycles](https://github.com/react-static/react-static/blob/master/docs/plugins/node-api.md#webpack-functionfunction) to modify its config:\n\n\n```js\n// node.api.js\nexport default pluginOptions => ({\n  // alll the lifecycles!\n  afterGetConfig,\n  beforePrepareBrowserPlugins,\n  afterPrepareBrowserPlugins,\n  beforePrepareRoutes,\n  normalizeRoute,\n  afterPrepareRoutes,\n  afterBundle,\n  afterDevServerStart,\n  beforeRenderToElement,\n  beforeRenderToHtml,\n  htmlProps,\n  beforeHtmlToDocument,\n  beforeDocumentToFile,\n  afterExport,\n  headElements,\n  // webpack modification\n  webpack: (config, { defaultLoaders }) => {\n    config.module.rules = [{\n      oneOf: [\n        defaultLoaders.jsLoader,\n        defaultLoaders.jsLoaderExt,\n        {\n          // Use this special loader\n          // instead of the cssLoader\n        }\n        defaultLoaders.fileLoader,\n      ]\n    }]\n    return config\n  }\n})\n```"
    },
    {
      "slug": "failure-hsl-palette-theming",
      "data": {
        "technical": true,
        "title": "Failing to use HSL to do Palette Theming",
        "slug": "failure-hsl-palette-theming",
        "categories": [
          "CSS"
        ],
        "date": "2020-01-28T00:00:00.000Z",
        "description": "Learning from Slack and Refactoring UI to create color palettes, then using HSL colors to do customizable theming with CSS variables"
      },
      "content": "\nThis isn't a typical blogpost, because it reflects a failure to ship a feature I wanted, but I am noting down what I learned through this. I think I will come back and pick it back up again.\n\n> [The top feedback I got from this post](https://twitter.com/swyx/status/1222307420396875776) is that instead of HSL, I should try the [HSLuv](https://hsluv.org) or [CIELab/Lch](https://www.colourphil.co.uk/lab_lch_colour_space.shtml) color space. I will try that in future but for now sticking to RGB.\n\n## Motivation - add Customizable Palette Theming\n\nI previously mainly lifted my old blog theme from [Max Boeck](https://github.com/maxboeck/mxb/blob/981be67c2167928782fdf979cec43f86db02f539/src/assets/styles/base/_properties.scss): \n\n```css\nhtml {\n  --bg-color: #1d1f21;\n  --bg-color-semitransparent: rgba(33, 33, 33, 0.75);\n  --bg-color-secondary: #252526;\n  --text-color: rgb(220, 220, 220);\n  --text-color-secondary: #818a91;\n  --link-color: #2cb67d;\n  --border-color: #2d2d2d;\n  --brand-color-primary: #ff335f;\n  --brand-color-primary-offset: #ff1447;\n  --brand-color-secondary: #43a9a3;\n  --hover-color-primary: #6d1f21;\n  --hover-color-secondary: #1d1f61;\n}\n```\n\nHowever I realized I wasn't using this color system very well (it's messy and hacky) and also wanted it to be themable. So I started by adding a little theme editor that let you set the css variables. However this editor wasn't very consciously designed, and also didn't help generate the full range of colors I would need (I didn't want to add a picker for every little thing). \n\nSo to do this right, I needed to start from a small color system, and then darken/lighten accordingly.  This is most typically done in SASS with its `darken()` function, but I want to do this dynamically, so I don't have that option. \n\nTo be clear, here were my requirements:\n\n- user should be able to pick a preset theme for this site (doable statically)\n- user should be able to pick (and eventually persist) colors to make a custom theme for this site (must be dynamic)\n\nI was about to do this in JavaScript, when [my colleague Marcus](https://twitter.com/mraerino?lang=en) suggested using using HSL colors with CSS variables! so that's what this experiment is going to do.\n\n## Studying Slack \n\nSlack is a great example of a successful custom palette theming app at scale. So to start with I studied what they offer.\n\nColors go from: `Column BG, Menu BG Hover, ActiveItem, ActiveItemText, Hover Item, Text Color, Active Presence, MentionBadge`\n\n- Light\n  - Aubergine: `#3F0E40,#350d36,#1164A3,#FFFFFF,#350D36,#FFFFFF,#2BAC76,#CD2553`\n  - Aubergine Classic: `#4D394B,#3E313C,#4C9689,#FFFFFF,#3E313C,#FFFFFF,#38978D,#EB4D5C`\n  - Hoth: `#F8F8FA,#F8F8FA,#2D9EE0,#FFFFFF,#FFFFFF,#383F45,#60D156,#DC5960`\n  - Monument: `#0D7E83,#076570,#F79F66,#FFFFFF,#D37C71,#FFFFFF,#F79F66,#F15340`\n  - Choco Mint: `#544538,#42362B,#5DB09D,#FFFFFF,#4A3C30,#FFFFFF,#FFFFFF,#5DB09D`\n  - Ochin: `#303E4D,#2C3849,#6698C8,#FFFFFF,#4A5664,#FFFFFF,#94E864,#78AF8F`\n  - Work Hard: `#4D5250,#444A47,#D39B46,#FFFFFF,#434745,#FFFFFF,#99D04A,#DB6668`\n  - Nocturne: `#1A1D21,#000000,#0576B9,#FFFFFF,#000000,#FFFFFF,#39E500,#CC4400`\n  - Tritanopia: `#4F2F4C,#452842,#8C5888,#FFFFFF,#1C0B1A,#FFFFFF,#00FFB7,#DE4C0D`\n  - Protanopia: `#4F2F4C,#452842,#8C5888,#FFFFFF,#1C0B1A,#FFFFFF,#D0FF00,#889100`\n- Dark\n  - Aubergine: `#19171D,#121016,#1164A3,#FFFFFF,#27242C,#D1D2D3,#2BAC76,#CD2553`\n  - Aubergine Classic: `#19171D,#121016,#4C9689,#FFFFFF,#27242C,#D1D2D3,#38978D,#EB4D5C`\n  - Dagobah: `#333333,#3F3F3F,#2D9EE0,#FFFFFF,#3F3F3F,#F8F8FA,#60D156,#DC5960`\n  - Monument: `#173438,#152A2D,#EBA270,#FFFFFF,#C78074,#FFFFFF,#EBA270,#F15340`\n  - Choco Mint: `#212121,#353330,#5DB09D,#FFFFFF,#353330,#FFFFFF,#FFFFFF,#5DB09D`\n  - Ochin: `#1D2229,#0B161E,#537AA6,#FFFFFF,#313843,#FFFFFF,#94E864,#78AF8F`\n  - Work Hard: `#222629,#121518,#D39B46,#FFFFFF,#2C3136,#FFFFFF,#99D04A,#DB6668`\n  - Nocturne: `#1A1D21,#000000,#0576B9,#FFFFFF,#000000,#FFFFFF,#39E500,#CC4400`\n  - Tritanopia: `#19171D,#121016,#5B415B,#FFFFFF,#27242C,#D1D2D3,#74FABC,#CE5628`\n  - Protanopia: `#19171D,#121016,#5B415B,#FFFFFF,#27242C,#D1D2D3,#DAFC51,#8A902C`\n\nSo the main way they seem to think about this is that the customizable colors are mostly menu related:\n\n- 3 Darker colors: backgrounds (1 bg, 1 hovered bg - not very impt, 1 hovered item)\n- 5 Lighter colors: \n  - text color for items\n  - 2 highlights (presence, and mention)\n  - 2 active item (active item bg, and active item bg text)\n\nThey also shared [great notes on implementing Dark mode](https://slack.engineering/building-dark-mode-on-desktop-811508b5d15f). The main thing to note is that you don't simply flip every color. Slack has preset values for primary and inverted foreground/background based on mode.\n\nRegardless of mode, Slack always uses blue for links (sapphire blue in light mode, sky blue in dark mode, with hover versions), highlight accents, secondary highlights for search results and keywords. This is not customizable.\n\n## Refactoring UI\n\nThe next source I turned to was Refactoring UI: https://refactoringui.com/previews/building-your-color-palette/\n\nThinking through this, a minimal color palette for an app includes:\n\n- a primary color\n- a grey/neutral color\n- a link color (maybe this is a highlight color)\n- a text color (maybe this is a neutral color)\n- accent colors:\n  - highlight\n  - danger\n  - warning\n  - success\n\nSo that's 8 basic colors for an app. You might add a secondary color and other accents.\n\n## Takeaways\n\nFor a site, we can probably do away with some accent colors and get it down to 4 colors:\n\n- a highlight color\n- a background color\n- a neutral text color\n- a link color\n\n## HSL Color Palette\n\nWe can place hues in CSS Variables:\n\n```css\nhtml {\n  --highlight-hue: 100;\n  --background-hue: 249;\n  --text-hue: 0;\n  --link-hue: 148;\n}\n```\n\nAnd then generate the range of colors:\n\n```css\nhtml {\n  --highlight-1: hsl(var(--highlight-hue), 100%, 20%);\n  --highlight-3: hsl(var(--highlight-hue), 100%, 40%);\n  --highlight-5: hsl(var(--highlight-hue), 100%, 60%);\n  --highlight-9: hsl(var(--highlight-hue), 100%, 80%);\n  --highlight-color: var(--highlight-5);\n  --background-1: hsl(var(--background-hue), 100%, 20%);\n  --background-3: hsl(var(--background-hue), 100%, 40%);\n  --background-5: hsl(var(--background-hue), 100%, 60%);\n  --background-9: hsl(var(--background-hue), 100%, 80%);\n  --background-color: var(--background-5);\n  --text-1: hsl(var(--text-hue), 100%, 20%);\n  --text-3: hsl(var(--text-hue), 100%, 40%);\n  --text-5: hsl(var(--text-hue), 100%, 60%);\n  --text-9: hsl(var(--text-hue), 100%, 80%);\n  --text-color: var(--text-5);\n  --link-1: hsl(var(--link-hue), 100%, 20%);\n  --link-3: hsl(var(--link-hue), 100%, 40%);\n  --link-5: hsl(var(--link-hue), 100%, 60%);\n  --link-9: hsl(var(--link-hue), 100%, 80%);\n  --link-color: var(--link-5);\n}\n```\n\nand now we can reference these all over the site. Users can set the top level css variables to their heart's content, and I can provide some preset themes using the same system.\n\n## Failure to Forsee - HSL isn't the right tool\n\nI got this far and wrote a bunch of code without realizing that I can't just theme things with hue. You can try the color switcher now (in the menu) - you can tweak hues, sure, but you also need to adjust saturation and lightness dynamically and before long you're looking for a HSL color picker and wondering why exactly you rewrote things from RGB to HSL.\n\nI'm not really sure how we should play off saturation and lightness yet, but I'm vaguely aware that there is some color balance thing that needs to be done. I know that [Erik Kennedy has strong opinions here](https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html) but I dont have time to adapt it yet.\n\n## My plan going forward\n\nI am ready to call the HSL palette theming attempt a failure. I wanted to achieve a small set of user specified colors that I could then use to theme the rest of the site. I made two mistakes:\n\n- Not realizing that tweaking colors to theme a site also means adjusting S and L\n- Not realizing that I don't really use all the generated color gradients I would get from using HSL\n\nI feel pretty dumb about this but that's what happened today.\n\n\n## Resources Referenced\n\n- CSS Tricks: HSL is great for programmatic color control https://css-tricks.com/hsl-hsla-is-great-for-programmatic-color-control/\n- ana tudor codepen: css variables calc inside hsl to generate palettes codepen tuldl - support inside ie/firefox is no bueno\n- https://darkmodedesign.xyz/\n- https://refactoringui.com/previews/building-your-color-palette/\n- https://slack.engineering/building-dark-mode-on-desktop-811508b5d15f\n- http://hslpicker.com/\n- https://medium.com/@marcintreder/design-system-sprint-2-one-color-palette-to-rule-them-all-d0114ed1f659"
    },
    {
      "slug": "gatsby-static-dynamic",
      "data": {
        "technical": true,
        "title": "Turning the Static Dynamic",
        "subtitle": "Gatsby + Netlify Functions + Netlify Identity",
        "date": "2018-12-26T00:00:00.000Z",
        "slug": "gatsby-static-dynamic",
        "categories": [
          "Tech",
          "Netlify",
          "Gatsby"
        ],
        "description": "Gatsby is great for not only static sites but also traditional web applications. You can add authentication and serverless functionality and get up and running incredibly quickly with Netlify - here's how."
      },
      "content": "\n[In a recent Reactiflux interview](https://www.reactiflux.com/transcripts/gatsby-team/), the Gatsby team was asked this question:\n\n> Q: What is one thing that Gatsby is capable of doing that might surprise some people? — ctlee\n\n> A: Gatsby can be used to build fully dynamic sites, which surprises some people because of it’s label as a “static site generator”. It’s fully equipped to be a powerful alternative to create-react-app and other similar solutions with the addition of easy pre-rendering and perf baked in. — biscarch\n\nEven though Dustin [recently wrote about Gatsby for Apps](https://gatsbyjs.org/blog/2018-11-07-gatsby-for-apps/) and open sourced his [Gatsby Mail](https://gatsby-mail.netlify.com/) demo, I do still find people constantly having to explain that Gatsby is \"not just for sites\".\n\nToday I'd like to show you how you can incrementally add functionality to a Gatsby static site with Netlify Functions, and then add authentication with Netlify Identity to begin a proper Gatsby app.\n\n## Static-Dynamic is a spectrum\n\nWhy would you use something like Gatsby over Jekyll or Hugo or one of the [hundreds of Static Site Generators](https://www.staticgen.com/) out there? [There are many reasons](https://gatsbyjs.org/blog/2018-2-27-why-i-upgraded-my-website-to-gatsbyjs-from-jekyll/), but one of the unique selling points is how Gatsby helps you build [\"Static Progressive Web Apps\"](https://gatsbyjs.org/docs/progressive-web-app/#progressive-web-app) with React.\n\n[Gatsby's ability to rehydrate](https://gatsbyjs.org/docs/production-app/#dom-hydration) (what a delicious word!) the DOM means you can do incredibly dynamic things with JavaScript and React that would be much harder with legacy SSG's.\n\nLet's say you have a typical static Gatsby site, like [gatsby-starter-default](https://gatsbyjs.org/starters/gatsby-starter-default). You can `npm run build` it, and it spits out a bunch of HTML files. Great! I can host that for free!\n\nNow your client comes to you and asks you to add some custom logic that needs to be executed on the server:\n\n- Maybe you have third party API secrets you don't want to expose to your user.\n- Maybe you need [a serverside proxy to get around CORS issues](https://developer.yahoo.com/javascript/howto-proxy.html?guccounter=1).\n- Maybe you need to ping a database to check your inventory.\n\n**Oh no! Now you have to rewrite everything and move to a Digital Ocean droplet!**\n\nI'm kidding. No, you don't have to rewrite everything.\n\nThe beauty of serverless functions is that it is incrementally adoptable - **your site grows with your needs** - and with Gatsby you can rerender entire sections of your site based on live API data. Of course, the more you do this, the more resource intensive (in terms of bandwidth and computation) it can be, so there is a performance tradeoff. **Your site should be as dynamic as you need it to be, but no more.** Gatsby is perfect for this.\n\n## 5 Steps to add Netlify Functions to Gatsby\n\nNetlify Functions are a great low configuration solution for adding serverless functionality to your Gatsby site. You get 125,000 free calls a month - that's a function call every 20 seconds every day of the week, month, and year - and you can emulate them in local development with [`netlify-lambda`](https://github.com/netlify/netlify-lambda).\n\nLet's walk through the steps:\n\n1. **Install dependencies**: `npm install -D http-proxy-middleware netlify-lambda npm-run-all`\n2. **Run function emulation alongside Gatsby**: replace your `scripts` in `package.json`:\n\n```js\n  \"scripts\": {\n    \"develop\": \"gatsby develop\",\n    \"start\": \"run-p start:**\",\n    \"start:app\": \"npm run develop\",\n    \"start:lambda\": \"netlify-lambda serve src/lambda\",\n    \"build\": \"run-p build:**\",\n    \"build:app\": \"gatsby build\",\n    \"build:lambda\": \"netlify-lambda build src/lambda\",\n  },\n```\n\n3. **Configure your Netlify build**: When serving your site on Netlify, `netlify-lambda` will now build each JavaScript/TypeScript file in your `src/lambda` folder as a standalone Netlify function (with a path corresponding to the filename). Make sure you have a Functions path in a `netlify.toml` file at root of your repository:\n\n```toml\n[build]\n  Command = \"npm run build\"\n  Functions = \"lambda\"\n  Publish = \"public\"\n```\n\nFor more info or configuration options (e.g. in different branches and build environments), check [the Netlify.toml reference](https://www.netlify.com/docs/netlify-toml-reference/).\n\n4. **Proxy the emulated functions for local development**: Head to `gatsby-config.js` and add this to your `module.exports`:\n\n```jsx\nvar proxy = require('http-proxy-middleware')\n\nmodule.exports = {\n  // for avoiding CORS while developing Netlify Functions locally\n  // read more: https://www.gatsbyjs.org/docs/api-proxy/#advanced-proxying\n  developMiddleware: app => {\n    app.use(\n      '/.netlify/functions/',\n      proxy({\n        target: 'http://localhost:9000',\n        pathRewrite: {\n          '/.netlify/functions/': ''\n        }\n      })\n    )\n  }\n  // ...\n}\n```\n\n5. **Write your functions**: Make a `src/lambda` folder and write as many functions as you need. The only requirement is that each function must export a `handler`, although `netlify-lambda` helps you use webpack to bundle modules or you can [zip the functions yourself](https://www.netlify.com/blog/2018/09/14/forms-and-functions/#optional-zip-the-function-to-manage-dependencies). For example you can write `src/lambda/hello.js`:\n\n```js\n// For more info, check https://www.netlify.com/docs/functions/#javascript-lambda-functions\nexport function handler(event, context, callback) {\n  console.log('queryStringParameters', event.queryStringParameters)\n  callback(null, {\n    // return null to show no errors\n    statusCode: 200, // http status code\n    body: JSON.stringify({\n      msg: 'Hello, World! ' + Math.round(Math.random() * 10)\n    })\n  })\n}\n```\n\nNow you are ready to access this API from anywhere in your Gatsby app! For example, in any event handler or lifecycle method, insert:\n\n```js\nfetch('/.netlify/functions/hello')\n  .then(response => response.json())\n  .then(console.log)\n```\n\nand watch \"Hello World!\" pop up in your console. (I added a random number as well to show the endpoint is dynamic) If you are new to React, I highly recommend [reading through the React docs](https://reactjs.org/docs/handling-events.html) to understand where and how to insert event handlers so you can, for example, [respond to a button click](https://reactjs.org/docs/handling-events.html).\n\nThe local proxying we are doing is only for local emulation, eg it is actually running from `http://localhost:9000/hello` despite you hitting `/.netlify/functions/hello` in your Gatsby app. When you deploy your site to Netlify (either by [hooking your site up through Git through our Web UI](http://app.netlify.com/), or our l33t new [CLI](https://www.netlify.com/docs/cli/)), that falls away, and your functions -are- hosted on the same URL and \"just works\". Pretty neat!\n\n## That's cool, but its not an app\n\nSo, yes, your site can now be more dynamic than any static site. It can hit any database or API. It runs rings around CORS (by the way, you can also use [Netlify Redirects](https://www.netlify.com/docs/redirects/) for that). But its not an _app_ app. Yet!\n\nThe key thing about web apps (and, let's face it, the key thing users really pay for) is they all have some concept of `user`, and that brings with it all manner of complication from security to state management to [role-based access control](https://www.netlify.com/docs/visitor-access-control/#role-based-access-controls-with-jwt-tokens). Entire routes need to be guarded by authentication, and sensitive content shielded from Gatsby's static generation. Sometimes there are things you -don't- want Google's spiders to see!\n\nIt's a different tier of concern, which makes it hard to write about in the same article as a typical Gatsby tutorial. But we're here to make apps, so let's bring it on!\n\n## 5 Steps to add Netlify Identity and Authenticated Pages to Gatsby\n\n1. **Enable Netlify Identity**: Netlify Identity doesn't come enabled by default. You'll have to head to your site admin (eg `https://app.netlify.com/sites/YOUR_AWESOME_SITE/identity`) to turn it on. [Read the docs](https://www.netlify.com/docs/identity/) for further info on what you can do, for example add Facebook or Google social sign-on!\n2. **Install dependencies**: `npm install netlify-identity-widget gatsby-plugin-create-client-paths`\n3. **Configure Gatsby**: for dynamic-ness!\n\n```jsx\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-create-client-paths`,\n      options: { prefixes: [`/app/*`] }\n    }\n    // ...\n  ]\n  // ... (including what you also wrote earlier)\n}\n```\n\n4. **Write an authentication service**: `netlify-identity-widget` is a framework-agnostic overlay that ships with a nice signup/login UI. This gets you up and running the fastest, however if you need a smaller solution you may want to use the underlying [gotrue-js](https://github.com/netlify/gotrue-js), or [react-netlify-identity](https://github.com/sw-yx/react-netlify-identity) for a React Hooks solution.\n\nHere's a usable example that stores your user in local storage:\n\n```jsx\nimport netlifyIdentity from 'netlify-identity-widget'\n\nexport const isBrowser = () => typeof window !== 'undefined'\nexport const initAuth = () => {\n  if (isBrowser()) {\n    window.netlifyIdentity = netlifyIdentity\n    // You must run this once before trying to interact with the widget\n    netlifyIdentity.init()\n  }\n}\nexport const getUser = () =>\n  isBrowser() && window.localStorage.getItem('netlifyUser')\n    ? JSON.parse(window.localStorage.getItem('netlifyUser'))\n    : {}\n\nconst setUser = user =>\n  window.localStorage.setItem('netlifyUser', JSON.stringify(user))\n\nexport const handleLogin = callback => {\n  if (isLoggedIn()) {\n    callback(getUser())\n  } else {\n    netlifyIdentity.open()\n    netlifyIdentity.on('login', user => {\n      setUser(user)\n      callback(user)\n    })\n  }\n}\n\nexport const isLoggedIn = () => {\n  if (!isBrowser()) return false\n  const user = netlifyIdentity.currentUser()\n  return !!user\n}\n\nexport const logout = callback => {\n  netlifyIdentity.logout()\n  netlifyIdentity.on('logout', () => {\n    setUser({})\n    callback()\n  })\n}\n```\n\n5. **Write your app**: Now, any sub paths in `src/pages/app` will be exempt from Gatsby static generation. To keep the dividing line between app and site crystal clear, I like to have all my dynamic Gatsby code in a dedicated `app` folder. This means you can use `@reach/router` with `netlify-identity-widget` to write a standard dynamic React app. Here's some sample code to give you an idea of how to hook them up:\n\n```jsx\nimport React from 'react'\nimport { Router } from '@reach/router' // comes with gatsby v2\nimport Layout from '../components/layout'\nimport NavBar from './components/NavBar'\nimport Profile from './profile'\nimport Main from './main' // NOT SHOWN\nimport PrivateRoute from './components/PrivateRoute'\nimport Login from './login'\n\n// remember everything in /app/* is dynamic now!\nconst App = () => {\n  return (\n    <Layout>\n      <NavBar />\n      <Router>\n        <PrivateRoute path=\"/app/profile\" component={Profile} />\n        <PublicRoute path=\"/app\">\n          <PrivateRoute path=\"/\" component={Main} />\n          <Login path=\"/login\" />\n        </PublicRoute>\n      </Router>\n    </Layout>\n  )\n}\nfunction PublicRoute(props) {\n  return <div>{props.children}</div>\n}\n\nexport default App\n```\n\n```jsx\nimport React from 'react'\nimport { Link, navigate } from 'gatsby'\nimport { getUser, isLoggedIn, logout } from '../services/auth'\n\nexport default () => {\n  const content = { message: '', login: true }\n  const user = getUser()\n  if (isLoggedIn()) {\n    content.message = `Hello, ${user.user_metadata &&\n      user.user_metadata.full_name}`\n  } else {\n    content.message = 'You are not logged in'\n  }\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flex: '1',\n        justifyContent: 'space-between',\n        borderBottom: '1px solid #d1c1e0',\n        backgroundColor: 'aliceblue'\n      }}\n    >\n      <span>{content.message}</span>\n\n      <nav>\n        <span>Navigate the app: </span>\n        <Link to=\"/app/\">Main</Link>\n        {` `}\n        <Link to=\"/app/profile\">Profile</Link>\n        {` `}\n        {isLoggedIn() ? (\n          <a\n            href=\"/\"\n            onClick={event => {\n              event.preventDefault()\n              logout(() => navigate(`/app/login`))\n            }}\n          >\n            Logout\n          </a>\n        ) : (\n          <Link to=\"/app/login\">Login</Link>\n        )}\n      </nav>\n    </div>\n  )\n}\n```\n\n```jsx\nimport React from 'react'\nimport { isLoggedIn } from '../services/auth'\nimport { navigate } from 'gatsby'\n\nclass PrivateRoute extends React.Component {\n  componentDidMount = () => {\n    const { location } = this.props\n    if (!isLoggedIn() && location.pathname !== `/app/login`) {\n      // If the user is not logged in, redirect to the login page.\n      navigate(`/app/login`)\n      return null\n    }\n  }\n\n  render() {\n    const { component: Component, location, ...rest } = this.props\n    return isLoggedIn() ? <Component {...rest} /> : null\n  }\n}\n\nexport default PrivateRoute\n```\n\n```jsx\nimport React from 'react'\nimport { navigate } from 'gatsby'\nimport { handleLogin, isLoggedIn } from './services/auth'\n\nclass Login extends React.Component {\n  handleSubmit = () => handleLogin(user => navigate(`/app/profile`))\n  render() {\n    return (\n      <>\n        <h1>Log in</h1>\n        <button onClick={this.handleSubmit}>log in</button>\n      </>\n    )\n  }\n}\n\nexport default Login\n```\n\nPhew that was a lot! but you should have a solid starting point for your app :)\n\n## Bonus points: Authenticated Lambda Functions for your Gatsby App\n\nJust like [every magic act has a pledge, a turn, and a prestige](<https://en.wikipedia.org/wiki/The_Prestige_(film)>), I have one last tidbit for you. [Nothing on the client-side is safe](https://stackoverflow.com/questions/50277192/react-security-concerns-restricted-pages-in-app), and although you can send along Netlify Identity user id's to your Netlify Function endpoints for authenticated access from your Gatsby App (for example in the body of a POST request), you'll never be truly sure if that flow is secure either from malicious users or snooping.\n\nThe best way to do authenticated actions inside serverless functions is to do it from inside the context of the function itself. Fortunately, [Netlify Identity and Functions work seamlessly together](https://www.netlify.com/docs/functions/#identity-and-functions). All you have to do is to send along the user's [JWT](https://jwt.io/) when hitting your endpoint:\n\n```js\n// in your gatsby app\nconst user = getUser()\nfetch('/.netlify/functions/auth-hello', {\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: 'Bearer ' + user.token.access_token // like this\n  }\n}).then(/* etc */)\n```\n\nAnd then inside a Lambda function, you can now access the `user` object:\n\n```js\n// more info: https://www.netlify.com/docs/functions/#identity-and-functions\n\n// Note that `netlify-lambda` only locally emulates Netlify Functions, while `netlify-identity-widget` interacts with a real Netlify Identity instance. This means that `netlify-lambda` doesn't support Netlify Functions + Netlify Identity integration.\n\nexport function handler(event, context, callback) {\n  if (context.clientContext) {\n    const {\n      user // actual user info you can use for your serverless functions\n    } = context.clientContext\n    callback(null, {\n      statusCode: 200,\n      body: JSON.stringify({\n        msg: 'auth-hello: ' + Math.round(Math.random() * 10),\n        user\n      })\n    })\n  } else {\n    console.log(`\n    Note that netlify-lambda only locally emulates Netlify Functions, \n    while netlify-identity-widget interacts with a real Netlify Identity instance. \n    This means that netlify-lambda doesn't support Netlify Functions + Netlify Identity integration.\n    `)\n    callback(null, {\n      statusCode: 200,\n      body: JSON.stringify({\n        msg:\n          \"auth-hello - no authentication detected. Note that netlify-lambda doesn't locally emulate Netlify Identity.\"\n      })\n    })\n  }\n}\n```\n\n## Gatsby - Perfect for your next Hackathon\n\nIt's 5 steps each to turn your static Gatsby sites into dynamic, authenticated, fully serverless apps with Netlify's free tools. This makes Gatsby a perfect tool for your next app. If you're at a hackathon, short on time, or just like to see a full working demo, check any of the following links.\n\n- **Code:** https://github.com/sw-yx/jamstack-hackathon-starter\n- **Starter:** https://www.gatsbyjs.org/starters/jamstack-hackathon-starter\n- **Live Demo:** https://jamstack-hackathon-starter.netlify.com/\n"
    },
    {
      "slug": "getting-closure-on-hooks",
      "data": {
        "technical": true,
        "title": "Getting Closure on Hooks",
        "slug": "getting-closure-on-hooks",
        "categories": [
          "Tech",
          "React"
        ],
        "date": "2019-03-11T00:00:00.000Z",
        "canonical": "https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/"
      },
      "content": "\n_Published on the Netlify Blog as [Deep dive: How do React hooks really work?](https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/)_\n\n[Hooks](https://reactjs.org/hooks) are a fundamentally simpler way to encapsulate stateful behavior and side effects in user interfaces. They were [first introduced in React](https://www.youtube.com/watch?v=dpw9EHDh2bM) and have been broadly embraced by other frameworks like [Vue](https://css-tricks.com/what-hooks-mean-for-vue/), [Svelte](https://twitter.com/Rich_Harris/status/1093260097558581250), and even adapted for [general functional JS](https://github.com/getify/TNG-Hooks). However, their functional design requires a good understanding of closures in JavaScript.\n\nIn this article, we reintroduce closures by building a tiny clone of React Hooks. This will serve two purposes – to demonstrate the effective use of closures, and to show how you can build a Hooks clone in just 29 lines of readable JS. Finally, we arrive at how Custom Hooks naturally arise.\n\n> ⚠️ Note: You don't need to do any of this in order to understand Hooks. It might just help your JS fundamentals if you go through this exercise. Don’t worry, it’s not that hard!\n\n## What are Closures?\n\nOne of the [many selling points](https://reactjs.org/docs/hooks-intro.html#classes-confuse-both-people-and-machines) of using hooks is to avoid the complexity of classes and higher order components altogether. However, with hooks, some feel we may have swapped one problem for another. Instead of [worrying about bound context](https://overreacted.io/how-are-function-components-different-from-classes/), we now have to [worry about closures](https://overreacted.io/making-setinterval-declarative-with-react-hooks/). As [Mark Dalgleish memorably summarized](https://twitter.com/markdalgleish/status/1095025468367990784):\n\n![A Star Wars meme about React Hooks and closures](/img/blog/tweet-markdalgleish-hooks.jpg 'A Star Wars meme about React Hooks and closures')\n\nClosures are a fundamental concept in JS. In spite of this, they are notorious for being confusing to many especially newer developers. Kyle Simpson of [You Don’t Know JS](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch5.md) fame defines closures as such:\n\n_Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope._\n\nThey’re obviously closely tied to the concept of lexical scoping, which [MDN defines](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) as \"how a parser resolves variable names when functions are nested”. Let’s look at a practical example to better illustrate this:\n\n```js\n// Example 0\nfunction useState(initialValue) {\n  var _val = initialValue // _val is a local variable created by useState\n  function state() {\n    // state is an inner function, a closure\n    return _val // state() uses _val, declared by parent funciton\n  }\n  function setState(newVal) {\n    // same\n    _val = newVal // setting _val without exposing _val\n  }\n  return [state, setState] // exposing functions for external use\n}\nvar [foo, setFoo] = useState(0) // using array destructuring\nconsole.log(foo()) // logs 0 - the initialValue we gave\nsetFoo(1) // sets _val inside useState's scope\nconsole.log(foo()) // logs 1 - new initialValue, despite exact same call\n```\n\nHere, we’re creating a primitive clone of React’s `useState` hook. In our function, there are 2 inner functions, `state` and `setState`. `state` returns a local variable `_val` defined above and `setState` sets the local variable to the parameter passed into it (i.e. `newVal`).\n\nOur implementation of `state` here is a getter function, [which isn’t ideal](https://twitter.com/sebmarkbage/status/1098809296396009472), but we’ll fix that in a bit. What’s important is that with `foo` and `setFoo`, we are able to access and manipulate (a.k.a. “close over”) the internal variable `_val`. They retain access to `useState` ‘s scope, and that reference is called closure. In the context of React and other frameworks, this looks like state, and that’s exactly what it is.\n\nIf you’d like deeper dives on closure, I recommend reading [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures), [YDKJS](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch5.md), and [DailyJS](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8) on the topic, but if you understood the code sample above, you have everything you need.\n\n## Usage in Function Components\n\nLet’s apply our newly minted `useState` clone in a familiar looking setting. We’ll make a `Counter` component!\n\n```js\n// Example 1\nfunction Counter() {\n  const [count, setCount] = useState(0) // same useState as above\n  return {\n    click: () => setCount(count() + 1),\n    render: () => console.log('render:', { count: count() }),\n  }\n}\nconst C = Counter()\nC.render() // render: { count: 0 }\nC.click()\nC.render() // render: { count: 1 }\n```\n\nHere, instead of rendering to the DOM, we’ve opted to just `console.log` out our state. We’re also exposing a programmatic API for our Counter so we can run it in a script instead of attaching an event handler. With this design we are able to simulate our component rendering and reacting to user actions.\n\nWhile this works, calling a getter to access state isn’t quite the API for the real `React.useState` hook. Let’s fix that.\n\n## Stale Closure\n\nIf we want to match the real React API, our state has to be a variable instead of a function. If we were to simply expose `_val` instead of wrapping it in a function, we’d encounter a bug:\n\n```js\n// Example 0, revisited - this is BUGGY!\nfunction useState(initialValue) {\n  var _val = initialValue\n  // no state() function\n  function setState(newVal) {\n    _val = newVal\n  }\n  return [_val, setState] // directly exposing _val\n}\nvar [foo, setFoo] = useState(0)\nconsole.log(foo) // logs 0 without needing function call\nsetFoo(1) // sets _val inside useState's scope\nconsole.log(foo) // logs 0 - oops!!\n```\n\nThis is one form of the Stale Closure problem. When we destructured `foo` from the output of `useState`, it refers to the `_val` as of the initial `useState` call… and never changes again! This is not what we want; we generally need our component state to reflect the _current_ state, while being just a variable instead of a function call! The two goals seem diametrically opposed.\n\n## Closure in Modules\n\nWe can solve our `useState` conundrum by… moving our closure inside another closure! (_Yo dawg I heard you like closures…_)\n\n```js\n// Example 2\nconst MyReact = (function() {\n  let _val // hold our state in module scope\n  return {\n    render(Component) {\n      const Comp = Component()\n      Comp.render()\n      return Comp\n    },\n    useState(initialValue) {\n      _val = _val || initialValue // assign anew every run\n      function setState(newVal) {\n        _val = newVal\n      }\n      return [_val, setState]\n    },\n  }\n})()\n```\n\nHere we have opted to use [the Module pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript) to make our tiny React clone. Like React, it keeps track of component state (in our example, it only tracks one component, with a state in `_val`). This design allows `MyReact` to “render” your function component, which allows it to assign the internal `_val` value every time with the correct closure:\n\n```js\n// Example 2 continued\nfunction Counter() {\n  const [count, setCount] = MyReact.useState(0)\n  return {\n    click: () => setCount(count + 1),\n    render: () => console.log('render:', { count }),\n  }\n}\nlet App\nApp = MyReact.render(Counter) // render: { count: 0 }\nApp.click()\nApp = MyReact.render(Counter) // render: { count: 1 }\n```\n\nNow this looks a lot more like React with Hooks!\n\nYou can [read more about the Module pattern and closures in YDKJS](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch5.md#modules).\n\n## Replicating `useEffect`\n\nSo far, we’ve covered `useState`, which is the first basic React Hook. The next most important hook is [`useEffect`](https://reactjs.org/docs/hooks-effect.html). Unlike `setState` , `useEffect` executes asynchronously, which means more opportunity for running into closure problems.\n\nWe can extend the tiny model of React we have built up so far to include this:\n\n```js\n// Example 3\nconst MyReact = (function() {\n  let _val, _deps // hold our state and dependencies in scope\n  return {\n    render(Component) {\n      const Comp = Component()\n      Comp.render()\n      return Comp\n    },\n    useEffect(callback, depArray) {\n      const hasNoDeps = !depArray\n      const hasChangedDeps = _deps ? !depArray.every((el, i) => el === _deps[i]) : true\n      if (hasNoDeps || hasChangedDeps) {\n        callback()\n        _deps = depArray\n      }\n    },\n    useState(initialValue) {\n      _val = _val || initialValue\n      function setState(newVal) {\n        _val = newVal\n      }\n      return [_val, setState]\n    },\n  }\n})()\n\n// usage\nfunction Counter() {\n  const [count, setCount] = MyReact.useState(0)\n  MyReact.useEffect(() => {\n    console.log('effect', count)\n  }, [count])\n  return {\n    click: () => setCount(count + 1),\n    noop: () => setCount(count),\n    render: () => console.log('render', { count }),\n  }\n}\nlet App\nApp = MyReact.render(Counter)\n// effect 0\n// render {count: 0}\nApp.click()\nApp = MyReact.render(Counter)\n// effect 1\n// render {count: 1}\nApp.noop()\nApp = MyReact.render(Counter)\n// // no effect run\n// render {count: 1}\nApp.click()\nApp = MyReact.render(Counter)\n// effect 2\n// render {count: 2}\n```\n\nTo track dependencies (since `useEffect` reruns when dependencies change), we introduce another variable to track `_deps`.\n\n## Not Magic, just Arrays\n\nWe have a pretty good clone of the `useState` and `useEffect` functionality, but both are badly implemented [singletons](https://en.wikipedia.org/wiki/Singleton_pattern) (only one of each can exist or bugs happen). To do anything interesting (and to make the final stale closure example possible), we need to generalize them to take arbitrary numbers of state and effects. Fortunately, as [Rudi Yardley has written](https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e), React Hooks are not magic, just arrays. So we’ll have a `hooks` array. We’ll also take the opportunity to collapse both `_val` and `_deps` into our `hooks` array since they never overlap:\n\n```js\n// Example 4\nconst MyReact = (function() {\n  let hooks = [],\n    currentHook = 0 // array of hooks, and an iterator!\n  return {\n    render(Component) {\n      const Comp = Component() // run effects\n      Comp.render()\n      currentHook = 0 // reset for next render\n      return Comp\n    },\n    useEffect(callback, depArray) {\n      const hasNoDeps = !depArray\n      const deps = hooks[currentHook] // type: array | undefined\n      const hasChangedDeps = deps ? !depArray.every((el, i) => el === deps[i]) : true\n      if (hasNoDeps || hasChangedDeps) {\n        callback()\n        hooks[currentHook] = depArray\n      }\n      currentHook++ // done with this hook\n    },\n    useState(initialValue) {\n      hooks[currentHook] = hooks[currentHook] || initialValue // type: any\n      const setStateHookIndex = currentHook // for setState's closure!\n      const setState = (newState) => (hooks[setStateHookIndex] = newState)\n      return [hooks[currentHook++], setState]\n    },\n  }\n})()\n```\n\nNote our usage of `setStateHookIndex` here, which doesn’t seem to do anything, but is used to prevent `setState` from closing over the `currentHook` variable! If you take that out, `setState` again stops working because the closed-over `currentHook` is stale. (Try it!)\n\n```js\n// Example 4 continued - in usage\nfunction Counter() {\n  const [count, setCount] = MyReact.useState(0)\n  const [text, setText] = MyReact.useState('foo') // 2nd state hook!\n  MyReact.useEffect(() => {\n    console.log('effect', count, text)\n  }, [count, text])\n  return {\n    click: () => setCount(count + 1),\n    type: (txt) => setText(txt),\n    noop: () => setCount(count),\n    render: () => console.log('render', { count, text }),\n  }\n}\nlet App\nApp = MyReact.render(Counter)\n// effect 0 foo\n// render {count: 0, text: 'foo'}\nApp.click()\nApp = MyReact.render(Counter)\n// effect 1 foo\n// render {count: 1, text: 'foo'}\nApp.type('bar')\nApp = MyReact.render(Counter)\n// effect 1 bar\n// render {count: 1, text: 'bar'}\nApp.noop()\nApp = MyReact.render(Counter)\n// // no effect run\n// render {count: 1, text: 'bar'}\nApp.click()\nApp = MyReact.render(Counter)\n// effect 2 bar\n// render {count: 2, text: 'bar'}\n```\n\nSo the basic intuition is having an array of `hooks` and an index that just increments as each hook is called and reset as the component is rendered.\n\nYou also get [custom hooks](https://reactjs.org/docs/hooks-custom.html) for free:\n\n```js\n// Example 4, revisited\nfunction Component() {\n  const [text, setText] = useSplitURL('www.netlify.com')\n  return {\n    type: (txt) => setText(txt),\n    render: () => console.log({ text }),\n  }\n}\nfunction useSplitURL(str) {\n  const [text, setText] = MyReact.useState(str)\n  const masked = text.split('.')\n  return [masked, setText]\n}\nlet App\nApp = MyReact.render(Component)\n// { text: [ 'www', 'netlify', 'com' ] }\nApp.type('www.reactjs.org')\nApp = MyReact.render(Component)\n// { text: [ 'www', 'reactjs', 'org' ] }}\n```\n\n**This truly underlies how “not magic” hooks are** – Custom Hooks simply fall out of the primitives provided by the framework – whether it is React, or the tiny clone we’ve been building.\n\n## Deriving the Rules of Hooks\n\nNote that from here you can trivially understand the first of the [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html): [Only Call Hooks at the Top Level](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level). We have explicitly modeled React’s reliance on call order with our `currentHook` variable. You can read through [the entirety of the rule’s explanation](https://reactjs.org/docs/hooks-rules.html#explanation) with our implementation in mind and fully understand everything going on.\n\nNotice also that the second rule, “[Only Call Hooks from React Functions](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-from-react-functions)”, isn’t a necessary result of our implementation either, but it is certainly good practice to explicitly demarcate what parts of your code rely on stateful logic. (As a nice side effect, it also makes it easier to write tooling to make sure you follow the first Rule. You can’t accidentally shoot yourself in the foot by wrapping stateful functions named like regular JavaScript functions inside of loops and conditions. Following Rule 2 helps you follow Rule 1.)\n\n## Conclusion\n\nAt this point we have probably stretched the exercise as far as it can go. You can try [implementing useRef as a one-liner](https://www.reddit.com/r/reactjs/comments/aufijk/useref_is_basically_usestatecurrent_initialvalue_0/), or [making the render function actually take JSX and mount to the DOM](https://www.npmjs.com/package/vdom), or a million other important details we have omitted in this tiny 28-line React Hooks clone. But hopefully you have gained some experience using closures in context, and gained a useful mental model demystifying how React Hooks work.\n\n_I'd like to thank [Dan Abramov](https://twitter.com/dan_abramov) and [Divya Sasidharan](https://twitter.com/shortdiv) for reviewing early drafts of this eassay and improving it with their valuable feedback. All remaining errors are mine.._\n"
    },
    {
      "slug": "github-scraping",
      "data": {
        "technical": true,
        "title": "Automated Data Scraping with Github Actions",
        "slug": "github-scraping",
        "subtitle": "Data Scraping without a Database",
        "categories": [
          "Tech"
        ],
        "date": "2020-01-21T00:00:00.000Z",
        "description": "A neat trick I discovered from Mikeal Rogers"
      },
      "content": "\nA common need I have in open source community work, especially with static site generators and the JAMstack, is scraping and updating data. For example, in the [Svelte Community](https://svelte-community.netlify.com/code) site we scrape the GitHub star count and last update, and ditto [Gatsby Starters](https://www.gatsbyjs.org/starters/). Of course, you could grab data clientside, and whatever you can't do clientside, you can throw up a serverless function to do this. \n\nBut sometimes it just makes sense to scrape data *once* instead of every time your users access your site, especially if that data requires tokens your users may not have. Typically you'd set up a cronjob and send the data into a database somewhere. With [GitHub Actions](https://github.com/features/actions), you can do this all inside GitHub, AND save a version controlled history of all data.\n\nI noticed [Mikeal Rogers doing exactly this for his Daily OSS watcher](https://github.com/mikeal/daily) project, and so finally took some time to check out his code and make a minimal repro so others can take it as a base.\n\n## Demo\n\nYou can see my **demo in action** here: https://github.com/sw-yx/gh-action-data-scraping.\n\n- The action workflow is https://github.com/sw-yx/gh-action-data-scraping/blob/master/.github/workflows/scrape.yml\n- The node script that is executed is https://github.com/sw-yx/gh-action-data-scraping/blob/master/action.js\n- The scraped data is https://github.com/sw-yx/gh-action-data-scraping/tree/master/data\n\nFor those new to npm, there is a simple [npm script](https://www.freecodecamp.org/news/introduction-to-npm-scripts-1dbb2ae01633/) defined in `package.json`. This is so you can manually run it while writing and testing your code. The action workflow calls this same exact action to reduce any discrepancies.\n\n## The Script\n\nStraight to the point:\n\n```yaml\non:\n  schedule:\n    - cron:  '0 8 * * *' # 8am daily. Ref https://crontab.guru/examples.html\nname: Scrape Data\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master # check out the repo this action is in, so that you have all prior data\n    - name: Build\n      run: npm install # any dependencies you may need\n    - name: Scrape\n      run: npm run action # actually run your npm script for scraping\n      # env:\n      #   WHATEVER_TOKEN: ${{ secrets.YOU_WANT }}\n    - uses: mikeal/publish-to-github-action@master\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub sets this for you\n```\n\nThe basic idea, in English, is:\n\n- You set a cron triggered github action ([cron examples](https://crontab.guru/examples.html) - max frequency every 5 mins)\n- Your action checks out your repo with https://github.com/actions/checkout so that it has existing/prior data\n- `npm install` and run your scrape script, which writes files to somewhere in your repo. \n- check it back in with https://github.com/mikeal/publish-to-github-action\n\nThat's it! Look ma, no database!\n\nAs part of your workflow, you can also fire off a static site build after this action completes, or weekly, or whenever else you like.\n\n## Limits\n\nYou can do whatever you like with this, including taking screenshots of sites!\n\nThe limits I can think of are the limits of GitHub and GitHub Actions:\n\n- The max frequency of cronjobs on GitHub actions is every 5 minutes. For more frequent scraping, you will have to turn elsewhere.\n- GitHub has a [soft storage limit of 1GB](https://www.quora.com/What-is-the-max-storage-limit-per-repository-in-GitHub)\n  - You can [work around this with Git LFS](https://twitter.com/mikeal/status/1219739811159801856) if you have to!\n- Actions are free for public repos, but incur costs for private repos\n  - [You get 6 Concurrent jobs, 1000 API requests an hour, and each job can take up to 6(!) hours](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-github-actions#usage-limits)\n\nIn addition to these limits, GitHub Actions should not be used for:\n\n- Content or activity that is illegal or otherwise prohibited by their Terms of Service or Community Guidelines.\n- Cryptomining\n- Serverless computing\n- Activity that compromises GitHub users or GitHub services.\n- Any other activity unrelated to the production, testing, deployment, or publication of the software project associated with the repository where GitHub Actions are used. In other words, be cool, don’t use GitHub Actions in ways you know you shouldn’t. \n\nBe a good citizen, **don't abuse it and F this up for the rest of us**!\n\n## More\n\nI'm looking for more great usecases for GH actions:\n\n- https://www.edwardthomson.com/blog/github_actions_advent_calendar.html\n- https://github.com/sdras/awesome-actions\n- more?"
    },
    {
      "slug": "why-graphql-variables",
      "data": {
        "technical": true,
        "title": "GraphQL Variables and Persisted Queries",
        "subtitle": "Something I learned from Lee Byron and Why Babel-Blade is a Bad Idea",
        "slug": "why-graphql-variables",
        "categories": [
          "Tech",
          "GraphQL"
        ],
        "date": "2019-09-09T00:00:00.000Z",
        "intro": "Hi! This is swyx, I work on Developer Experience at Netlify and recently wrote an article on the common trends behind [Design Systems, TypeScript, Apollo GraphQL, and React at CSS Tricks.](https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/)"
      },
      "content": "\n_This is a brief commentary for the awesome [Ladybug podcast](http://ladybug.dev)._\n\nHi! This is swyx, I work on Developer Experience at Netlify and recently wrote an article on the common trends behind [Design Systems, TypeScript, Apollo GraphQL, and React at CSS Tricks.](https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/)\n\nThe way GraphQL Variables work is best envisioned by how you would use it inside the GraphiQL tool.\n\nLet's say you are querying the `name` of a `user` with an argument of `id: 1`. We give this query a name of `getUser`. Your query would be a simple string on the top left of GraphiQL:\n\n```graphql\nquery getUser {\n  user(id: 1) {\n    name\n  }\n}\n```\n\nHowever you don't want to hardcode the id of `1` since in your app you might change this around. So the answer is to make your _named query_ itself take arguments, and then pass those arguments down to whichever field takes those arguments. Think of it like making a function that takes arguments, and calls another function with those arguments.\n\nTo turn a basic hardcoded query into a dynamic one with variables, you have to do 3 things:\n\n1. Replace the static value in the query with a dollar sign, then variable name. So for our example, we replace `1` with `$id`\n\n2. Declare the variable as one of the arguments accepted by the query. GraphQL is strongly typed, so you also have to provide the variable's type upfront, as well as indicate a required argument with a `!`. So for our example, after the named `getUser` query, we add `($id: ID!)`\n\n3. Separately, pass in the variable name (`id`) and value (`1`) in a JSON object to your GraphQL client library. In GraphiQL, this is the (sometimes hidden) bottom left panel. So top left has your query, and bottom left has your query variables.\n\n```graphql\nquery getUser($id: ID!){\n  user(id: $id) {\n    name\n  }\n}\n///// JSON\n{\n  \"id\": 1\n}\n```\n\nNow, you can change your query just by passing in a different JSON object, without rewriting the query string at runtime.\n\nWhat a lot of people might miss is _WHY_ you don't want to rewrite the query string at runtime. After all, GraphQL clients use the `graphql-tag` library to let you write ES6 template strings, which do string interpolation very well. Instead of writing `$id`, `ID!`, `id`, and `$id` 4 times, I could simply swap the static `1` value with some interpolated value from JavaScript!\n\nThis is infact exactly what I did, and I even wrote [a Babel plugin called `babel-blade`](https://babel-blade.netlify.com) to autogenerate the query string at runtime.\n\nBut then I met Lee Byron and other longtime users of GraphQL, and learned that the reason you don't rewrite the query string is _because_ you want to hardcode it. If you hardcode your query, you can serialize it upfront, and if you can serialize it upfront, you can make your GraphQL server only respond to that query, and that means hackers can't make unauthorized or prohibitively expensive queries. You can even reduce the query down to a single identifier, like \"query 5\", meaning you ship less JavaScript and data to your user. For huge apps like Facebook, this made a material difference to their speed, because upload speeds are typically much slower than download speeds, especially on mobile devices. This is a best practice called [Persisted Queries](https://blog.apollographql.com/persisted-graphql-queries-with-apollo-client-119fd7e6bba5). Think of going to your local diner, and instead of ordering \"Two all beef patties, special sauce, lettuce, cheese, pickles, onions on a sesame seed bun\" every time, you just say you'll have \"the usual\".\n\nPersisted Queries are awesome, and only possible because of GraphQL Variables.\n"
    },
    {
      "slug": "hammers",
      "data": {
        "technical": true,
        "title": "In Defense of Hammers",
        "subtitle": "Why \"Right Tool for Most Jobs\" beats \"Right Tool for the Job\"",
        "slug": "hammers",
        "categories": [
          "Tech"
        ],
        "begun": "2019-10-21T00:00:00.000Z",
        "date": "2019-12-26T00:00:00.000Z"
      },
      "content": "\nLet's say you needed a multipurpose tool. Which of these would you pick?\n\n![./assets/hammers.png](./assets/hammers.png)\n\nThere are probably a few responses possible:\n\n- People who prefer the Right-Hand-Side (RHS) tool, who like having a thing for every scenario\n- People who pick the Left-Hand-Side (LHS) tool, who are fine with having a simple set of tools that does most, but not all, things\n- People whose first instinct is to say \"it depends\"\n\nThe least helpful response is \"it depends\", because it is often unaccompanied by a succinct assessment of tradeoffs. Worse, you could get a listing of tradeoffs, but it is _unweighted_, presented as though the tradeoffs were somehow _equal_. They're not, and the more context you give, the more obvious the choice becomes.\n\nBut I'm here to call out the RHS people as well.\n\n## Table of Contents\n\n## Right Tool For the Job\n\n[In September, I observed that](https://twitter.com/swyx/status/1171549189064613888):\n\n**“Right tool for the job” is a cop-out.**\n\nIt assumes:\n\n1. **unlimited search time**\n2. **”Rightness” wins all debate**\n3. **that there -is- a right tool**\n4. **everyone agrees on the job**\n5. **tradeoffs don’t matter/exist**\n6. **People haven’t heard this 1000x already**\n\n**We can do better.**\n\nIt wasn't a subtweet of anyone or anything, just a persistent pet peeve that bubbled through my unconscious that day. It got a surprising response for a throwaway thought, which often means I hit a nerve. (Even [a fair number of quote tweets](https://twitter.com/search?q=https%3A%2F%2Ftwitter.com%2Fswyx%2Fstatus%2F1171549189064613888&src=typed_query)!)\n\nI'd like to talk through each point.\n\n### 1. Unlimited Search Time\n\nOf course, you can take this in the most trivial sense: the number of solutions out there is vast, and your time is limited, of course you can't learn everything. Duh, you can't know infinite tools. Don't you remember [How it feels to learn JavaScript in 2016](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f)?\n\nBut the reality is often much more constrained than that - you have mental headspace and time to evaluate 2, maybe 4 tools tops, _because you have other stuff to do_. The way those 2-4 tools even arrive in your consideration set is a heavy amount of marketing and word of mouth, all with their own biases. This is _before_ you are even able to assess objectively which is right for you.\n\nOf course, that's assuming you _are_ able to assess what tools are \"right\" for you...\n\n### 2. \"Rightness\" Wins All Debate\n\nOf course, you can take this in the most trivial sense: we are pretty bad at evaluating tools anyway so we should stop pretending we can. FWIW, I don't actually believe this. Trial runs often suss out tool choices very quickly. However we will still make mistakes, because whether or not the tool ends up \"right\" involves some amount of predicting the future. [False positives and negatives](https://en.wikipedia.org/wiki/False_positives_and_false_negatives) will be made.\n\nWhat I think is even more pernicious is the idea that the \"right\" tool **wins all debate**, end of story. Of course, if you have an expansive definition of \"right\", this is a truism. But often we have critical factors that don't get considered properly:\n\n- There is tremendous value in sticking to tried and tested legacy systems and tools, right down to their known bugs and flaws. There are too many examples to enumerate here but I'll link the reader to Spolsky's seminal [Things You Should Never Do](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/).\n- Familiarity and Learning curve are flip sides of the same coin. You're able to do a ton more with a tool you're already familiar with. An unfamiliar tool bears the cost of a learning curve to get back to productive.\n\nThis is super nuanced. Insisting on always going with the \"right\" tool, for a common definition of \"right\", means taking on a huge amount of churn risk and cost. Insisting on always sticking to legacy and familiarity, however, also risks technical debt and a slow decline to irrelevance. The \"right right\" lies somewhere in between.\n\n### 3. There -is- a right tool\n\nThis one is more about assuming that something out there exists that will solve your problem.\n\n**It may not exist.**\n\nYou may churn from tool to tool to tool looking for perfection without realizing none of these tools were made for your situation. This search can never be satisfied, but the process may help you understand your own needs before realizing that you may have to stitch together multiple different tools, or (_gasp_) build your own.\n\n### 4. Everyone agrees on the job\n\nDiscussions about tools often zoom too quickly to, well, tools. Comparing tools, Demoing tools, Trialing tools. But we may be better served trying to define and agree on what the job even _is_.\n\nIf you work on a team, this involves team dynamics and differing priorities, often based on roles and budgets and policies. But even solo we can be remarkably vague about what it is we actually _want_ out of a tool.\n\nToo often we end up compiling feature checklists between the consideration set of tools and going for whichever has the most green - and forget that most of the things on the checklists we don't even need or care about nor have we verified actually works the way we hope it does (which, in the final analysis, is the same thing). This is a very **tool-focused** approach - we're dealing on their terms (often literally, based on bullet points from the pricing page).\n\nInstead we could perhaps try to identify the 2-3 things the tool absolutely _must_ get done. This is a very **\"us\"-focused** approach - getting clarity on what we want before letting people tell us what we want.\n\nIf internal discussion is chaos: External ones are going to be worse. Even asking well-meaning friends what the \"right tool for the job\" is, involves them understanding what the job is _on your behalf_. Not impossible, but too often taken for granted.\n\n### 5. Tradeoffs don’t matter/exist\n\nI feel like this one is kinda self evident. Sometimes the \"right tool\" is beyond your budget (which, again, depending on how you define \"right\", disqualifies it from being the right tool 😂). Or it could be about familiarity, learning curve, migration cost, whatever. Learning curve is particularly important in my mind - is it better to know how to do everything in one (not necessarily \"right\") tool, or to be mediocre in every tool (one of which may be \"right\")?\n\nIt's also about the non-existence of perfection - say A and B each have 80% of what you want, but a different 80%. Do you have the capacity to just use both? If no, which 80% do you pick?\n\nEither way, \"pick the right tool for the job\" is depressingly useless here.\n\n### 6. People haven’t heard this 1000x already\n\nJust a final dig at platitudes. Because \"right\" is ill-defined, it is hard to disagree with (\"Use the wrong tool for the job\" anyone?) and often used as \"agree to disagree\" conversation enders.\n\nThis isn't always true, of course. [Laurie Barth chimed in with this great point](https://twitter.com/laurieontech/status/1171550346570850305):\n\n> You’re absolutely correct. But I usually hear this to counter zealots of one technology or another. In which case it’s pointing out that technologies they consider inferior have valid use cases.\n\nWith Laurie's caveat, [I think instead of engaging in meaningless platitudes, we can listen and empathise more, fill in knowledge gaps, and ultimately respect choices people make, while daring to have strong opinions.](https://twitter.com/swyx/status/1171580149810237442)\n\n## Conclusion: Right tools for MOST jobs\n\nI ended the mini-rant with a note: \"We can do better\" - by which I mean improve discourse on tech choices from unhelpful platitudes.\n\nI think **general purpose tools and languages** have a strong case here. We often refer to general purpose languages - Python, JavaScript, Ruby, Java, C++, etc. - as \"glue code\" - tying together various API signatures and scheduled work and munging data shapes to make the machine run. But a **tool** that is general enough is basically the exact same way as a language.\n\nPeople who use general purpose tools liberally are often criticized: \"**When you have a hammer, everything looks like a nail**\".\n\nI guess I'm arguing for **everybody to have a small range of hammers** for the various jobs they need to do.\n\nYou may laugh at the horrendous inefficiency of using Excel to write a pricing and risk management system for an 8-figure-revenue interest rate derivatives business, but that's exactly what I did early in my finance career. Of course we should've hired developers and written it in the \"right\" tool or language. But we didn't have that time or resource. So that's what I did. We shipped it. It worked.\n\nNow swap \"Excel\" for \"React\" and \"pricing and risk management system\" for \"static site\". Or something else used \"inappropriately\" for some job in some context you think you know better than the person who did it. You see what I'm getting at?\n\nThere's also the reality that jobs change over time. No matter how clear we are on them now, requirements _will_ change (often after the big rollout or migration) and we need to factor in flexibility and portability as an intangible requirement of the systems we create for ourselves. General purpose tools are better [optimized for change](https://overreacted.io/optimized-for-change/) in this respect.\n\n## More Hot Takes\n\nApart from Laurie I felt some of the other respondents had some interesting comments worth sharing:\n\n- [Tomasz](https://twitter.com/tlakomy/status/1171549864989249536): \"Everyone uses what they know best and call it best practice\"\n- [Will King](https://twitter.com/wking__/status/1171549928511946752): \"[Only the Sith deal in absolutes](https://www.wking.dev/content/articles/only-sith-deal-in-absolutes/)\"\n- [Ramon Garcia](https://twitter.com/rmngrc/status/1171675378555019264): \"I think \"right tool for the job from your toolbox\" would be more correct. Doesn't assume you have unlimited time for investigating and find the best tool out there, and allows you to move on while using something you or your team has experience with.\"\n- [Max Goldstein](https://twitter.com/maxgoldst/status/1171649319419748353): \"Good engineers examine each choice of algorithm; this is O(n). Great engineers pick the first algorithm that comes to mind; this is O(1).\"\n"
    },
    {
      "slug": "how-to-name-things",
      "data": {
        "technical": true,
        "title": "How To Name Things",
        "slug": "how-to-name-things",
        "categories": [
          "Tech"
        ],
        "begun": "2019-05-09T00:00:00.000Z",
        "date": "2019-05-16T00:00:00.000Z"
      },
      "content": "\n> There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors. - [Leon Bambrick](https://twitter.com/secretgeek/status/7269997868?lang=en)\n\nI've vacillated on my opinion on naming things. I think most people start out with no or weak opinions, looking slightly askance at the weirdos who do have strong opinions. They absorb naming conventions by osmosis, and then run into real problems at scale/over time, and then develop extremely strong opinions informed by that experience. The Weirdo's Journey.\n\nI've given this essay a slightly clickbaity title. Spoiler: I'm not going to solve the problem of naming things today. All I hope to do is describe some opinions I've formed from my experience in Python and JS, list some considerations, invite you to [share yours](https://twitter.com/swyx), and suggest you have this debate on your team.\n\n## Not Naming Things [Aug 2019 Edit]\n\nOne option people sometimes forget they have at their disposal is to just _not_ name things where possible. I have a couple examples for you.\n\n### Example 1: Not giving different names at module and function boundaries\n\nMind your \"name stack\". This is the number of names you have to keep in your head as you read code.\n\nYou can name the same thing 8 different ways at boundaries and hate life when you have to refactor or grep your own code:\n\n```js\n// index.js\nconst grault = require('./corge')\nconst foo = grault('baz')\n\n// corge.js\nexport default function doBar(qux) {\n  let quux = parse(qux)\n  return quux\n}\n```\n\nor just 2 ways and hate life less:\n\n```js\n// index.js\nconst { getFoo } = require('./getFoo')\nconst foo = getFoo('bar')\n\n// getFoo.js\nexport function getFoo(bar) {\n  return parse(bar)\n}\n```\n\n### Example 2: Using Tooling to autogenerate names\n\nInstead of naming a `title` in CSS and then also a `<Title className=\"title\">` in React, opening yourself up to global conflicts and subsequent refactoring, you could choose to use either a CSS Module or CSS in JS approach to scope and manage them together. Credit for this idea comes from [Max Stoiber](https://www.smashingmagazine.com/2016/09/how-to-scale-react-applications/#unique-class-names).\n\nNotable Exception: Kyle Simpson famously does not use `=>` function syntax, preferring explicit `function` declaration, because he wants to avoid anonymous functions in the stack trace. That is his prerogative, but I don't think this is a battle worth fighting.\n\n## Probably Bad Names\n\nInherent in having any opinion on naming things is some intuition that some names are worse than others.\n\nThis can feel a bit silly in languages where naming has no impact on program behavior, especially in JavaScript where everything gets minified. In that sense, naming is [bikeshedding](https://en.wiktionary.org/wiki/bikeshedding).\n\nBut code is not just written for correctness, it is also written for other humans to read (and maintain). In a strong form of [Sapir Whorf](https://en.wikipedia.org/wiki/Linguistic_relativity), what you name a thing can totally shape and artificially limit your creativity. In that sense, naming is -not- bikeshedding.\n\nAnd yes, I've unironically been in standups where we _bikeshedded on whether something was bikeshedding_. The rabbit hole goes deep.\n\nI'll motivate the discussion with some examples:\n\n- [**Metasyntactic names**](https://en.wikipedia.org/wiki/Metasyntactic_variable), the \"lorem ipsum\" of code: `foo`, `bar`, `baz`. This isn't always wrong, especially when the name is meant to be a placeholder. You're not likely to see these in actual code. But you might.\n- **Vague names**: `thething`, `that`, `someObject`. Everything's a thing. `that` is no more descriptive than `this`. In JS, everything's an object. So what?\n- **Too short, likely overloaded names**: `id`, `name`, `url`. There's nothing inherently wrong with these, but often you need more than one of these. So you start with one `id` in your code, and then later on have an `product.id`, then a `user.id`, and pretty soon its no longer clear what `id` means. It is then harder and harder to grep and rename names in your code. This is especially important when the language allows shadowing (_ahem JS_). Probably my most controversial, and recent, opinion. Always ask yourself: \"What do I do if there is more than one of this name?\"\n- **Overly Long names**: >30 characters is pushing it IMO. You can namespace names inside a dict/object. (see below)\n- **Scary Technical names**: `ModifiedApplicativeFunctor`. As much as this makes sense to you, it has to make sense to the next person. Again, if you're on a team that all shares your context, go ahead. But at least pause to consider if they do.\n- **Nonconventional names**: Naming conventions don't exist in a vacuum. If everyone in a community does `import React from 'react'` and you do `import Bunny from 'react'` because you thought it would be a fun idea... it loses its fun quickly. More seriously, you can establish convenient aliases for names and concepts, but be careful that your code becomes an unreadable mess of custom convention.\n\n## Name Pollution\n\nIt is possible to have too much of a good thing! Even if _all_ names technically fit whatever guidelines you choose, it is still possible to have way too many names. Every new name demands more space in your working memory. One very pervasive way this happens is when names cross file and module boundaries:\n\n- `styleInjection.js` has only one export.\n- That export is a function, which is named `genStylesCode` because that's what it does.\n- A different file imports `styleInjection.js` and calls it `styleInjector` because that's what **it** uses it for.\n- `styleInjection.js` isn't imported anywhere else, it isn't a reusable utility.\n\nThis was adapted from real code in a popular framework. Here we end up with 3 different names for the exact same thing. Triple the bikeshedding. As [Joe Fiorini](https://twitter.com/joegrammer2/status/1127744685978652679) puts it, **name files after their default export**, or even better, don't have a default export, and still name the file after the \"main\" export anyway.\n\n## Controversial Names\n\nNot all names are obviously bad, even though they may seem bad to you.\n\n- **Single Letter Names**: You may dislike the TypeScript community using `T`, `U`, or `V` for generic type variables, but that does genuinely reflect the mathematical/set theory framing of the type system, and emphasize the genericness of the type variable. You may dislike using `e` for errors or for events, but if its usage is scoped, the impact really is very small and not worth arguing over. However, non-descriptive abbreviations that show up in errors seen by end users and your library consumers are bad news. Other forms of abbreviations may or may not be worth banning, check [this ESLint rule](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/master/docs/rules/prevent-abbreviations.md) for ideas.\n- **Plurals vs Arrays**: You can have `names` variable be an array of `name`s, or a `nameArray`, which is more verbose and explicit but less aesthetic. [Don't choose lazy pluralization](https://mobile.twitter.com/swyx/status/1159462137745629185) and beware substrings.\n- **[Block, Element, Modifier](http://getbem.com/introduction/)**: BEM was wildly popular for a reason - the global nature of CSS - but scoping methods have evolved a lot since then and BEM is far less necessary than used to be. It is also, to put it mildly, verbose.\n\n## Probably Good Ideas and their Considerations\n\nHaving dealt with the easy stuff above, I'm now on much more equivocal territory. Here we deal with some considerations you may want to think about in forming your naming guidelines and where I stand:\n\n- **Encoding Types**: In dynamically typed languages it can be helpful to give a hint as to what the variable is. But even in statically typed languages it can help give hints to the reader, especially where type inference means there isn't explicit annotation at every step:\n  - **Is it an array?** I mentioned this is controversial, and I've gone both ways between `names` and `nameArray`. But I do like giving a hint that something is an array.\n  - **Is it nullable?** I -really- like this for JavaScript, and because I have done some Haskell I often inject a monad, e.g. `maybeResult`. This reminds me to check if the result is falsy first. However, be warned that this can often not be the right choice for variables that can have more than two states, e.g. `undefined | Error | Success`. Pick a name that reflects the true nature of the concept.\n  - **Is it sync?** A similar monadic hint. The Node-style convention where [the default, shorter name is async](https://twitter.com/swyx/status/1127663193722060800) and the blocking, synchronous version has the longer name is a good idea, especially because asynchrony tends to be introduced and spread through codebases later on. Since you probably want to write async code wherever possible, let's make that the more concise name.\n  - **Is it a boolean?** I do like boolean verb prefixes: `isDone`, `hasProperty`, `didChange` over `done`, `!!object[property]`, `changed`. [Here is an ESLint rule for that.](https://github.com/typescript-eslint/typescript-eslint/issues/515). [Daniel Lo Nigro](https://twitter.com/Daniel15/status/1127736210590289921) mentions that banning inverse booleans also seems like a good idea - `notDone`, `noHeaders` - to avoid double negatives - but I haven't personally done that yet.\n  - **Is it an important enum or constant?** use SCREAMING_CASE, e.g. `DISPLAY_MODE_NONE`, `DISPLAY_MODE_INLINE`, `DISPLAY_MODE_BLOCK`. Often used in Redux action constants, and environment variables.\n  - **Is it an internal variable?** This one I like a _lot_ - if the variable is not meant to be exposed, it can often help to prefix `_internal` variables, especially if you are mirroring an argument just for mutability in order to output it again.\n  - **Not just for \"type system\" types**: In the mailing list preview, [Massimiliano](https://massimilianomirra.com/) wrote in with an outstanding pointer to Joel Spolsky's [Making Wrong Code Look Wrong](https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/), which advocates the original idea behind Hungarian notation, which encodes types in names far beyond what normal types can cover, reflecting ideas like \"string safety\" and \"width\" and \"index\" and so on. A strong recommend!\n- **Filenames**: We already discussed crossing file and module boundaries above. [Jonathan Johnson](https://twitter.com/LaughingBrook/status/1127805752905748480) also mentions that dates should come first in YYYY-MM-DD format.\n- **Namespacing**: We all agree descriptive names are better, but also that names that are too long are bad. One way to break this knot is by various namespacing strategies. Use your language's module system and data structures when naming convention fails you. For example, break up a collection of longish names like `DISPLAY_MODE_NONE`, `DISPLAY_MODE_INLINE`, `DISPLAY_MODE_BLOCK` into a `displayModes` dict or enum that you can access, like `displayModes.NONE`. It doesnt have to just be variables, it can be functions too.\n- **Grammar**: One of the most impactful naming decisions documented was in [the React lifecycle naming](https://reactjs.org/blog/2016/09/28/our-first-50000-stars.html#api-churn), which established a grammar of **Concepts, Actions and Operands** to help make lifecycles easier to remember. For CLI's, Heroku insists that `topics` are plural nouns and `commands` are verbs in their [CLI Style Guide](https://devcenter.heroku.com/articles/cli-style-guide#naming-the-command). Your users will very quickly learn your grammar and that is a fantastic way to communicate and structure your public API.\n\n> **Sidenote**: Naming is a subdiscipline of a broader art I call \"API Design\" - a very important and difficult-to-study topic I hope to one day write about.\n\nAs usual, it is possible to take good ideas too far - encoding types into EVERYTHING and being concise leads you to the commonly misused form of [Hungarian Notation](https://twitter.com/jose_r_varela/status/1127651367861018625), which nobody likes.\n\n## The Cost of Enforcement\n\nI do have a strong opinion that naming opinions should be breakable guidelines rather than strict rules. If you are spending more than 30 seconds discussing a name in a code review, and opinions differ, its probably not worth further debate. Your team's time is valuable and this costs more the bigger your team is. (Although if someone comes up with a name that everyone agrees better fits the concept/domain, then that is a great use of time!)\n\nBut wait, what about code standards? Without constant vigilance, my codebase will descend into a pit of chaos!\n\nWell, first of all, nice to see that you trust your colleagues that much.\n\nSecond, **whatever can't be automated can't be enforced.** Code reviews cost. Human code review will have inconsistencies. The person who nitpicks names all the time will either be resented or joked about because they don't see the bigger picture. It just never ends well. [Don't be the bad cop](https://hackernoon.com/dont-be-the-bad-cop-in-pull-request-reviews-let-software-do-that-job-1eb9e574c2d1) - let the machine do it.\n\nThe base level is trusting in syntax and tests - if the code is valid and works as advertised, you very likely already have bigger problems you should pay attention to. The next level is autoformatting ([prettier](https://prettier.io) for JS, [black](https://github.com/python/black) for python) and linting where you write or adopt code that looks at your AST and enforces simple naming rules. Be careful: Overly eager linting is a problem.\n\nAs Nick Shrock says: **Delegate to Tooling Whenever Possible**. [His advice on Code Reviews](https://medium.com/@schrockn/on-code-reviews-b1c7c94d868c) is worth a full read here. Importantly: **the goal of a code review is not to make it so that the code looks as if you wrote it**. Internalize that.\n\nSindre Sorhus has some strong opinions on naming. You may not agree with all of them, but at least they are enforced in code. [Check `eslint-plugin-unicorn`](https://github.com/sindresorhus/eslint-plugin-unicorn#rules).\n\n## Domain Driven Design\n\n(Aug 2019 Update) I was fortunate enough to attend a workshop by [Andrew Cassell on Domain Driven Design](https://www.youtube.com/watch?v=bgJafJI8mp8) ([slides](https://speakerdeck.com/cassell/domain-driven-design-2)) where the concept of \"Ubiquitous Language\" drives naming and I really like this concept. However some of the application examples I've seen bleed the domain all over the place whereas I really only think it matters most at the public API.\n\n## Collections of Things\n\n(Aug 2019 Update) Don't pluralize lazily, e.g. `blog.js` and `blogs.js`. This is terrible to grep especially with one name being a substring of the other. Prefer to name both items and collections visibly. This is similar to the Hungarian notation idea, but works even if you use a type system. [Tweet](https://mobile.twitter.com/swyx/status/1159462137745629185)\n\n## When all else fails... who writes the code?\n\nIf you're still spending a lot of organizational energy bickering over a name... [remember this story from Bret Taylor about how Google Maps' Satellite Mode was almost named Bird Mode.](https://mobile.twitter.com/btaylor/status/1099370172916195328)\n\n## Code Complete [Nov 2019 Edit]\n\nThe volumninous _Code Complete_ offers an entire chapter on the Power of Variable Names. This has a lot of good advice. Here are some nice examples pulled from the book:\n\n- Name length:\n  - Too long: `numberOfPeopleOnTheUsOlympicTeam`, `numberOfSeatsInTheStadium`, `maximumNumberOfPointsInModernOlympics`\n  - Too short: `n, np, ntm`\n  - Just right: `numTeamMembers`, `teamMemberCount`, `numSeatsInStadium`, `seatCount`, `teamPointsMax`, `pointsRecord`\n- \"longer names are better for rarely used variables or global variables and shorter names are better for local variables or loop variables\"\n- Using Common Opposites in Variable Names e.g. `begin/end`, `first/last`, `locked/unlocked` , `min/max`, `next/previous`\n- Loop Indexes: `i, j, k` are fine inside a loop. if used outside the loop, be more descriptive, e.g. `recordCount`\n- Status Variables: dont use flags. use enums, descriptive naming\n  - Bad: `flag = 0x1; statusFlag = 0x80; printFlag = 16; computeFlag = 0;`\n  - Better: `dataReady = true; characterType = CONTROL_CHARACTER; reportType = ReportType_Annual; recalcNeeded = false;`\n- Useful Boolean names should imply `true` or `false`:\n- `done`: Use done to indicate whether something is done. The variable can indi- cate whether a loop is done or some other operation is done. Set done to false before something is done, and set it to true when something is completed.\n- `error`: Use error to indicate that an error has occurred. Set the variable to false when no error has occurred and to true when an error has occurred.\n- `found`: Use found to indicate whether a value has been found. Set found to false when the value has not been found and to true once the value has been found. Use found when searching an array for a value, a file for an employee ID, a list of paychecks for a certain paycheck amount, and so on.\n- `success`or `ok`: Use success or ok to indicate whether an operation has been suc- cessful. Set the variable to false when an operation has failed and to true when an operation has succeeded. If you can, replace success with a more specific name that describes precisely what it means to be successful. If the program is success- ful when processing is complete, you might use processingComplete instead. If the program is successful when a value is found, you might use found instead.\n- Bad: `status`, `sourceFile`\n- Better: `statusOK`, `sourceFileAvailable`\n- acceptable - `is*` prefix. doesnt work for everything\n- stay positive - avoid double negatives! `if (!notFound)`\n- When You Should Have a Naming Convention\n  - When multiple programmers are working on a project\n  - When you plan to turn a program over to another programmer for modifica-\n    tions and maintenance (which is nearly always)\n  - When your programs are reviewed by other programmers in your organization\n  - When your program is so large that you can’t hold the whole thing in your brain at once and must think about it in pieces\n  - When the program will be long-lived enough that you might put it aside for a few weeks or months before working on it again\n  - When you have a lot of unusual terms that are common on a project and want to have standard terms or abbreviations to use in coding\n\n## More References\n\n- Naming Components: https://open-ui.org/analysis/component-matrix\n- Naming Git Branches: https://deepsource.io/blog/git-branch-naming-conventions/\n\n## Your Opinion Here!\n\nI [asked for more opinions on Twitter](https://twitter.com/swyx/status/1127648507676983296), and here are some I got:\n\n- Dan Abramov: [Longer names to discourage use](https://twitter.com/dan_abramov/status/1127664407239114752) - for context, React uses this a lot in [dangerouslySetInnerHTML](https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml) and more subtly in [getDerivedStateFromProps](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) and most famously in [DO_NOT_USE_OR YOU_WILL_BE_FIRED](https://news.ycombinator.com/item?id=11447020)\n- Jamie Wong: The [Grep Test](http://jamie-wong.com/2013/07/12/grep-test/)\n- Chris Biscardi's post on [Styles and Naming](https://www.christopherbiscardi.com/post/styles-and-naming/)\n- Ivan Babak: Use [Context-independent names](https://twitter.com/sompylasar/status/1127694272604413952)\n- b_sted: [Don't camelcase filenames](https://twitter.com/b_sted/status/1127650071393136640) for Unix compatibility\n- Danny Eck: [Mark unstable, sync and unsafe code!](https://twitter.com/EckDaniel/status/1127694055054266368)\n- Ersagun Kuruca: [More bad names](https://twitter.com/JimmyTheXploder/status/1127704565762142208): `script, callback, data, object, value, event, number, list`\n- Matthew Weeks: [Keep it Simple but Descriptive](https://twitter.com/weeksling/status/1127669880302522370)\n- Eric Bischard [recommends](https://mobile.twitter.com/httpJunkie/status/1127650526047264768) a very great talk by Kevlin Henney: [\"Giving Code a Good Name\"](https://www.youtube.com/watch?v=CzJ94TMPcD8).\n\nLast but not least, in [the mailing list](https://tinyletter.com/swyx) preview, [Massimiliano](https://massimilianomirra.com/) also recommended Joel Spolsky's [Making Wrong Code Look Wrong](https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/), which I can't help but recommend again.\n"
    },
    {
      "slug": "jamstack-og-images",
      "data": {
        "technical": true,
        "title": "Your Site's Calling Card",
        "subtitle": "Five Ways to add `og:image`s to your JAMstack site",
        "slug": "jamstack-og-images",
        "categories": [
          "Tech",
          "Blogging"
        ],
        "date": "2019-09-20T00:00:00.000Z"
      },
      "content": "\n🎉This blog now offers RSS and proper `og:image` cards!\n\n![this page's own og image](https://www.swyx.io/og_image/writing/jamstack-og-images.png)\n\nIt's relatively easy to implement RSS with [the `rss` package on npm](https://www.npmjs.com/package/rss), but no such library exists for image generation. It's worth discussing the state of the art and how you can do your own.\n\n## Table of Contents\n\n## What is `og-image`?\n\n[OpenGraph](https://ogp.me/) is an informal set of protocols first introduced by Facebook in 2010 to offer a small set of metadata that its robots could consistently scrape to present in its feed and search algorithms. These are implemented as meta tags:\n\n```html\n<html prefix=\"og: http://ogp.me/ns#\">\n  <head>\n    <title>The Rock (1996)</title>\n    <meta property=\"og:title\" content=\"The Rock\" />\n    <meta property=\"og:type\" content=\"video.movie\" />\n    <meta property=\"og:url\" content=\"http://www.imdb.com/title/tt0117500/\" />\n    <meta\n      property=\"og:image\"\n      content=\"http://ia.media-imdb.com/images/rock.jpg\"\n    />\n    ...\n  </head>\n  ...\n</html>\n```\n\nWhile SEO experts obsess over title, description, category, and other tags, images are harder to implement and less directly linkable so they may not receive as much attention. I'm not an SEO expert, so I'll refrain from explaining further, but I'll end by noting that OG tags have been [coopted by Twitter to do Twitter Cards](https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup), and then [used by Slack to do \"unfurls\"](https://medium.com/slack-developer-blog/everything-you-ever-wanted-to-know-about-unfurling-but-were-afraid-to-ask-or-how-to-make-your-e64b4bb9254), leading to a de facto standard of a mush of tags relied upon by every Internet media platform that does unfurling (which at this point, is everyone, right down to your texts and DM's in WhatsApp).\n\n![https://miro.medium.com/max/1224/1*QOMaDLcO8rExD0ctBV3BWg.png](https://miro.medium.com/max/1224/1*QOMaDLcO8rExD0ctBV3BWg.png)\n\nIt's obviously important to have the right OG tags for the right pages, so there is some investment in every framework to manage tags right. React has [`react-helmet`](https://github.com/nfl/react-helmet) (there is an [async version for SSR](https://www.npmjs.com/package/react-helmet-async)), Vue has [`vue-meta`](https://vue-meta.nuxtjs.org/), Angular ships with [the `Meta` class](https://angular.io/api/platform-browser/Meta), and [Svelte ships `svelte:head`](https://svelte.dev/tutorial/svelte-head). They all work the same: using the DOM hierarchy to establish specificity and therefore priority.\n\n## Why `og-image`?\n\nA picture is worth a thousand words, and in today's attention spans and media, they may present the only glance people give to your work before moving on to the next thing. I [said this on Twitter recently](https://mobile.twitter.com/swyx/status/1171501956415643653):\n\n> I've started caring a lot about OpenGraph images. If you want your content to spread via social media (including Slack, not just Twitter/FB/etc), **this is THE FIRST THING newcomers to your blog see**, not your actual blog. Spend the 0-2hrs sorting it out.\n\nI guess I don't have much more to add than that. `og-images` aren't just for blogs and news sites, they're your viewers' first port of call for virtually everything from ecommerce inventory pages to landing pages.\n\nApart from showing that you care about how your brand presents, you are also likely to get more attention via social media ranking algorithms and just plain adding noticeable color and taking up more space in a timeline. Not a bad investment if you intend your site to stick around for a bit!\n\nWhat's more, you probably know that this game is being played on you. But you can't help it; it works anyway!\n\n## Five Ways to `og-image`\n\n### The Lazy Way: Same Image for Everything\n\nThis method is simplest and will always work: Just pick one image that represents your site, and **use it everywhere**. On every page, regardless of the content. This way your `og-image` will always be available, with no work needed by computer or human to make sure it is available.\n\nSome great use cases for this are literal single page sites, where all your content is literally on the one page, for example [for this conference](https://reactadvanced.com):\n\n![https://reactadvanced.com/pic/og-image2.jpg](https://reactadvanced.com/pic/og-image2.jpg)\n\nHere the goal is very clear - some basic information about what it is, what you get, and the date, together with the visual branding. Very clear.\n\nHowever, apply this to a blog, or an ecommerce page, and you start to look lazy. People catch on very quickly that the image is the same everywhere, and you lose the opportunity to offer more information about your product or article or talk.\n\nStill, no matter which of the below strategies you pick, this is a good fallback strategy if others don't exist.\n\n### The Hard Way: New Image for Everything\n\nSome themes, templates and platforms, like those available with Medium and Ghost and Wordpress and [NetlifyCMS](https://www.netlifycms.org/?utm_source=swyxio&utm_medium=ogimageswyx&utm_campaign=devex), can force you to manually pick images every time. This sets up a 1:1 relationship between every image and post, and usually offers some personalization.\n\nWhile this can be nice, it greatly increases the hosting considerations and activation energy of your content creation, because now you are in the image hosting business as well, not to mention doing the manual work of picking images each time. Hosted platforms love this, because it makes your site that much harder to migrate away.\n\nImage picking has gotten a lot easier with the royalty-free ease of [Unsplash](https://unsplash.com/), which has an API that every platform now offers to make this task easier.\n\nHowever, the ease of use detracts somewhat from the intent of using `og:image`s in the first place - establishing a consistent visual identity, and conveying more information than an image that is vaguely loosely associated with some word that has some distant relationship to do with your content. If you're writing heavily technical content, or a focused series of articles, you may struggle to find fitting images.\n\nPlus, lets face it, everyone can spot a stock photo from a mile off.\n\n![https://images.unsplash.com/photo-1564376130023-5360fbb7c91b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&dpr=1&auto=format&fit=crop&w=4399&h=594&q=80%201x,%20https://images.unsplash.com/photo-1564376130023-5360fbb7c91b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&dpr=2&auto=format&fit=crop&w=4399&h=594&q=80%202x](https://images.unsplash.com/photo-1564376130023-5360fbb7c91b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&dpr=1&auto=format&fit=crop&w=4399&h=594&q=80%201x,%20https://images.unsplash.com/photo-1564376130023-5360fbb7c91b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&dpr=2&auto=format&fit=crop&w=4399&h=594&q=80%202x)\n\nSo, some people, like me, explore dynamically generated post images.\n\nThe logic has a nice parallel: after all, if we are generating our pages from data, can't we also generate our images from data too?\n\n### Generate on Request\n\nThe easy way to do this is to use Zeit's [`Open Graph Image as a Service`](https://og-image.now.sh/) program. You can fork and [deploy their code on Zeit](https://github.com/zeit/og-image), which gets you a nicely designed and fast customizable serverless service complete with a preview UI! The result then gets cached, so your serverless bills don't break the bank.\n\nThe program basically uses Puppeteer and Chromium to compose images and text in HTML, CSS, and JavaScript, and serves the screenshot:\n\n![https://og-image.now.sh/Five%20Ways%20to%20add%20%60og%3Aimage%60s%20to%20your%20JAMstack%20site.png?theme=light&md=1&fontSize=100px&images=https%3A%2F%2Fassets.zeit.co%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg](https://og-image.now.sh/Five%20Ways%20to%20add%20%60og%3Aimage%60s%20to%20your%20JAMstack%20site.png?theme=light&md=1&fontSize=100px&images=https%3A%2F%2Fassets.zeit.co%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg)\n\nThis is a wonderfully creative way to handle this problem and it works great for the Zeit properties. I would certainly recommend this for projects already using Zeit and Next.js. (As you'll see, the next two solutions are really just basic variations on this one.)\n\nThe extremely dynamic capability of this service is wonderful, but most of the time you just need a good enough image, at one or a few sizes, at the right aspect ratios (2:1), and don't mind trading off a little less dynamism for smaller API surface area...\n\n### Pregenerate On Build\n\nMany static site generators like Gatsby do their image processing at build time, which makes it easy to stick this image generation step in at that point. When you serve a pregenerated image file, there just isn't any security concern and it can be cheaper and faster, as well as more tech agnostic as it doesn't require a running server and api setup! (This is the core idea of [JAMstack](https://www.jamstack.org/?utm_source=swyxio&utm_medium=ogimageswyx&utm_campaign=devex).)\n\n[Andrew Ingram wrote a fantastic summary](https://andrewingram.net/posts/automatic-social-cards-with-gatsby/) of his approach for his beautiful, stylized cards:\n\n![https://andrewingram.net/static/874c81bf4a98cc1d237b91edb547bc65/3d60d/social-example.png](https://andrewingram.net/static/874c81bf4a98cc1d237b91edb547bc65/3d60d/social-example.png)\n\nIt's really worth a read! In particular, note the coda that much of this functionality can be had with the `gatsby-remark-social-cards` plugin.\n\nHowever, this solution doesn't work outside of Gatsby, and I also can't shake the feeling that I shouldn't need to muck around with GraphQL just to create cards from what is essentially a sitemap.\n\nGenerating the images is an expensive/slow process, especially with Gatsby's `sharp` transform, and to do it on every build also seems wasteful, especially since most of these images should stay the same from build to build. I recall that working on the image heavy Gatsby docs site used to take over 45 minutes for a build (this was a long time ago, in Gatsby v1, it should be faster today). This is expensive both in terms of build server cost as well as developer time.\n\n### Pregenerate Once\n\nI saved the best (😂) for last, but by no means am I suggesting my _implementation_ is the ideal expression of this idea. The basic gist is that if shifting work from repetitive runtime work to build time is a good idea, then maybe shifting repetitive build work from build time to write time is good too!\n\nIt turns out you can write a screenshot engine in something like [20 lines of code](https://github.com/sw-yx/swyxdotio/blob/60b088cea0439d3e2536a78dc922af3146ba40fd/screenshot-plugin/screenshot.js):\n\n```js\nconst puppeteer = require('puppeteer')\nconst path = require('path')\nmodule.exports = async function screenshot(PostArray) {\n  const browser = await puppeteer.launch()\n  const page = await browser.newPage()\n  page.setViewport({ width: 1200, height: 628 })\n  const getHtml = require('./template')\n  for (const post of PostArray) {\n    const [slug, text] = post\n    const html = getHtml({\n      text,\n      fontSize: Math.min(20, Math.max(7, Math.floor(100 / text.length))) + 'vw'\n    })\n    await page.setContent(html)\n    const filePath = path.resolve(`static/og_image/${slug}.png`)\n    require('./ensureDirectoryExistence')(filePath)\n    await page.screenshot({ path: filePath })\n  }\n  await browser.close()\n}\n```\n\nSome notes on this approach:\n\n- the key to developing your template is launching puppeteer with `headless` mode turned off (it is on by default!). This way you can develop your CSS with the browser devtools inside the puppeteer window.\n- The text that you have to render can range from \"short words\" to \"extremely super long califragilistic long words\" and if you are pregenerating then you won't really have time to adjust the font size to make it look right - the approach I settled on is to put a range on the font size between 7 and 20 `vw` units, and letting it wrap around. This doesn't solve all cases, but is good enough for most of them. I feel like more work can be done with text measurement to achieve a better solution for this.\n\nI was then able to hook up this function into my [RSS feed generation](https://github.com/sw-yx/swyxdotio/blob/60b088cea0439d3e2536a78dc922af3146ba40fd/generateRSS.js#L66) on the basis that the RSS feed should be the source of truth for which slugs and URL's I need to generate images for. This one line can be easily commented out for the most of the time that this isn't needed. In future, this workflow can be adjusted to be automated given a reliable incremental build system, but it will do for now.\n\nFinally, for one-off calls and index pages that are a special case, I wrote a [small 5 line CLI](https://github.com/sw-yx/swyxdotio/blob/60b088cea0439d3e2536a78dc922af3146ba40fd/screenshot-plugin/cli.js) that hooked into the screenshot function to generate the final few images I need.\n\n## More than just a couple hours\n\nHaving done this a couple times now, I will confess that it does take more than a couple hours to do right if you are rolling your own system and don't have convenient, existing plugins to work with for your framework. Truth in advertising! Although I feel that this process would be helped a lot more by having a CLI-and-library for doing these templates and screenshots. I've made the beginnings of one in this project - if you're keen on extracting this to be a reusable library, [get in touch!](https://twitter.com/swyx)\n\nMore things others have done [based on replies](https://twitter.com/swyx/status/1175055254360154116):\n\n- [Social generator](https://github.com/contentz-tech/social)\n- [puppeteer-social-image](https://github.com/chrisvxd/puppeteer-social-image)\n- [puppet master](https://github.com/saasify-sh/puppet-master) hosted service with saasify\n- https://www.npmjs.com/package/gatsby-plugin-printer\n- Validate your Twitter ogdata https://cards-dev.twitter.com/validator"
    },
    {
      "slug": "line-lengths",
      "data": {
        "technical": true,
        "title": "Line Lengths",
        "slug": "line-lengths",
        "subtitle": "and CSS Length Units",
        "categories": [
          "CSS",
          "Design"
        ],
        "date": "2020-01-30T00:00:00.000Z",
        "description": "Reflecting on what I have learned about CSS Units and Line Lengths"
      },
      "content": "\nYesterday I [made an observation about blog line lengths](https://twitter.com/swyx/status/1222768044767727619) that got a *really* unexpected amount of traction, and I thought I would write down what I know and learned.\n\n## What's the big deal about line length?\n\nThe [Refactoring UI](https://refactoringui.com/) guys note:\n\n> ## Keep your line length in check\n> When styling paragraphs, it’s easy to make the mistake of fitting the text to\n> your layout instead of trying to create the best reading experience.\n>\n> Usually this means lines that are too long, making text harder to read.\n>\n> For the best reading experience, make your paragraphs wide enough to fit\n> between 45 and 75 characters per line. The easiest way to do this on the\n> web is using em units, which are relative to the current font size. A width of\n> 20-35em will get you in the right ballpark.\n\nFor the totally uninitiated: by default, content on a page goes from the extreme left of the screen to the extreme right of the screen. This just \"looks ugly\", which is an unscientific term at best, but one plausible justification you can hang your hat on is that eyes get tired scanning left/right and prefer going up/down with scrolling.\n\nThe usual advice, from multiple sources, is to **aim for about 45-80 characters per line**, which works out to be 9-14 words per line. Of course this applies for blogs more than other types of sites and apps, but it is still applicable for other forms of site layout like landing page copy.\n\nIf you're design blind like me, you won't immediately believe how important this is. I went for 80 characters at first, but discovered that It feels good going as far down as 50.\n\n## CSS Units\n\nSo given the above advice, it seems an obvious immediate win to apply `max-width: 69ch` to your blog content blocks. However I found that most people don't do this! Usually people seem to prefer specifying absolute pixels, or (rarer) using `%`'s of parent width, or ([if you're Basecamp](https://twitter.com/swyx/status/1222980190260744193?s=20)) spanning the middle sections of a grid system.\n\nI found that a big reason this happens is many people don't seem to know the `ch` unit even exists! There are actually like [a dozen length units in CSS](https://css-tricks.com/the-lengths-of-css/), most of them not as useful.\n\nSome people argued for `em`s over `ch`, on the basis that `ch` [can be unpredictable](https://twitter.com/nystudio107/status/1222769390929707009) as it based on the width of the `0` glyph. The counterargument is `ch` is apparently closer to the average letter length, and indeed you can easily verify this is so. `70ch` is something like `35-40em`'s. If you're really aiming for 70 chars per line anyway, which is more intuitive to use? However, there are some that feel [intuition runs the other way](https://twitter.com/transitive_bs/status/1222773214193094661?s=20) in the bigger context of overall CSS architecture.\n\nThere are other approaches. Andy Bell and others use [the \"root `rem` plus `vw` viewport unit\" trick](https://twitter.com/souporserious/status/1222904538333532161). Basecamp [ONLY uses CSS grid](https://twitter.com/swyx/status/1222980190260744193?s=20).\n\nI don't ultimately think it really matters what units you use - in the end the browser is going to convert it to pixels for you anyway and you just have to come up with something your readers can live with. If the rest of the elements in your design depend on your content width being [pixel perfect](https://twitter.com/_brotzky/status/1222934466638692352) (e.g. [wanting header and footer to line up](https://twitter.com/JoshWComeau/status/1222851328197758982) exactly with text) then you might have to use `px`, but of course you could equally do the same effect with any other unit. \n\n\nI do think it's easier to use `px` if you design in a design tool or [on a grid](https://twitter.com/wolfr_2/status/1222773273462824960), and `ch` if you \"design in the browser\" like I do. Designs with [multiple fonts](https://twitter.com/kossnocorp/status/1222774667448070146) may also be inconsistent on what the `ch` means.\n\n## Managing Breakouts\n\nOften in a blog you will want a consistent line length, but have some elements like images and code blocks \"break out\" of your content line to break the monotony and add emphasis. [Dave Geddes](https://twitter.com/geddski/status/1222772485570957314) has [a wonderful approach mixing CSS Grid and minmaxing the `ch` unit](https://gedd.ski/post/article-grid-layout/).\n\n## Magic Numbers\n\nI know this is lazy, but I like to get real life magic numbers to try on my own things :)\n\n- Leigh likes `33em`: https://twitter.com/ExcitedLeigh/status/1223007439760412672?s=20\n- Patrick likes `44em`: https://twitter.com/concreteniche/status/1222774565643751425?s=20\n- This person likes `38rem`: https://jrl.ninja/etc/1/\n- [Tachyons](https://github.com/tachyons-css/tachyons/blob/5cd259d0b2f75a472f6febdcc0e5b558a22a01af/src/_typography.css#L16-L18) uses a spartan `30rem` as base, with `34rem` and `20rem` as wide and narrow variants.\n- [Tailwind](https://tailwindcss.com/docs/max-width) has a wide range from `20rem` to `72rem`. `28rem` is medium.\n- [Bootstrap's Containers](https://getbootstrap.com/docs/4.0/layout/grid/) use media queries and exact widths:\n  - Extra small devices (<768px): width: auto (or no width)\n  - Small Devices (≥576px): width: `540px`\n  - Medium Devices (≥768px): width: `720px`\n  - Larger Devices (≥992px): width: `960px`\n  - XLarge Devices (≥1200px): width: `1140px`\n- what else?\n\n[Preet](https://twitter.com/preetster/status/1263361587584196609?s=20) also pointed me to this study on [The Effects of Line Length on Reading Online News](https://www.researchgate.net/publication/253615156_The_Effects_of_Line_Length_on_Reading_Online_News).\n\n## Try it yourself!\n\nYou can now edit line lengths of this blog. \n\nIts line length starts off at a nice `69ch` but if you hit \"change theme\" and opt to customize, you can edit it to whatever line length you like. Of course, you could always do this in browser devtools, but now you can do it on mobile too (where, admittedly, max width doesnt actually matter 😅).\n\nThis is still a WIP experimental feature (I still have to add persistence and maybe auth) but it has been a fun toy to play around with to make a site your own."
    },
    {
      "slug": "api-design-modifying-defaults",
      "data": {
        "technical": true,
        "title": "API Design: Modifying Defaults",
        "slug": "api-design-modifying-defaults",
        "categories": [
          "Tech",
          "API Design"
        ],
        "date": "2019-10-10T00:00:00.000Z"
      },
      "content": "\n> This is a quick note on a API Design. I hope to make this an ongoing series.\n\n## Problem Statement\n\nOften you want to provide a default preset for user convenience:\n\n```js\n// library-land\nconst defaultExtensions = ['.md', '.mdx', '.markdown']\nexport function myPlugin({ extensions = defaultExtensions }) {\n  // use extensions\n}\n```\n\nThe cost of this is that the user has to retype whatever is in the default if they just want to add something:\n\n```js\n// user-land\nconst myConfig = [\n  myPlugin({ extensions: ['.md', '.mdx', '.markdown', '.mdsvex'] })\n]\n```\n\nThis is a trivial example so it doesnt seem like a big lift, but consider a more complicated set of defaults:\n\n```js\n// library-land\n// complex set of imports and code for getExt1/2/3()\nexport async function myPlugin({ extensions }) {\n  if (!extensions) {\n    extensions = await Promise.all([getExt1(), getExt2(), getExt3()])\n  }\n  // use extensions\n}\n```\n\nNow the user has to do:\n\n```js\n// user-land\n// complex set of imports and code for getExt1/2/3()\n// unavoidable imports and code for thingIWantedToAdd()\n;(async function() {\n  let extensions = await Promise.all([\n    getExt1(),\n    getExt2(),\n    getExt3(),\n    thingIWantedToAdd()\n  ])\n  const myConfig = [await myPlugin({ extensions })]\n})()\n```\n\n## Bad Solution\n\nI was recently tempted to save the user some of that pain by providing a modifier API instead of a replacement API:\n\n```js\n// library-land\n// complex set of imports and code for getExt1/2/3()\nexport async function myPlugin({ modifyExtensions }) {\n  let extensions = await Promise.all([getExt1(), getExt2(), getExt3()])\n  if (modifyExtensions) extensions = await modifyExtensions(extensions)\n  // use extensions\n}\n```\n\nso you can append on to it cheaply:\n\n```js\n// user-land\n// NO NEED for imports and code for getExt1/2/3()\n// unavoidable imports and code for thingIWantedToAdd()\nconst myConfig = [\n  myPlugin({\n    async modifyExtensions(defaultExtensions) {\n      return [...defaultExtensions, await thingIWantedToAdd()]\n    }\n  })\n]\n```\n\nHowever inserting in-place can be hard (made easier with `immer`), and you're not really saving the user from having to think about what's included in the defaultExtensions.\n\nThe word \"modify\" also requires more documentation and is a place for users to shoot themselves in the foot with expensive operations that may be called multiple times\n\n## Better Solution\n\nExport BOTH the function and its defaults and defer execution of async effects:\n\n```js\n// library-land\nexport const defaultExtensions = [getExt1(), getExt2(), getExt3()]\nexport function myPlugin({ extensions = defaultExtensions }) {\n  let usedExtensions = await Promise.all(extensions)\n  // use extensions\n}\n```\n\nso they can be freely and cheaply combined:\n\n```js\n// user-land\n// NO NEED for imports and code for getExt1/2/3()\n// unavoidable imports and code for thingIWantedToAdd()\nimport { defaultExtensions, myPlugin } from 'my-library'\nconst myConfig = [\n  myPlugin({\n    extensions: [...defaultExtensions, thingIWantedToAdd()]\n  })\n]\n```\n\nThis way, it is pretty intuitive how to supply the array instead of modify the array, and the surface area of execution is smaller.\n\nThat's where I am at right now in terms of plugin design.\n"
    },
    {
      "slug": "moving-to-novela",
      "data": {
        "technical": true,
        "title": "Using Novela by Narative (updated)",
        "author": "swyx",
        "date": "2019-08-04T00:00:00.000Z",
        "banner": "./assets/gatsby-theme-novela-hero.jpg",
        "categories": [
          "Tech"
        ],
        "slug": "moving-to-novela",
        "excerpt": "With the growing community interest in Gatsby, we hope to create more resources that make it easier for anyone to grasp the power of this incredible tool."
      },
      "content": "\n> ⚠️ Update: I have moved off of Novela because I discovered enough differences between my needs and their design goals that it was no longer worth basing on them. Instead I now maintain my own theme at https://github.com/sw-yx/gatsby-theme-dev-blog\n\nMy first post using `@narative/gatsby-theme-novela`. Novela is built by the team at [Narative](https://narative.co), and built for everyone that loves the web.\n\nI livestreamed the 2hr process of moving the blog over here: https://www.youtube.com/watch?v=TLJirjROqU8\n\nGithub: https://github.com/sw-yx/swyxdotio\n"
    },
    {
      "slug": "naked-promises",
      "data": {
        "technical": true,
        "title": "Why Naked Promises are Not Safe For Work",
        "slug": "naked-promises",
        "categories": [
          "Tech"
        ],
        "begun": "2019-07-15T00:00:00.000Z",
        "date": "2019-08-14T00:00:00.000Z",
        "canonical": "https://www.freecodecamp.org/news/naked-promises-are-not-safe-for-work/"
      },
      "content": "\n_Published on [FreeCodeCamp's Developer News](https://www.freecodecamp.org/news/naked-promises-are-not-safe-for-work/)_\n\nThis article goes through my personal journey of discovery and struggle adopting the conventional wisdom as it pertains to asynchronous work on the frontend. With any luck, you will come away with at least a deeper appreciation of 3 tricky cases to handle when crossing the synchronous to asynchronous boundary. And we'll possibly even conclude that you will never want to manually account for these edge cases yourself ever again.\n\nMy examples are in React, but I believe they are universal principles that have parallels in all frontend apps.\n\n## What is a \"Naked Promise\" anyway?\n\nTo do anything interesting in our app, we will probably use an asynchronous API at some point. In JavaScript, Promises have overtaken callbacks to be the asynchronous API of choice (especially as every platform has come to accept `async`/`await`). They have even become part of the \"Web platform\" - here's a typical example using the Promise-based `fetch` API in all modern browsers:\n\n```js\nfunction App() {\n  const [msg, setMsg] = React.useState('click the button')\n  const handler = () =>\n    fetch('https://myapi.com/')\n      .then((x) => x.json())\n      .then(({ msg }) => setMsg(msg))\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>message: {msg}</p>\n        <button onClick={handler}> click meeee</button>\n      </header>\n    </div>\n  )\n}\n```\n\nHere our button's `handler` function returns a \"naked\" Promise - it isn't wrapped by anything, it is just invoked outright so it can do fetch data and set state. This is an extremely common pattern taught in all introductions. This is fine for demo apps, however in the real world users often run into many edge cases this pattern conveniently forgets to account for.\n\n## Promises Fail: The Error State\n\nPromises fail. It is too easy to only code for the \"happy path\" where your network is always working and your API always returns a successful result. Most devs are all too familiar with the uncaught exceptions that arise only in production that make your app seem like it didn't work or is stuck in some kind of loading state. There are [ESlint rules to ensure you write `.catch`](https://github.com/xjamundx/eslint-plugin-promise/blob/HEAD/docs/rules/catch-or-return.md) handlers on your promises.\n\nThis only helps for promises you chain with a `.then`, but doesn't help when passing a promise to a library you don't control, or when you just call the promise outright.\n\nEither way, ultimately the responsibility for displaying the error state will fall on you, and will look something like this:\n\n```js\nfunction App() {\n  const [msg, setMsg] = React.useState('click the button')\n  const [err, setErr] = React.useState(null)\n  const handler = () => {\n    setErr(null)\n    fetch('https://myapi.com/')\n      .then((x) => x.json())\n      .then(({ msg }) => setMsg(msg))\n      .catch((err) => setErr(err))\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>message: {msg}</p>\n        {err && <pre>{err}</pre>}\n        <button onClick={handler}>click meeee</button>\n      </header>\n    </div>\n  )\n}\n```\n\nWe now have two states to handle for every asynchronous operation in our app!\n\n## Promises in Progress: The Loading State\n\nWhen pinging your APIs on your local machine ([for example, with Netlify Dev](https://alligator.io/nodejs/solve-cors-once-and-for-all-netlify-dev/)), it is pretty common to get rapid responses. However, this ignores the fact that API latency may be a good deal slower in real world, especially mobile, environments. When the button is clicked, the promise fires, however there is no visual feedback at all in the UI to tell the user that the click has been registered and the data is inflight. So users often click again, in case they misclicked, and generate yet more API requests. This is a terrible user experience and there is no reason for writing click handlers this way except that it is the default.\n\nYou can make your app more responsive (and less frustrating) by offering some form of loading state:\n\n```js\nfunction App() {\n  const [msg, setMsg] = React.useState('click the button')\n  const [loading, setLoading] = React.useState(false)\n  const handler = () => {\n    setLoading(true)\n    fetch('https://myapi.com/')\n      .then((x) => x.json())\n      .then(({ msg }) => setMsg(msg))\n      .finally(() => setLoading(false))\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>message: {msg}</p>\n        {loading && <pre>loading...</pre>}\n        <button onClick={handler} disabled={loading}>\n          click meeee\n        </button>\n      </header>\n    </div>\n  )\n}\n```\n\nWe now have **three** states to handle for every asynchronous operation in our app: result, loading, and error state! Oy vey.\n\n## Promises are dumb: The Component's State\n\nOnce promises fire off, they cannot be canceled. This was a [controversial decision](https://medium.com/@benlesh/promise-cancellation-is-dead-long-live-promise-cancellation-c6601f1f5082) at the time, and while platform specific workarounds like [abortable fetch](https://developers.google.com/web/updates/2017/09/abortable-fetch) exist, it's clear we will never get cancelable promises in the language itself. This causes issues when we fire off promises and then no longer need them, for example when the component it is supposed to update has unmounted (because the user has navigated somewhere else).\n\nIn React, this causes a development-only error like:\n\n```bash\nWarning: Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.\n\n# or\n\nWarning: Can’t call setState (or forceUpdate) on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\n```\n\nYou can avoid this memory leak by tracking the mount state of a component:\n\n```js\nfunction App() {\n  const [msg, setMsg] = React.useState('click the button')\n  const isMounted = React.useRef(true)\n  const handler = () => {\n    setLoading(true)\n    fetch('https://myapi.com/')\n      .then((x) => x.json())\n      .then(({ msg }) => {\n        if (isMounted.current) {\n          setMsg(msg)\n        }\n      })\n  }\n  React.useEffect(() => {\n    return () => (isMounted.current = false)\n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>message: {msg}</p>\n        <button onClick={handler}>click meeee</button>\n      </header>\n    </div>\n  )\n}\n```\n\nWe've used a Ref here, as [it is closer to the mental model of an instance variable](https://medium.com/@pshrmn/react-hook-gotchas-e6ca52f49328), but you won't notice too much of a difference if you `useState` instead.\n\nLongtime React users will also remember that [isMounted is an antipattern](https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html), however tracking `_isMounted` as an instance variable is still recommended if you don't use cancellable promises. (Which is ALL. THE. TIME.)\n\nFor those keeping count, we're now at **four** states needing to be tracked for a single async operation in a component.\n\n## Solution: Just Wrap It\n\nThe problem should be pretty clear by now:\n\nIn a simple demo, \"naked\" promises work fine.\n\nIn a production situation, you're going to want to implement all these error handling, loading, and mounting tracker states. Again. And again. And again.\n\nSounds like a good place to use a library, doesn't it?\n\nFortunately, quite a few exist.\n\n`react-async`'s `useAsync` hook lets you pass a `promiseFn`, together with several handy [options](https://www.npmjs.com/package/react-async#options) to add callbacks and other advanced usecases:\n\n```js\nimport { useAsync } from 'react-async'\n\nconst loadCustomer = async ({ customerId }, { signal }) => {\n  const res = await fetch(`/api/customers/${customerId}`, { signal })\n  if (!res.ok) throw new Error(res)\n  return res.json()\n}\n\nconst MyComponent = () => {\n  const { data, error, isLoading } = useAsync({ promiseFn: loadCustomer, customerId: 1 })\n  if (isLoading) return 'Loading...'\n  if (error) return `Something went wrong: ${error.message}`\n  if (data)\n    return (\n      <div>\n        <strong>Loaded some data:</strong>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </div>\n    )\n  return null\n}\n```\n\nIt also includes a handy `useFetch` hook you can use in place of the native `fetch` implementation.\n\n`react-use` also offers [a simple `useAsync` implementation](https://github.com/streamich/react-use/blob/master/docs/useAsync.md), where you just pass in a promise (aka `async` function):\n\n```js\nimport { useAsync } from 'react-use'\n\nconst Demo = ({ url }) => {\n  const state = useAsync(async () => {\n    const response = await fetch(url)\n    const result = await response.text()\n    return result\n  }, [url])\n\n  return (\n    <div>\n      {state.loading ? (\n        <div>Loading...</div>\n      ) : state.error ? (\n        <div>Error: {state.error.message}</div>\n      ) : (\n        <div>Value: {state.value}</div>\n      )}\n    </div>\n  )\n}\n```\n\nLastly, Daishi Kato's [`react-hooks-async`](https://github.com/dai-shi/react-hooks-async) also offers a very nice `abort` controller for any promises:\n\n```js\nimport React from 'react'\n\nimport { useFetch } from 'react-hooks-async'\n\nconst UserInfo = ({ id }) => {\n  const url = `https://reqres.in/api/users/${id}?delay=1`\n  const { pending, error, result, abort } = useFetch(url)\n  if (pending)\n    return (\n      <div>\n        Loading...<button onClick={abort}>Abort</button>\n      </div>\n    )\n  if (error)\n    return (\n      <div>\n        Error: {error.name} {error.message}\n      </div>\n    )\n  if (!result) return <div>No result</div>\n  return <div>First Name: {result.data.first_name}</div>\n}\n\nconst App = () => (\n  <div>\n    <UserInfo id={'1'} />\n    <UserInfo id={'2'} />\n  </div>\n)\n```\n\nYou can also choose to [use Observables](https://medium.com/@benlesh/promise-cancellation-is-dead-long-live-promise-cancellation-c6601f1f5082), either by wrapping your Promise in one or just using them outright.\n\nIn any case, you can see the emergent pattern that **you'll always want to wrap your promises** to use them safely in a production environment. At a meta-level, what's going on here is JavaScript lets you call both synchronous and asynchronous code with the exact same API, which is an unfortunate design constraint. It means that we need wrappers to safely translate asynchronous execution to synchronous variables we care about, especially in an immediate-mode rendering paradigm like React. We have to choose to either write these ourselves every time, or adopt a library.\n\nIf you have any further comments and edge cases that I haven't thought of, please [get in touch!](https://twitter.com/swyx)\n"
    },
    {
      "slug": "narrow-waists",
      "data": {
        "technical": true,
        "title": "Narrow Waists",
        "subtitle": "Taming Abstraction Explosion",
        "slug": "narrow-waists",
        "categories": [
          "Tech"
        ],
        "date": "2019-11-10T00:00:00.000Z"
      },
      "content": "\nWhen talking about \"Narrow Waists\" I should clarify that I'm only referring to the term from the somewhat obscure \"Internet Architecture\" model of the different technology layers ([my notes here](https://dev.to/swyx/networking-essentials-architecture-and-principles-2g5e)):\n\n![https://res.cloudinary.com/practicaldev/image/fetch/s--y7YIZZVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.slideplayer.com/24/7320353/slides/slide_25.jpg](https://res.cloudinary.com/practicaldev/image/fetch/s--y7YIZZVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.slideplayer.com/24/7320353/slides/slide_25.jpg)\n\nI guess depending on your background it's either obscure or really archaic. I'd love a better name for it, but haven't come across one so am sticking to this for now.\n\n## Real Life Analogy\n\nI'm spending all day today transiting between three cities (the return leg of one trip and the outbound leg of the next). This is a surprisingly complicated logistical maneuver. Here are the chain of events that have to happen:\n\n- Check out of my hotel\n- Get from hotel to airport\n- Check into airline\n- Get through security to the airline gate\n- Land at destination (if I checked bags, I'd have to go pick them up)\n- Get from airport to home\n- (do misc stuff at home)\n- Get from home to airport\n- Check into airline\n- Get through security to the airline gate\n- Land at destination\n- Get from airport to hotel\n- Check in to hotel\n\nI have to do this all on time, or downstream dependencies are ruined (including beyond this immediate list of events). Yet there is very little guidance to doing it right apart from the raw cost of a mistake. Checking out of a hotel is as simple as returning the keycards - they couldn't care less where I head to next, or whether I'm checking out on time. I can take any number of transportation options to the airport - the airport doesn't care. When I check in to the airline, it's on me to make it through security and in general show up in time for boarding - if I miss it, the airline doesn't care apart from issuing a \"last call\".\n\nBut also notable is the _lack_ of some options. There is no first party \"integrated\" option where the hotel kicks me out on time with scheduled transportation to get in to the airport. Of course there are third party tour groups and concierges that do these, but the enforcement is weak. And unless you have a private flight, there is no getting around airport security. The Airport is the \"narrow waist\" everything else in the chain must work towards.\n\n## Why Narrow Waists are Underrated\n\nTechnology is layer upon layer of abstraction. This could be considered extremely wasteful.\n\nHowever, while there are convincing arguments (like [Jonathan Blow's](https://www.youtube.com/watch?v=pW-SOdj4Kkk)) for being \"FULL stack\", most mortal humans will never know it all, and historical defaults are often bad for modern usecases, so abstractions are important.\n\nSo we aren't 100% pro abstraction, nor are we 100% anti abstraction either. It's nice to acknowledge extremes, but I'd like more rules focusing on the middle cases which we deal with most of the time anyway. That's where narrow waists come in (I'll assume you've read my notes above, more info [here](https://www.sciencedirect.com/topics/computer-science/internet-architecture) and [here](https://named-data.net/project/execsummary/)).\n\nThe problem with abstraction layers is combinatorial explosion. Each combination bears \"[impedance mismatch](https://devblogs.microsoft.com/oldnewthing/20180123-00/?p=97865)\", which is engineer-speak for \"abstraction I don't like\". Abstractions leak all the time; there is an explicit cost in terms of hooking things up, and implicit costs in terms of edge cases, dependency management/upgrade/maintenance costs and decision fatigue. Individually, each abstraction might bring enough value to overcome its costs. However the combinatorics of M x N x O x P abstractions in each layer is an externality weighing down the entire ecosystem.\n\nSo a \"narrow waist\" intentionally keeps one or more of the middle layers small. This allows for two things:\n\n- **the marketplace effect**: lower and upper layers can specialize and optimize to that narrow waist, to the point that they don't have to worry about the existence of other layers on the other side\n- **focus**: the concentration of resources on optimizing the specific technology at the waist to make it the best it can be, since there is little other choice\n\nAnother aspect of \"narrow waists\" are the typically very limited nature that frustrates users. Narrow waists often benefit from \"Worse is Better\" type software dynamics. Often you hear people proposing radical new alternatives that would solve the problems of the incumbent technology. These proposals sound great, but are unable to overcome the network effect of the incumbent and fail to gain traction. This is a trademark sign of a narrow waist existing (or a normal waist narrowing).\n\n## Types of Narrow Waists\n\nI don't have a ton of examples for you as I am just writing up these thoughts, but I will revisit with more examples in future:\n\n- **Containers**: containers are the classic narrow waist in the physical world. I won't repeat the superlative descriptions of their impact, but will also note their endearing analogues in software.\n- **Roads**: every vehicle can travel faster on roads (particularly highways) because we have a social pact that things are allowed to travel faster there\n- **Language**: every person can communicate with others around them if they speak the same language. A \"lingua franca\" superlanguage can make international trade and collaboration much smoother\n- **Newspapers/Yellow Pages**: for a period of time, they were the narrow waists for getting information, getting news, connecting with neighbors, looking up contact information\n- **Money**: We prefer to use currency over barter trade [because of their moneyness](https://en.wikipedia.org/wiki/Moneyness), while we hate reducing everything to a single value, it works remarkably efficiently for a large swathe of our economy (and is terrible for all the externalities it doesn't account for, and the free licence it grants to government fiat)\n- **Specs and Protocols**: narrow waists don't have to be tangible or functional. A spec isn't core functional code, but describes how a protocol or interface should work. There can then be multiple implementations that fit or extend the spec, and they can all benefit from tooling or counterparts that are written for the ecosystem instead of for each implementation.\n  - **GraphQL**: In this category I like how the GraphQL spec has helped invisibly coordinate different parts of the GraphQL ecosystem for overall benefit. I dont have direct experience but I'm told Python typehints also have a spec-like behavior with multiple major implementations which has been very healthy for that ecosystem.\n  - **Email**: the [IMAP and SMTP](https://www.socketlabs.com/blog/smtp-or-imap/) protocols make email both universally deliverable and universally accessible by any client\n  - **RSS and Podcasts**: ditto\n  - **SMS**: ditto, any phone can receive and read SMS\n  - **BGP** the announcement process is decentralized and works as long as each AS meets specs\n    - as a distributed system, this isn't without controversy by any means, there are frequent [country-scale incidents of BGP hijacking](https://en.wikipedia.org/wiki/BGP_hijacking#Public_incidents) and [irresponsible implementations can screw up innocent participants](https://blog.cloudflare.com/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/)\n  - **x86 instruction set architecture**: any processor that implemented x86 could benefit from firmware/operating systems that speak it - https://a16z.com/2020/04/24/a16z-podcast-the-narrow-waist-of-the-internet/ 26 mins in\n  - **Operating systems**: the three major systems - windows, linux, freebsd (macos) - make it so that programs that operate on them dont usually care about the underlying hardware, and the underlying hardware just needs to be able to support those OSes to support those end user software\n\n## When do they die?\n\nQuite relevant is the Newspaper/Yellow Pages example - Narrow Waists seem to have a deadlock dual network effect going on that is quite unbreakable, but nothing lasts forever. When do Narrow Waists fall?\n\n## Extra Notes\n\n- Ben Thompson on [Integration and Monopoly](https://stratechery.com/2019/integration-and-monopoly/) (MSFT vs AAPL + GOOGL)\n  - integration provides for a superior user experience\n  - integration maximizes the likelihood of success for new products\n  - integration is incredibly profitable because it is, from a money-making perspective, a monopoly: Apple devices are the only ones that run iOS.\n- Marshall McLuhan: [\"First we shape our tools, then our tools shape us\"](https://twitter.com/david_perell/status/1216907743665278977?s=20)\n- Cory Doctorow and Joe Betts-Lacroix on [Adversarial Interoperability](https://blog.ycombinator.com/cory-doctorow-and-joe-betts-lacroix-on-adversarial-interoperability/)\n  - if people dont let you interop, you do it anyway\n  - If you remember, there were a couple of moments in, say, Mac OS's history where adversarial interoperability was totally pivotal. At one point, Microsoft had not just dominance in the operating system market and the applications market, but it was establishing dominance in the local networking market, intranets.\n  - They had a product called SMB that was a proprietary networking protocol. And although they made clients for SMB for other platforms, they were deliberately very poor so that those systems would always be second class citizens on the office network. It was really bad for Mac systems. It was really bad for GNU/Linux and other Unixes. And it really sold a hell of a lot of Microsoft systems. And so very slowly but surely, everything that wasn't on Microsoft OS was being squeezed out of the office LAN. And this Australian grad student used a protocol analyzer to capture enough SMB traffic that he was able to replicate SMB. He released it as free opensource software. He called it Samba. It attracted a developer community and became kind of a gold standard, where now it's bundled in with everything you use. It's just part of the standard Linux distro, and it's in Mac OS and even in mobile platforms. They did that even though Microsoft didn't want them to. Apple then internally produced another set of adversarial interoperable tools that were really important in the mid 2000s when Microsoft dominance of the Office market, of the Office suite market was really threatening Mac's ability to collaborate within those environments. Microsoft's versions for the Mac always lagged the Microsoft versions. The documents weren't really compatible. Excuse me. Apple reverse-engineered Microsoft's file formats. They cloned them, and they made a new suite called the iWork suite. They did this, again, without Microsoft's cooperation and in defiance of Microsoft's marketing strategy. In so doing, they were able to make Macs first class citizens on the LAN and in the office environment. In both cases, they were able to do this because there were very few legal recourses available to dominant firms that had taken over their field. Software patents were rare and thin. The Computer Fraud and Abuse Act, which is this 1986 anti-hacking law that Ronald Reagan signed into law in a panic after he watched Matthew Broderick in WarGames. I'm not making that up.\n"
    },
    {
      "slug": "netlify-dev-cors",
      "data": {
        "technical": true,
        "title": "Solve CORS once and for all with Netlify Dev",
        "slug": "netlify-dev-cors",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "date": "2019-06-28T00:00:00.000Z",
        "canonical": "https://alligator.io/nodejs/solve-cors-once-and-for-all-netlify-dev/"
      },
      "content": "\n_Published on [Alligator.io](https://alligator.io/nodejs/solve-cors-once-and-for-all-netlify-dev/)_\n\n## Access-Control-Allow-Headers and CORS\n\nSay you're a budding young (or young-at-heart!) frontend developer. You'd really love to smush together a bunch of third party APIs for your next Hackathon project. This API looks great: <https://icanhazdadjoke.com/api>! We'll build the next great Dad Joke app in the world! Excitedly, you whip up a small app (these examples use React, but the principles are framework agnostic):\n\n```js\nfunction App() {\n  const [msg, setMsg] = React.useState('click the button')\n  const handler = () =>\n    fetch('https://icanhazdadjoke.com/', { headers: { accept: 'Accept: application/json' } })\n      .then((x) => x.json())\n      .then(({ msg }) => setMsg(msg))\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>message: {msg}</p>\n        <button onClick={handler}> click meeee</button>\n      </header>\n    </div>\n  )\n}\n```\n\nYou excitedly `yarn start` to test your new app locally, and...\n\n```bash\nAccess to fetch at 'https://icanhazdadjoke.com/' from origin 'http://localhost:3000' has been blocked by CORS policy: Request header field accept is not allowed by Access-Control-Allow-Headers in preflight response.\n```\n\n_Oh no_, you think, _I've seen this before but how do I fix this again?_\n\nYou google around and find [this browser plugin](https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9) and [this serverside fix](https://daveceddia.com/access-control-allow-origin-cors-errors-in-react-express/#best-cors-header-requires-server-changes) and [this way too long MDN article](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) and its all much too much for just a simple API request. First of all, you don't have control of the API, so adding a CORS header is out of the question. Second of all, this problem is happening because you're hitting an `https://` API from `http://localhost`, which doesn't have SSL, so the problem could go away once you deploy onto an `https` enabled domain, but that still doesn't solve the local development experience. Last of all, you just wanted to get something up and running and now you're stuck googling icky security stuff on step 1.\n\nSuper frustrating. Now that [more and more of the web is HTTPS by default](https://transparencyreport.google.com/https/overview?hl=en&time_os_region=chrome-usage:1;series:time;groupby:os&lu=load_os_region&load_os_region=chrome-usage:1;series:page-load;groupby:os), you're just going to run into this more and more as you work on clientside apps (one reason server-side frameworks actually don't even face CORS problems because they are run in trusted environments).\n\n## Netlify Dev, the local proxy solution\n\nIf you've looked around long enough you'll notice that CORS is a browser protection that completely doesn't apply if you just made the request from a server you control. In other words, spin up a proxy server and all your problems go away. The only problem has been spinning up this proxy has been too hard and too costly. And that's just for local dev; the deployed experience is totally different and just adds more complexity to the setup.\n\nFor the past few months I've been working on Netlify Dev, which aims to be a great proxy server for exactly this kind of usecase. It comes embedded in the Netlify CLI, which you can download:\n\n```bash\nnpm i -g netlify-cli\n```\n\nNow in your project, if it is [a popular project we support like create-react-app, Next.js, Gatsby, Vue-CLI, Nuxt and so on](https://github.com/netlify/netlify-dev-plugin/tree/master/src/detectors), you should be able to run:\n\n```bash\n# provide a build command and publish folder\n# specific to your project,\n# create a Netlify site instance, and\n# initialize netlify.toml config file if repo connected to git remote\nnetlify init # or `ntl init`\n\n# start local proxy server\nnetlify dev # or `ntl dev`\n```\n\nAnd you should see the proxy server run on `localhost:8888` if that port is available.\n\nIf your project isn't supported, [you can write and contribute your own config](https://www.netlify.com/blog/2019/04/24/zero-config-yet-technology-agnostic-how-netlify-dev-detectors-work/), but it should be a zero config experience for the vast majority of people.\n\nAs of right now it is a local proxy server that just blindly proxies your project, nothing too impressive. Time to spin up a serverless function!\n\n## Creating a Netlify Function\n\nAt this point you should have a [`netlify.toml`](https://www.netlify.com/docs/netlify-toml-reference/) file with a `functions` field. You can hand write your own if you wish, but it should look like this:\n\n```toml\n[build]\n  command = \"yarn run build\"\n  functions = \"functions\"\n  publish = \"dist\"\n```\n\nYou can configure each one of these to your needs, just [check the docs](https://www.netlify.com/docs/netlify-toml-reference/). But in any case, now when you run\n\n```bash\nnetlify functions:create\n```\n\nthe CLI shows you the list of function templates. Pick `node-fetch` and it will scaffold a new serverless function for you in `/functions/node-fetch` by default, including installing any required dependencies. Have a look at the generated files, but the most important one will be `functions/node-fetch/node-fetch.js`. By convention the folder name must match the file name for the function entry point to be recognized.\n\nGreat, so we now have a serverless Node.js function making our call to the API. The only remaining thing to do is to modify our frontend to ping our function proxy instead of directly hitting the API:\n\n```js\nconst handler = () =>\n  fetch('/.netlify/functions/node-fetch', { headers: { accept: 'Accept: application/json' } })\n    .then((x) => x.json())\n    .then(({ msg }) => setMsg(msg))\n```\n\n## Getting rid of CORS in local development\n\nNow when we run the proxy server again:\n\n```bash\nnetlify dev # or ntl dev\n```\n\nAnd head to the proxy port (usually `http://localhost:8888`), and click the button...\n\n```bash\nmessage: Why can't a bicycle stand on its own? It's two-tired.\n```\n\nFunny! and we can laugh now that we have got rid of our CORS issues.\n\n## Deploying and Getting rid of CORS in production\n\nWhen deploying, we lose the local proxy, but gain the warm embrace of the production environment, which, [by design](https://www.netlify.com/blog/2019/04/09/netlify-dev--our-entire-platform-right-on-your-laptop/), is going to work the exact same way.\n\n```bash\nnpm run build ## in case you need it\nnetlify deploy --prod ## this is the manual deploy process\n```\n\nAnd head to the deployed site (run `netlify open:site`).\n\n> Note: if you are deploying your site via continuous deployment from GitHub, GitLab or BitBucket, you will want to modify your `netlify.toml` build command to install function dependencies:\n\n```toml\n[build]\n  command = \"yarn build && cd functions/node-fetch && yarn\"\n  functions = \"functions\"\n  publish = \"dist\"\n```\n\nNow you know how to spin up a function to proxy literally any API, together with using confidential API keys (either hardcoded, although don't do this if your project is open source, or as [environment variables](https://www.netlify.com/docs/continuous-deployment/#environment-variables)) that you don't want to expose to your end user, in minutes. This helps to mitigate any production CORS issues as well, although those are more rare.\n\nIf you have simple endpoints and files to proxy, you may also choose to use [Netlify Redirect Rewrites](https://www.netlify.com/docs/redirects/#proxying) to accomplish what we just did in one line, however it is of course less customizable.\n\nThat's all there is to solving your CORS problems once and for all! Note that Netlify Dev is still in beta, if you ran into any hiccups or have questions, [please file an issue](https://github.com/netlify/netlify-dev-plugin/)!\n"
    },
    {
      "slug": "netlify-env-vars",
      "data": {
        "technical": true,
        "title": "Netlify Environment Variables",
        "subtitle": "The Cheat Codes of the Internet",
        "slug": "netlify-env-vars",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "date": "2019-08-09T00:00:00.000Z",
        "canonical": "https://scotch.io/@sw-yx/netlify-environment-variables-the-cheat-codes-of-the-internet"
      },
      "content": "\n_Published on [Scotch.io](https://scotch.io/@sw-yx/netlify-environment-variables-the-cheat-codes-of-the-internet)_\n\nThis article results from my work compiling all the env vars i could find in netlify: https://gist.github.com/sw-yx/c53634e7e63f0015e43c16bc26832283\n"
    },
    {
      "slug": "netlify-gatsby-jamstack-apps-authenticated-serverless",
      "data": {
        "technical": true,
        "title": "Building Authenticated Serverless JAMstack Apps with Gatsby and Netlify",
        "date": "2019-09-11T00:00:00.000Z",
        "slug": "netlify-gatsby-jamstack-apps-authenticated-serverless",
        "categories": [
          "Tech",
          "Netlify",
          "Gatsby"
        ],
        "description": "Gatsby is more than a simple static site generator. It uses JavaScript to rehydrate Markup into a fully dynamic React app - which means you can use APIs to do all sorts of dynamic functionality!",
        "canonical_url": "https://www.freecodecamp.org/news/building-jamstack-apps/"
      },
      "content": "\n*Canonical link: https://www.freecodecamp.org/news/building-jamstack-apps/*\n\nWhen interacting with a backend, a JAMstack app can do everything a mobile app can do, without the tyranny of the app store. This is a fundamental insight that goes as deep as the fight for a more open, secure, decoupled, faster web.\n\nStatic site generators (SSGs) are traditionally used to generate markup HTML for static sites, and even [e-commerce sites](https://css-tricks.com/lets-build-a-jamstack-e-commerce-store-with-netlify-functions/), but the modern generation of JavaScript SSGs are enabling full-blown, blazing fast web apps. Gatsby uses JavaScript to rehydrate Markup into a fully dynamic React app - which means you can use APIs to do all sorts of dynamic functionality!\n\nLet's see how we can incrementally add functionality to a Gatsby static site with Netlify Functions, and then add authentication with Netlify Identity to create a proper Gatsby app. We'll gradually build up to [a full working demo](https://github.com/sw-yx/jamstack-hackathon-starter/) with:\n\n- 👋🏼Dynamic Clientside Pages in Gatsby\n- 🚋Serverless Functions (with Netlify Dev)\n- 🕵🏼‍♂️Hide API Secrets from being exposed to Frontend\n- 🔏Authentication (with Netlify Identity)\n- 🏠Protected Routes\n- 🔐Authenticated Serverless Functions (why not!)\n- 😻External Provider login with GitHub, Bitbucket, Google, etc.\n\n## Not Your Parent's Static Site Generator\n\nWhy would you use something like Gatsby over Jekyll or Hugo or one of the [hundreds of Static Site Generators](https://www.staticgen.com/) out there? [There are many reasons](https://www.gatsbyjs.org/blog/2018-2-27-why-i-upgraded-my-website-to-gatsbyjs-from-jekyll/), but one of the unique selling points is how Gatsby helps you build [\"Static Progressive Web Apps\"](https://www.gatsbyjs.org/docs/progressive-web-app/#progressive-web-app) with React.\n\n[Gatsby's ability to rehydrate](https://www.gatsbyjs.org/docs/production-app/#dom-hydration) (what a delicious word!) the DOM means you can do incredibly dynamic things with JavaScript and React that would be much harder with legacy SSG's.\n\nLet's say you have a typical static Gatsby site, like [gatsby-starter-default](https://www.gatsbyjs.org/starters/gatsby-starter-default). You can `npm run build` it, and it spits out a bunch of HTML files. Great! I can host that for free!\n\nNow imagine your client comes to you and asks you to add some custom logic that needs to be executed on the server:\n\n- Maybe you have third party API secrets you don't want to expose to your user.\n- Maybe you need [a serverside proxy to get around CORS issues](https://alligator.io/nodejs/solve-cors-once-and-for-all-netlify-dev/).\n- Maybe you need to ping a database to check your inventory.\n\n**Oh no! Now you have to rewrite everything and move to a Digital Ocean droplet!**\n\nI'm kidding. No, you don't have to rewrite everything.\n\nThe beauty of serverless functions is that it is incrementally adoptable - **your site grows with your needs** - and with JavaScript you can rerender entire sections of your site based on live API data. Of course, the more you do this, the more resource intensive (in terms of bandwidth and computation) it can be, so there is a performance tradeoff. **Your site should be as dynamic as you need it to be, but no more.** Gatsby is perfect for this.\n\n## Using Netlify Dev to add Serverless Functions\n\n[Netlify Functions](https://www.netlify.com/docs/functions/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex) are a great low configuration solution for adding serverless functionality to your Gatsby site.\n\nWe'll assume you have a Gatsby site ready to go already, preferably linked to a Git remote like GitHub. If you don't have one, fork and download [gatsby-starter-default](https://app.netlify.com/start/deploy?repository=https://github.com/gatsbyjs/gatsby-starter-default). Let's walk through the steps to add Netlify Functions:\n\n1. **Install Netlify CLI and login**:\n\n```bash\nnpm i -g netlify-cli\nnetlify login # to link your free Netlify account\n```\n\nPretty straightforward.\n\n2. **Create your Netlify instance for your Gatsby site**:\n\n```bash\nnetlify init\n```\n\nYou will be prompted for a \"build command\", which for Gatsby is `yarn build`, and a \"publish directory\", which for Gatsby is `public`. You can also save this in a [netlify.toml config file](https://www.netlify.com/docs/netlify-toml-reference/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex), or the CLI will create it for you:\n\n```\n[build]\n  command = \"yarn build\"\n  functions = \"functions\"\n  publish = \"public\"\n```\n\nAs you can see in the above example, We'll also specify where we'll save our functions to the creatively named `functions` folder.\n\n3. **Create your first Netlify Function**: Netlify CLI has a [set of templates](https://github.com/netlify/cli/tree/master/src/functions-templates/js) available to help you get started writing serverless functions. Just run:\n\n```bash\nnetlify functions:create # ntl functions:create also works\n```\n\nYou'll be presented with an autocomplete list. We'll pick the `token-hider` example for now. Once you select it, the CLI will copy out the necessary files, and install the necessary `axios` dependencies.\n\nNotice that `token-hider.js` includes this line:\n\n```js\nconst { API_SECRET = 'shiba' } = process.env\n```\n\nThis is meant to simulate API secrets that you don't want to expose to the frontend. You can set these as [build environment variables](https://www.netlify.com/docs/continuous-deployment/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex#environment-variables) on your site's Netlify Dashboard. You can name them whatever you like, and for the purposes of our demo we've provided a default, but of course feel free to modify this code however you like. It's Just JavaScript™!\n\n4. **Make sure function dependencies are installed with `netlify-lambda`** (Optional but Recommended)\n\nNotice that your function comes with its own `package.json` and `node_modules`. This means each function can have their own independently managed dependencies, but you also need to make sure these dependencies are installed when you deploy or when someone else clones your repo. You can either check them into git (ugh!), or write a bash script to do this installation. But don't worry, there's a simple utility to automate this:\n\n```bash\nyarn add -D netlify-lambda\n```\n\nAnd add a postinstall script in `package.json` (this isn't Netlify specific, it is part of [how npm works](https://docs.npmjs.com/misc/scripts#description)):\n\n```js\n  \"scripts\": {\n    \"postinstall\": \"netlify-lambda install\"\n  },\n```\n\n5. **Fire up Gatsby and Functions with Netlify Dev**\n\n[Netlify Dev](https://www.netlify.com/blog/2019/04/09/netlify-dev-our-entire-platform-right-on-your-laptop/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex) is the local proxy server embedded in the CLI that we will use to develop our Functions alongside our Gatsby app. You can start it like so:\n\n```bash\nnetlify dev # or ntl dev\n```\n\nYour Gatsby app will now be accessible at `http://localhost:8888` and your function will be accessible at `http://localhost:8888/.netlify/function/token-hider`. Check it out in your browser!\n\nHow are both the Gatsby dev server and the Netlify Functions server both available on the same local port? How come the API_SECRET you set on the Netlify side is available in local development? The rough mental image you should have looks [something like this](https://github.com/netlify/cli/blob/master/docs/netlify-dev.md):\n\n![ASCCII-ART](https://www.freecodecamp.org/news/content/images/2019/09/ASCCII-ART.png)\n\nYou can hit your Netlify Function from anywhere in your Gatsby app! For example, in any event handler or lifecycle method, insert:\n\n```js\nfetch('/.netlify/functions/token-hider')\n  .then(response => response.json())\n  .then(console.log)\n```\n\nand watch a list of dog images pop up in your console. If you are new to React, I highly recommend [reading through the React docs](https://reactjs.org/docs/handling-events.html) to understand where and how to insert event handlers so you can, for example, [respond to a button click](https://reactjs.org/docs/handling-events.html).\n\n## Adding Authentication\n\nSo, yes, your site can now be more dynamic than any static site: It can hit any database or API. You can hide API tokens from prying eyes. It runs rings around CORS (by the way, you can also use [Netlify Redirects](https://www.netlify.com/docs/redirects/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex) for that). But its not an _app_ app. Yet!\n\nThe key thing about web apps (and, let's face it, the key thing users really pay for) is they all have some concept of `user`, and that brings with it all manner of complication from security to state management to [role-based access control](https://www.netlify.com/docs/visitor-access-control/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex#role-based-access-controls-with-jwt-tokens). Entire routes need to be guarded by authentication, and sensitive content shielded from Gatsby's static generation. Sometimes there are things you -don't- want Google's spiders to see!\n\nIt's a different tier of concern, which makes it hard to write about in the same article as a typical Gatsby tutorial. But we're here to make apps, so let's bring it on!\n\n## Adding Netlify Identity and Authenticated Pages to Gatsby\n\n1. **Enable Netlify Identity**: Netlify Identity doesn't come enabled by default. You'll have to head to your site admin (eg `https://app.netlify.com/sites/YOUR_AWESOME_SITE/identity`) to turn it on. [Read the docs](https://www.netlify.com/docs/identity/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex) for further info on what you can do, for example add Facebook or Google social sign-on!\n2. **Install dependencies**: `npm install gatsby-plugin-netlify-identity react-netlify-identity-widget @reach/dialog @reach/tabs @reach/visually-hidden gatsby-plugin-create-client-paths`\n3. **Configure Gatsby**: for dynamic-ness!\n\n```jsx\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-create-client-paths`,\n      options: { prefixes: [`/app/*`] }\n    },\n    {\n      resolve: `gatsby-plugin-netlify-identity`,\n      options: {\n        url: 'https://YOUR_AWESOME_SITE_INSTANCE_HERE.netlify.com'\n      }\n    }\n  ]\n}\n```\n\nThis sets up everything under the `/app` route to be dynamic on the clientside, which means you can put it behind an authentication wall.\n\n4. **Add the login widget**: [`netlify-identity-widget`](https://github.com/netlify/netlify-identity-widget) is a framework-agnostic overlay that ships with a nice signup/login UI. However it is a 60kb package, so there is a 6kb alternative that simply assumes you're using React: `react-netlify-identity-widget`.\n\nThe widget is implemented as an accessible modal with `@reach/dialog`, so you need to put it somewhere in your app:\n\n```jsx\n// src/app/login.js\nimport React from 'react'\nimport { navigate } from 'gatsby'\n\nimport { IdentityModal } from 'react-netlify-identity-widget'\nimport 'react-netlify-identity-widget/styles.css' // delete if you want to bring your own CSS\n\nexport default function Login() {\n  const [dialog, setDialog] = React.useState(false)\n  return (\n    <div>\n      <h1>Log in</h1>\n      <button onClick={() => setDialog(true)}>log in</button>\n      <IdentityModal\n        showDialog={dialog}\n        onCloseDialog={() => setDialog(false)}\n        onLogin={user => navigate('/app/profile')}\n        onSignup={user => navigate('/app/profile')}\n      />\n    </div>\n  )\n}\n```\n\n`react-netlify-identity-widget` uses React Context, so it normally requires adding a Provider, but `gatsby-plugin-netlify-identity` already did that for you (that's its whole purpose!).\n\nAs you might expect, you can use that Context in the rest of your app. `react-netlify-identity-widget` exports a [Custom Consumer Hook](https://kentcdodds.com/blog/how-to-use-react-context-effectively) called `useIdentityContext`, which helps do some runtime checks and makes TypeScript typing easier by removing an `undefined` check.\n\n`useIdentityContext` returns an `identity` object, and [you can see the plethora of data and methods it exposes to you on the docs](https://github.com/sw-yx/react-netlify-identity#user-content-usage). Let's use them to implement a `NavBar` component!\n\n```jsx\n// src/app/components/NavBar.js\nimport React from 'react'\nimport { Link, navigate } from 'gatsby'\nimport { useIdentityContext } from 'react-netlify-identity-widget'\n\nexport default function NavBar() {\n  const { user, isLoggedIn, logoutUser } = useIdentityContext()\n  let message = isLoggedIn\n    ? `Hello, ${user.user_metadata && user.user_metadata.full_name}`\n    : 'You are not logged in'\n  const handleClick = async event => {\n    event.preventDefault()\n    await logoutUser()\n    navigate(`/app/login`)\n  }\n  return (\n    <div>\n      <span>{message}</span>\n      <nav>\n        <span>Navigate the app: </span>\n        <Link to=\"/app/\">Main</Link>\n        <Link to=\"/app/profile\">Profile</Link>\n        {isLoggedIn ? (\n          <a href=\"/\" onClick={handleClick}>\n            Logout\n          </a>\n        ) : (\n          <Link to=\"/app/login\">Login</Link>\n        )}\n      </nav>\n    </div>\n  )\n}\n```\n\n5. **Write the rest of your app**: Because of our configuration in `gatsby-plugin-create-client-paths`, any sub paths in `src/pages/app` will be exempt from Gatsby static generation. To keep the dividing line between app and site crystal clear, I like to have all my dynamic Gatsby code in a dedicated `app` folder. This means you can use `@reach/router` with `react-netlify-identity-widget` to write a standard dynamic React app with private, authenticated routes. Here's some sample code to give you an idea of how to hook them up:\n\n```jsx\n// src/app/app.js\nimport React from 'react'\nimport { Router } from '@reach/router'\nimport Layout from '../components/layout'\nimport NavBar from './components/NavBar'\nimport Profile from './profile'\nimport Main from './main'\nimport Login from './login'\nimport { useIdentityContext } from 'react-netlify-identity-widget'\nimport { navigate } from 'gatsby'\n\nfunction PrivateRoute(props) {\n  const { isLoggedIn } = useIdentityContext()\n  const { component: Component, location, ...rest } = props\n\n  React.useEffect(() => {\n    if (!isLoggedIn && location.pathname !== `/app/login`) {\n      // If the user is not logged in, redirect to the login page.\n      navigate(`/app/login`)\n    }\n  }, [isLoggedIn, location])\n  return isLoggedIn ? <Component {...rest} /> : null\n}\nfunction PublicRoute(props) {\n  return <div>{props.children}</div>\n}\n\nexport default function App() {\n  return (\n    <Layout>\n      <NavBar />\n      <Router>\n        <PrivateRoute path=\"/app/profile\" component={Profile} />\n        <PublicRoute path=\"/app\">\n          <PrivateRoute path=\"/\" component={Main} />\n          <Login path=\"/login\" />\n        </PublicRoute>\n      </Router>\n    </Layout>\n  )\n}\n```\n\nPhew that was a lot! but you should have a solid starting point for your app now :)\n\n## Bonus points: Authenticated Netlify Functions 🤯\n\nJust like [every magic act has a pledge, a turn, and a prestige](<https://en.wikipedia.org/wiki/The_Prestige_(film)>), I have one last tidbit for you. [Nothing on the client-side is safe](https://stackoverflow.com/questions/50277192/react-security-concerns-restricted-pages-in-app). Although you can send along Netlify Identity user ID's to your Netlify Function endpoints for authenticated access from your Gatsby App (for example in the body of a POST request), you'll never be truly sure if that flow is secure either from malicious users or snooping.\n\nThe best way to do authenticated actions inside serverless functions is to do it from **inside** the context of the function itself. Fortunately, [Netlify Identity and Functions work seamlessly together](https://www.netlify.com/docs/functions/?utm_source=blog&utm_medium=freecodecamp&utm_campaign=devex#identity-and-functions). All you have to do is to send along the user's [JWT](https://jwt.io/) when hitting your endpoint:\n\n```js\n// in your gatsby app\nconst { user } = useIdentityContext()\n// in an event handler\nfetch('/.netlify/functions/auth-hello', {\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: 'Bearer ' + user.token.access_token // like this\n  }\n}).then(/* etc */)\n```\n\nIf even this is too much boilerplate, you can even use the fetch wrapper that ships with the `identity` object:\n\n```js\n// in your gatsby app\nconst { authedFetch } = useIdentityContext()\n// in an event handler\nauthedFetch('/.netlify/functions/auth-hello').then(/* etc */)\n```\n\nAnd then inside your Netlify function, you can now check the `user` object or pass it on to your end API or database:\n\n```js\nmodule.exports = { handler }\nasync function handler(event, context) {\n  if (context.clientContext) {\n    const { user } = context.clientContext\n    // you can get actual user metadata you can use!\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        msg: 'super secret info only available to authenticated users',\n        user\n      })\n    }\n  } else {\n    return {\n      statusCode: 401,\n      body: JSON.stringify({\n        msg:\n          \"Error: No authentication detected! Note that netlify-lambda doesn't locally emulate Netlify Identity.\"\n      })\n    }\n  }\n}\n```\n\n## Gatsby + Netlify - Perfect for your next Hackathon\n\nAs you can see, it's a few steps to turn your static Gatsby sites into dynamic, authenticated, fully serverless apps with Netlify's free tools. This makes Gatsby a perfect tool for your next app. If you're at a hackathon, short on time, or just like to see a full working demo, check any of the following links.\n\n- **Code:** https://github.com/sw-yx/jamstack-hackathon-starter\n- **Starter:** https://www.gatsbyjs.org/starters/jamstack-hackathon-starter\n- **Live Demo:** https://jamstack-hackathon-starter.netlify.com/\n"
    },
    {
      "slug": "netlify-git-centric",
      "data": {
        "technical": true,
        "title": "Git-Centric Workflow",
        "subtitle": "The One API to Rule Them All",
        "slug": "netlify-git-centric",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "date": "2019-09-26T00:00:00.000Z",
        "canonical": "https://www.netlify.com/blog/2019/09/26/git-centric-workflow-the-one-api-to-rule-them-all/"
      },
      "content": "\n_Published on [the Netlify Blog](https://www.netlify.com/blog/2019/09/26/git-centric-workflow-the-one-api-to-rule-them-all/)_\n\nNetlify isn't _only_ about the JAMstack — there are a host of other design principles that inform the developer experience and product strategy users know and love. **Git-Centric Workflow** is a core philosophy embraced by Netlify, and listed as a [JAMstack Best Practice](https://jamstack.org/best-practices/), yet there hasn't been an attempt to define it or explain it's benefits. Let's try to!\n\n## Provider and Platform Agnostic\n\nThe first thing to note about using Git is that it belongs to everybody and nobody. As [open source software](https://git-scm.com/about/free-and-open-source), anyone may use it and build on top of it. So although GitHub has a leading market share, you can take your code and move over to BitBucket and GitLab, or even a self-hosted solution, at any time.\n\nSimilarly, as a result of asking you to base your workflow in Git rather than on proprietary APIs, there is nothing preventing you from building and deploying your code with any other provider. Everyone can do static asset hosting; Netlify has to continually win your support with other features.\n\n## Extreme Continuous Deployment\n\nContinuous Deployment is [widely recognized to be a best practice](https://www.atlassian.com/continuous-delivery/principles/business-value), but it is still not the default in many environments and is still too hard to set up as a result. A Git-centric workflow in this context means deploying when you make a valid commit to Git (aka tests pass and build steps succeed), and, implicitly, push it to your Git hosting provider (so your code can survive catastrophic damage to your laptop).\n\n**Immutable.** If Continuous Deployment means that the latest valid commit on your master branch is deployed on `[yoursite.com](http://yoursite.com)`, it is a short step to [Immutable Deploys](https://www.netlify.com/blog/2018/10/05/netlify-and-the-functional-immutable-reactive-deploy/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex), which means that EVERY deploy gets an always-live, immutable ID. Deployments are [atomic](https://www.netlify.com/docs/versioning-and-rollbacks/#atomic-deploys?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex), meaning we first upload every file, and only take the entire site live once they are all done. Domains like `yoursite.com` or `yoursite.netlify.com` are effectively references to a Git commit, just like `HEAD` or `origin/HEAD` might be. You can even [roll back](https://www.netlify.com/docs/versioning-and-rollbacks/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) to an old version at any time for any reason, just like with Git.\n\n**Previews.** Git's standout feature of [branching and merging](https://git-scm.com/about/branching-and-merging) also means there is an inbuilt, extremely familiar collaboration model to your workflow, which platforms like Netlify or Heroku can then leverage. Open source projects and team marketing sites love the idea of [Deploy Previews](https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex), where every PR gets its own build with a publicly available URL that you can preview.\n\n**Branches.** Not comfortable with Continuous Deployment? Prefer a `staging` and `uat` environment multistage deployment process? I've been there. Why stop at two environments? Have as many as you like! [Branch Deploys](https://www.netlify.com/blog/2017/11/16/get-full-control-over-your-deployed-branches/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) let you set up a new environment with no more API than `git checkout -b staging`. If you use [Netlify DNS](https://www.netlify.com/docs/custom-domains/#branch-subdomains?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) you can even set them up as a subdomain like `staging.yoursite.com`!\n\n**Split Testing**. If you're already comfortable with feature branches, then you already know all the API you need to A/B test your features. Netlify's [Split Testing](https://www.netlify.com/docs/split-testing/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) is Git-centric too, which means that setting up an A/B test is also as simple as running `git checkout -b staging` and then moving sliders around to determine traffic splits. What's amazing is: _there is nothing else to learn!_ 🤯 **Pro Tip**: If you don't want to randomly roll out features based on traffic split, you can even go for [an opt-in private Beta release](https://dev.to/philhawksworth/netlify-pro-tip-using-split-testing-to-power-private-beta-releases-a7l), using [JavaScript to set the `nf_ab` cookie](https://www.netlify.com/blog/2019/09/11/netlify-pro-tip-using-split-testing-to-power-private-beta-releases/#giving-the-user-control-to-opt-in-and-out?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) for users you want to _launch darkly_ to!\n\n## Not just Frontend Code: Git For Everything\n\nApart from Git as the API for everything deployment related, Git-centric workflow also means checking some things into Git that you might not have thought to do before.\n\n**Atomic Deploys of Backend and Frontend**. The Git analogy for deployment extends beyond just your frontend code. Your serverless [Netlify Functions](https://www.netlify.com/docs/functions/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) are code too! If your frontend changes require backend changes, the lockstep movement of backend and frontend is assured with [Atomic Deploys](https://www.netlify.com/docs/versioning-and-rollbacks/#atomic-deploys?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex). In practice, truly non-breaking change between backend and frontend is hard to achieve. [Deploy Previews](https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) can help test functionality in production and [Netlify Dev](https://www.netlify.com/docs/cli/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) can help test locally even before you commit.\n\n**Content**. Beyond just writing code, you may be writing documentation, or landing page copy, or a team blog. You need to draft, edit, preview, publish, and revert changes with content just like with any code you write. So it's no surprise that the editorial process can work excellently with Git-centric workflow as well! In fact this very blog itself uses [NetlifyCMS](https://netlifycms.org/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) to write and publish content, alongside any code edits needed to make that content display the way we need it to. NetlifyCMS is site generator and framework agnostic, but sets itself apart from [other Headless CMS solutions](https://headlesscms.org/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) by [putting all content in Git](https://www.netlify.com/blog/2017/03/17/an-open-source-cms-with-a-git-centric-workflow/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex). Version control and publication of content has never been easier.\n\n**Large Files**. At the extremes, Git does have scalability issues. Even if you're not Google, you may be a photographer that needs to store large media files in their raw, highest quality format, even though you may not display them all the time and may need to size them down for better browsing performance. [Netlify Large Media](https://www.netlify.com/docs/large-media/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) still achieves this with Git-centric Workflow, by leveraging the wonderful [Git LFS](https://git-lfs.github.com) project, offering easy APIs for [Image Transformation](https://www.netlify.com/docs/image-transformation/?utm_source=netliblog&utm_medium=swyx-git&utm_campaign=devex) for faster browsing without busting data limits or performance budgets.\n\n## So... What is Git-Centric Workflow?\n\nAs you can see, what we mean when we talk about a Git-Centric Workflow is a single analogy that applies throughout your entire architecture — from **putting as much as makes sense in Git** (e.g. Serverless Functions, Content, and Large Files), to taking **continuous deployment to its logical extreme** with no additional API to learn. Lastly, the ultimate expression of **freedom from vendor lock-in**: Git as the ultimate Provider- and Platform-Agnostic workflow.\n\nIn short: Everything lives in Git, and Git for Everything, for your site and deployment infrastructure to survive as long as Git does. That's a pretty good bet!\n"
    },
    {
      "slug": "netlify-google-sheets",
      "data": {
        "technical": true,
        "title": "Google Sheets v4 API with Netlify Dev",
        "description": "wiring up Google Sheets via a Netlify Function",
        "slug": "netlify-google-sheets",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "date": "2020-02-14T00:00:00.000Z"
      },
      "content": "\nGoogle Sheets' API is very hard to use. I've tried and failed a few times. I finally figured it out today. Its worth it mainly because free usage is way cheaper than Airtable, but accordingly its docs aren't really incentivized to help you figure out how to use them. \n\nAnyway I figured it out. i'm tired so i cant write as nicely as I normally do but here are my notes.\n\n## [Demo Here](https://github.com/sw-yx/netlify-google-spreadsheet-demo/)\n\nFor live demo check https://netlify-google-spreadsheet-demo.netlify.com/\n\n![googlesheets](https://user-images.githubusercontent.com/6764957/74577961-ecb51800-4f5f-11ea-9b81-30a5fcb6e68c.gif)\n\n## How to get the env vars: an incomplete tutorial\n\nThese are my notes from when I ran it through the first time - in case you need it, [here is another walkthrough](https://blog.kintohub.com/how-to-use-google-spreadsheet-for-your-backend-database-29df9b832a96) with possibly better screenshots and instructions. You should be able to piece it together from here.\n\n1. make a google sheet. its id from url will be `GOOGLE_SPREADSHEET_ID_FROM_URL`\n\n2. head to google console and make sure the Sheets API is enabled https://console.developers.google.com/apis/library/sheets.googleapis.com?project=sixth-storm-268221. you may need to set up a \"project\" for this if this is your first time.\n\n![image](https://user-images.githubusercontent.com/6764957/74578095-9eecdf80-4f60-11ea-85b2-d75641292015.png)\n\n3. get the service account key, NOT the API key. this might help: https://github.com/theoephraim/node-google-spreadsheet/blob/756d57fea3e1cf1d5ba6a38b12210102da0bf621/docs/getting-started/authentication.md. this will give you `GOOGLE_SERVICE_ACCOUNT_EMAIL` and `GOOGLE_PRIVATE_KEY` (see form below)\n\n![image](https://user-images.githubusercontent.com/6764957/74578194-1f134500-4f61-11ea-9f4b-d85d6e6e6d46.png)\n\n\n4. Make sure your sheet has granted permission https://stackoverflow.com/questions/38949318/google-sheets-api-returns-the-caller-does-not-have-permission-when-using-serve to `GOOGLE_SERVICE_ACCOUNT_EMAIL`\n\n## to set this up for local dev\n\nmake sure to set env vars inside `functions/google-spreadsheet-fn/.env`:\n\n```bash\nTRY_TO=CUSTOMIZE_THIS\nGOOGLE_SPREADSHEET_ID_FROM_URL= # e.g. 10abcu_reo5FctMpuiOYHJstj3lTit4pvp-VS7mZhgVw\nGOOGLE_SERVICE_ACCOUNT_EMAIL= # e.g. googlenetlify-spreadsheet-test@foo-bar-123456.iam.gserviceaccount.com\nGOOGLE_PRIVATE_KEY= # e.g. -----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG etc etc super long key\n```\n\nand then with the Netlify CLI you can run `ntl dev` ([Netlify Dev](https://github.com/netlify/cli/blob/master/docs/netlify-dev.md)) and it opens up locally for you to develop.\n\n## to set this up on your own in production on netlify\n\nmake sure to set the env vars in the netlify UI\n\n## Getting to CRUD\n\nI have commented through the netlify function accordingly (source in [github](https://github.com/sw-yx/netlify-google-spreadsheet-demo/blob/master/functions/google-spreadsheet-fn/google-spreadsheet-fn.js)):\n\n```js\n/*\n * prerequisites\n */\nif (!process.env.NETLIFY) {\n  // get local env vars if not in CI\n  // if in CI i expect its already set via the Netlify UI\n  require('dotenv').config();\n}\n// required env vars\nif (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL)\n  throw new Error('no GOOGLE_SERVICE_ACCOUNT_EMAIL env var set');\nif (!process.env.GOOGLE_PRIVATE_KEY)\n  throw new Error('no GOOGLE_PRIVATE_KEY env var set');\nif (!process.env.GOOGLE_SPREADSHEET_ID_FROM_URL)\n  // spreadsheet key is the long id in the sheets URL\n  throw new Error('no GOOGLE_SPREADSHEET_ID_FROM_URL env var set');\n\n/*\n * ok real work\n *\n * GET /.netlify/functions/google-spreadsheet-fn\n * GET /.netlify/functions/google-spreadsheet-fn/1\n * PUT /.netlify/functions/google-spreadsheet-fn/1\n * POST /.netlify/functions/google-spreadsheet-fn\n * DELETE /.netlify/functions/google-spreadsheet-fn/1\n *\n * the library also allows working just with cells,\n * but this example only shows CRUD on rows since thats more common\n */\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n\nexports.handler = async (event, context) => {\n  const UserIP = event.headers['x-nf-client-connection-ip'] || '6.9.6.9'; // not required, i just feel like using this info\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID_FROM_URL);\n\n  // https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication\n  await doc.useServiceAccountAuth({\n    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,\n    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\\\n/g, '\\n')\n  });\n  await doc.loadInfo(); // loads document properties and worksheets. required.\n  const sheet = doc.sheetsByIndex[0]; // you may want to customize this if you have more than 1 sheet\n  // console.log('accessing', sheet.title, 'it has ', sheet.rowCount, ' rows');\n  const path = event.path.replace(/\\.netlify\\/functions\\/[^/]+/, '');\n  const segments = path.split('/').filter((e) => e);\n\n  try {\n    switch (event.httpMethod) {\n      case 'GET':\n        /* GET /.netlify/functions/google-spreadsheet-fn */\n        if (segments.length === 0) {\n          const rows = await sheet.getRows(); // can pass in { limit, offset }\n          const serializedRows = rows.map(serializeRow);\n          return {\n            statusCode: 200,\n            // body: JSON.stringify(rows) // dont do this - has circular references\n            body: JSON.stringify(serializedRows) // better\n          };\n        }\n        /* GET /.netlify/functions/google-spreadsheet-fn/123456 */\n        if (segments.length === 1) {\n          const rowId = segments[0];\n          const rows = await sheet.getRows(); // can pass in { limit, offset }\n          const srow = serializeRow(rows[rowId]);\n          return {\n            statusCode: 200,\n            body: JSON.stringify(srow) // just sends less data over the wire\n          };\n        } else {\n          throw new Error(\n            'too many segments in GET request - you should only call somehting like /.netlify/functions/google-spreadsheet-fn/123456 not /.netlify/functions/google-spreadsheet-fn/123456/789/101112'\n          );\n        }\n      /* POST /.netlify/functions/google-spreadsheet-fn */\n      case 'POST':\n        /* parse the string body into a useable JS object */\n        const data = JSON.parse(event.body);\n        data.UserIP = UserIP;\n        // console.log('`POST` invoked', data);\n        const addedRow = await sheet.addRow(data);\n        // console.log({ addedRow });\n        return {\n          statusCode: 200,\n          body: JSON.stringify({\n            message: `POST Success - added row ${addedRow._rowNumber - 1}`,\n            rowNumber: addedRow._rowNumber - 1 // minus the header row\n          })\n        };\n      /* PUT /.netlify/functions/google-spreadsheet-fn/123456 */\n      case 'PUT':\n        /* PUT /.netlify/functions/google-spreadsheet-fn */\n        if (segments.length === 0) {\n          console.error('PUT request must also have an id'); // we could allow mass-updating of the sheet, but nah\n          return {\n            statusCode: 422, // unprocessable entity https://stackoverflow.com/questions/3050518/what-http-status-response-code-should-i-use-if-the-request-is-missing-a-required\n            body: 'PUT request must also have an id.'\n          };\n        }\n        /* PUT /.netlify/functions/google-spreadsheet-fn/123456 */\n        if (segments.length === 1) {\n          const rowId = segments[0];\n          const rows = await sheet.getRows(); // can pass in { limit, offset }\n          const data = JSON.parse(event.body);\n          data.UserIP = UserIP;\n          console.log(`PUT invoked on row ${rowId}`, data);\n          const selectedRow = rows[rowId];\n          Object.entries(data).forEach(([k, v]) => {\n            selectedRow[k] = v;\n          });\n          await selectedRow.save(); // save updates\n          return {\n            statusCode: 200,\n            body: JSON.stringify({ message: 'PUT is a success!' })\n            // body: JSON.stringify(rows[rowId]) // just sends less data over the wire\n          };\n        } else {\n          return {\n            statusCode: 500,\n            body:\n              'too many segments in PUT request - you should only call somehting like /.netlify/functions/google-spreadsheet-fn/123456 not /.netlify/functions/google-spreadsheet-fn/123456/789/101112'\n          };\n        }\n      /* DELETE /.netlify/functions/google-spreadsheet-fn/123456 */\n      case 'DELETE':\n        //\n        // warning:\n        // this code is untested but you can probably figure this out\n        //\n\n        if (segments.length === 1) {\n          const rows = await sheet.getRows(); // can pass in { limit, offset }\n          // // we dont actually use this in the demo but you might\n          // const rowId = segments[0];\n          // await rows[rowId].delete(); // delete a row\n\n          // do this\n          if (rows.length > 1) {\n            const lastRow = rows[rows.length - 1];\n            await lastRow.delete(); // delete a row\n            return {\n              statusCode: 200,\n              body: JSON.stringify({ message: 'DELETE is a success!' })\n            };\n          } else {\n            return {\n              statusCode: 200,\n              body: JSON.stringify({\n                message: 'no rows left to delete! (first row is sacred)'\n              })\n            };\n          }\n        } else {\n          return {\n            statusCode: 500,\n            body: JSON.stringify({\n              message:\n                'invalid segments in DELETE request, must be /.netlify/functions/google-spreadsheet-fn/123456'\n            })\n          };\n        }\n      /* Fallthrough case */\n      default:\n        return {\n          statusCode: 500,\n          body: 'unrecognized HTTP Method, must be one of GET/POST/PUT/DELETE'\n        };\n    }\n  } catch (err) {\n    console.error('error ocurred in processing ', event);\n    console.error(err);\n    return {\n      statusCode: 500,\n      body: err.toString()\n    };\n  }\n\n  /*\n   * utils\n   */\n  function serializeRow(row) {\n    let temp = {};\n    sheet.headerValues.map((header) => {\n      temp[header] = row[header];\n    });\n    return temp;\n  }\n};\n```\n\n\n## Other resources\n\n- You may find writing Google Apps Scripts easier. But it is \"intel inside\".\n- https://dev.to/sarthakganguly/google-sheets-as-your-web-backend-4a65\n- https://blog.kintohub.com/how-to-use-google-spreadsheet-for-your-backend-database-29df9b832a96\n- here is prior art but i think it is v3. https://github.com/grod220/CCS-B.B.Warfield/blob/master/lambda/googleSheets.js\n\n"
    },
    {
      "slug": "netlify-jamstack-indiehackers",
      "data": {
        "technical": true,
        "title": "JAMstack for Indie Hackers",
        "slug": "netlify-jamstack-indiehackers",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "date": "2019-09-02T00:00:00.000Z",
        "published": true,
        "canonical": "https://www.indiehackers.com/article/jamstack-for-indie-hackers-b07f7a943d"
      },
      "content": "\n_This article was [published on Indie Hackers](https://www.indiehackers.com/article/jamstack-for-indie-hackers-b07f7a943d)!_\n\nYou can make money _with_ the JAMstack or _on_ the JAMstack. I have spent the last year at Netlify, working at the heart of the JAMstack ecosystem, and when [Derrick Reimer](https://derrickreimer.com) reached out to have a chat about [StaticKit](http://statickit.com), I immediately realized that what I've learned could be helpful to a broader Indie Hacker audience. Here's what I know.\n\n## What is the JAMstack?\n\nThere are two ways to discuss the JAMstack:\n\n- **What it stands for**: JAMstack is a modern web architecture emphasizing **J**avaScript, **A**PIs, and prerendered **M**arkup, _served without web servers_. That last part is important; for example, deploying on Netlify means directly deploying to a CDN. There is no origin server to manage or scale. In fact, [Chris Coyier](https://twitter.com/chriscoyier/) recently argued that [Static Hosting is the only necesssary part](https://css-tricks.com/jamstack-more-like-shamstack/) of JAMstack. However, the JAMstack movement does also promote optional [best practices](https://jamstack.org/best-practices/) including using [Static Site Generators](https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/) and [Git-centric Workflow](https://www.software.com/review/supercharge-web-development-with-git-and-netlify).\n- **Why it's better**: Well, let's be honest, everything has tradeoffs. But the argument is that you can create fast and secure sites, as well as dynamic apps, with JAMstack technologies.\n  - For people coming from a traditional CMS setup, decoupling your stack not only reduces the hackable surface area, but frees you up to use more modern technologies and designs on the frontend, as well as the ability to bring in content from other sources like Airtable without needing to find just the right plugin. This is why major CMSes like [Wordpress](https://www.elegantthemes.com/blog/wordpress/headless-wordpress), [Drupal](https://decoupleddays.com/) and [Ghost](https://ghost.org/blog/jamstack/) are all going headless, and new CMSes like [Sanity](https://headlesscms.org/projects/sanity) and [Contentful](https://headlesscms.org/projects/butter-cms) are gaining traction being [headless from the start](https://headlesscms.org).\n  - For developers, the (optional) emphasis on [Static Site Generators](https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/) and [Git-centric Workflow](https://www.software.com/review/supercharge-web-development-with-git-and-netlify) gets you fast performance and continuous deployment by default. More on developer friendly-angles below. What's wonderful about JAMstack is that it doesn't have to be cutting edge at all - it is more about architecture than technology, and more a return to simplicity than a new fad. However, JAMstack apps _are_ undeniably given new capabilities by the new generation of JS frameworks that rehydrate from static sites into fully dynamic apps on the client, offering a seamless progressive upgrade of experience.\n  - For the financially minded, total cost of ownership is also often lower, because static hosting is cheap, and the cost of pinging first and third party APIs scales up effortlessly and scales down to zero. This means fixed costs become variable costs, which seems to right way to start any MVP. This opens up new opportunities for indie businesses, which we will discuss below.\n\nThe best person to learn about the JAMstack from is the co-founder of Netlify, [Mathias Biilmann](https://twitter.com/biilmann). My first real a-ha moment was when watching [his talk at SmashingConf on The New Front-end Stack](https://vimeo.com/163522126). It's probably worth mentioning you don't have to use Netlify to be JAMstack - [Zeit](https://zeit.co), [Firebase](https://firebase.google.com) and [Amplify Console](https://aws.amazon.com/amplify/console/) all count and you can even [wire up your own JAMstack infrastructure if you have to, like Paypal](https://www.infoq.com/presentations/jamstack-enterprise/)! I have been continually awed by other perspectives from [Chris Coyier](https://full-stack.netlify.com), founder of Codepen and CSS Tricks, and [Tom Preston-Werner](https://twitter.com/mojombo/status/1016506622477135872), founder of GitHub and creator of both [Jekyll](https://github.com/mojombo/mojombo.github.io) and [GitHub Pages](https://github.blog/2008-12-18-github-pages/), arguably the progenitors of the modern static site movement, as well as all the other speakers in the new-ish [JAMstack_Conf series of conferences](https://jamstackconf.com).\n\nIf you prefer reading to watching talks, you can check out [JAMstack.org](https://jamstack.org/) as well as the recently published [O'Reilly book on JAMstack](https://www.netlify.com/oreilly-jamstack/).\n\n## Using the JAMstack for your projects\n\n### At Least Your Landing Page Should Be JAMstack\n\nI find there is very little argument for having your marketing site NOT be JAMstack. A Twitter friend of mine recently lauched a side project he'd been laboring over for 9 months on Product Hunt. Unbeknownst to him it got to the top of HN a day later when he wasn't watching. HN brought in tens of thousands of hits and the site went down for hours... and my friend didn't know, because he thought his launch was done. Given a conservative estimate of 10,000 missed visitors and a 1% conversion rate, that is 100 users that were lost because the server went down. Not to forget negative impressions from existing users.\n\nThat's real money.\n\nOf course, on managed platforms like Heroku, you can simply set auto restart and auto scale settings, but that will still cost. Better to just have a clean separation of `www.mysweetproject.com` and `app.mysweetproject.com`.\n\nIn particular, if your marketing site is JAMstack, launch days are far less stressful because your landing pages aren't vulnerable to being \"hugged to death\", keeping the top of your funnel open and only assigning compute resources to users that actually sign up. As a result of JAMstackifying, your marketing pages will probably also load faster, which matters for a first impression.\n\nWhether or not the rest of your app is JAMstack is totally up to your tech preferences and product requirements; just remember that statically hosted assets don't mean static content, and the whole idea is you can use as much or as little JS as you like, interacting with a decoupled API, to create the dynamic product experience you envision.\n\n### Continuous Deployment and Git-centric Workflow\n\nI feel like Continuous Deployment doesn't need to be sold in this day and age, but it isn't the default in some environments and so an Indie Hacker might forget to set it up. I know this because 2 years ago I was personally still SSHing to my Digital Ocean box and manually restarting and redeploying and it was such a waste of time in retrospect. You can use Netlify or GitHub Actions or some other CI/CD system, doesn't matter, the point is to automate as much of the undifferentiated heavy lifting (my favorite term lifted from AWS) as possible so that A) you don't make mistakes or skip important steps, and B) you spend as much of your limited time as possible on the stuff that is actually going to set your project apart.\n\nJAMstack (as a best practice, not as a requirement) takes Continuous Deployment and extends that into the concept of **Git-centric Workflow**. This is an idea that can be expressed a few different ways:\n\n- **Continuous Deployment from Git**: It's hard to imagine where else to deploy from, but having the absolute certainty that if you committed it to Git, and it passes tests/builds properly, it will be deployed, is very nice. The other way around is also perhaps even more valuable to have in your arsenal - if it was deployed, then there is a git hash somewhere for it, one that you can roll back to at any time regardless of what platform you use. Netlify offers this as [Immutable Deploys](https://www.netlify.com/blog/2018/10/05/netlify-and-the-functional-immutable-reactive-deploy/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex), and so does [Linc](https://linc.sh/) and [Zeit](https://zeit.co/docs/v2/advanced/concepts/immutability). With a some effort, you could also set it up in a custom S3 + Route53 configuration.\n- **Everything Lives in Git**: With a JAMstack project, anyone should be able to do a `git clone`, install any needed dependencies with a standard procedure (like `npm install`), and be ready to run the full project locally. No databases to clone, no complex installs. This reduces contributor friction, and also simplifies staging and testing workflows. Even without contributors, this means that your project is resistant to you losing your machine, because you don't rely on implicit config. Even your [redirects](https://www.netlify.com/docs/redirects/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex) and [serverless functions](https://www.netlify.com/docs/functions/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex) live in Git. [NetlifyCMS](https://netlifycms.org) is a free open source project that even lets you manage your content in Git with a nice WYSIWYG UI.\n- **No API other than Git**: Netlify takes this to the extreme, building tons of infrastructure around the Git assumption. [Every PR gets a Preview](https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex). This means you can Test In Production™ and going live is as simple as merging the PR or un-pinning a deploy, as Netlify's CEO recently did [on stage to launch Netlify Analytics](https://www.netlify.com/blog/2019/07/10/netlify-analytics-accurate-insights-without-performance-impacts/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex#watch-the-announcement). For persistent branches, you can set up [branch deploys](https://www.netlify.com/docs/continuous-deployment/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex#branches-deploys) so you aren't just limited to `staging` or `UAT` environments, the number of environments is literally as unlimited as the number of branch names you can think of! (Tip: Use [Netlify DNS to set up branch subdomains](https://www.netlify.com/docs/custom-domains/#branch-subdomains) if you also want this to show on your custom `*.mysweetproject.com` domain). We can even build [A/B Split testing](https://www.netlify.com/docs/split-testing/?utm_source=blog&utm_medium=indiehackers&utm_campaign=devex) with no API to learn other than git branching. You can even do [feature flags with that same feature](https://mobile.twitter.com/philhawksworth/status/969190271480205312) and launch darkly 😉.\n\n### Platform by Default\n\nAdditionally, ensuring strict separation between your APIs (which can either be microservices or serverless functions you maintain, or third party APIs others provide) and your markup generation means that you don't need a major refactor if you decide to add a mobile or desktop client. Max Stoiber's writeup on [Tech Choices I Regret at Spectrum](https://mxstbr.com/thoughts/tech-choice-regrets-at-spectrum/) doesn't include JAMstack, but does mention optimize for iteration speed and flexibility, especially where it comes to leaving the door open to native apps.\n\nIn particular, especially if you run a strict [\"backend for frontend\" or API Gateway](https://samnewman.io/patterns/architectural/bff/) layer, you can consider yourself simply the first consumer of a generalizable developer platform you are creating, which makes opening up your ~~app~~ platform to whitelabel or third party developers trivial.\n\nNetlify is already a beneficiary of this: because Netlify runs an [Open API](https://open-api.netlify.com), developers have been able to create custom clients like a [Mac OS Menubar](https://github.com/stefanjudis/netlify-menubar) without even contacting us. This allows your users to help each other and plug perceived product gaps you don't have time to get to.\n\n## Serving JAMstack devs with your projects\n\nWith the rise in JAMstack as a category, it's no surprise that there are actual money-making opportunities to be had. To be clear, I don't have an active business in this race, since I work at Netlify, but I do interact with a number of important players in the space and I thought I would share what I know.\n\nOne way to tackle this is to lean on Venture Capitalists that have done the work (note, this doesn't mean seeking funding from VC, we are Indie Hackers after all!). For a Netlify/trends perspective, you can see the investment theses from [Kleiner Perkins](https://www.kleinerperkins.com/perspectives/netlify-modernizing-the-web/) and [a16z](https://a16z.com/2017/08/09/netlify/). But for opportunities in the broader landscape, there are [great charts from Redpoint](https://medium.com/memory-leak/the-jamstack-its-pretty-sweet-e0834e4e6bb7) that presents a OSI-like stack of layers:\n\n![https://miro.medium.com/max/2304/1*TdRFV0LAG7TG3US2YJMALA.jpeg](https://miro.medium.com/max/2304/1*TdRFV0LAG7TG3US2YJMALA.jpeg)\n\nCRV has [a different landscape chart](https://medium.com/crv-insights/the-jamstack-startup-landscape-c06cc3cdb917) that also includes testing, community, and a loose split between products and platforms:\n\n![https://miro.medium.com/max/1755/1*R65rmc0x432_s9EmAbGlOA.png](https://miro.medium.com/max/1755/1*R65rmc0x432_s9EmAbGlOA.png)\n\nYou may notice a lot of these are frontend-focused tools. JAMstack isn't exclusively for frontend developers, but it does get a lot of its growth from enabling frontend, particularly JavaScript devs, to do a lot more on their oown than they could before. **This sounds perfect for Indie Hackers.** As Chris Coyier [recently noted](https://full-stack.netlify.com), that is a result of the \"product stack\" moving ever closer to the front of the stack, as the rise of [the API Economy](https://a16z.com/2018/03/13/api-economy-why-what-how/) commoditizes a lot of functionality that developers historically had to build by themselves or relied on their serverside framework to provide.\n\nThis landscape shift presents opportunities to serve growing customer segments that are in the right stage of life, and have the right architecture, to try out new tools. Two big categories are CMSes and Third Party APIs:\n\n- **Decoupled Content**: Rule 1 of CMSes is never build your own CMS, but if you do find a customer segment that is underserved, the CMS market is vast, and nice bootstrapped businesses like [Prismic](https://prismic.io) can work. If you consider ecommerce a specialized form of CMS, then there is a very fascinating cadre of ecommerce service providers like [Snipcart](https://snipcart.com/jamstack-ecommerce-podcast) that can serve their market well. Of course, if you hit scale, you can look at [Contentful](https://www.contentful.com/) and [Commerce Layer](https://commercelayer.io/) as corresponding examples who have raised VC.\n- **Third Party APIs**: This category is as vast as the API Economy, so it is very hard to describe. I'll try to name a few categories just to jog your imagination, but by no means is this exhaustive:\n  - A horizontal API requires more configuration to use but is applicable in a broad swathe of use cases because you provide basic building blocks. For example you can provide a database as a service like [FaunaDB](https://fauna.com/) and [mLab](https://mlab.com/), or even one you don't host like [Hasura](https://hasura.io). Job running and scheduling would alos be an interesting one here, were there not [so many free services](https://www.google.com/search?q=free+cron&oq=free+cron&aqs=chrome..69i57j0l4j69i60.1115j0j1&sourceid=chrome&ie=UTF-8) that already do it.\n  - A vertical API focuses on one very specific use case, but just excels at it and can have easier adoption due to ease of onboarding. For example, the [Auth0](https://auth0.com/) addresses the Identity usecase very well, or [Cloudinary](https://cloudinary.com/) for images and video. Form management seems a nice category for Indie Hackers, with entrants like [FormKeep](https://formkeep.com/) and [StaticKit](http://statickit.com), because APIs and business models can differ a lot. Because you are going vertical, it is easier, maybe even imperative, to have a stronger idea of the kind of customer persona you are going to serve. I think Search is a worthwhile category for people to explore, because it is primarily dominated by [Algolia](https://www.algolia.com/), but there are certainly far more usecases and needs for search than Algolia can handle.\n  - API services is an emerging fascinating category. You can rollup a bunch of existing APIs and present them in a unified way with consistent authentication management, like [OneGraph](https://www.onegraph.com/) does. You can provide API monitoring/observability for other APIs like [Thundra](https://www.thundra.io/), or provide a service in between your own open source front and back end layers like [Apollo Engine](https://www.apollographql.com/platform). You can help to deploy serverless functions and API services like [Serverless.com](https://serverless.com/) and [Begin.com](https://begin.com/) do.\n\nOther areas in the landscape are of course available to the enterprising Indie Hacker, but you may need more funding to get going. Backend-as-a-Service companies like [Prisma](https://www.prisma.io/) and [Heroku](https://www.heroku.com/) are fine businesses, but the buildout took funding. [Gatsby](https://www.gatsbyjs.com/) started as an open source side project, but in order to build out their full vision as a framework they had to take funding to hire the people they needed. Storybook [survived near death](https://medium.com/storybookjs/the-storybook-story-dd3c1ab0d2ce) and now is heavily supported by [Chroma](https://blog.hichroma.com/). Open source funding is still not solved, so Indie Hacking is probably best pursued from a product mindset instead.\n\nIf you need more inspiration about commercializing developer-focused projects, [Heavybit does a lot of content](https://mobile.twitter.com/heavybit/status/1146441165648093184) with CEOs who have walked down this road, although there is some funding attached if you choose to join them.\n\n## Conclusion\n\nThere is a great deal of opportunity in using the JAMstack, and even making money on the JAMstack. I'm happy to chat with and help any Indie Hacker who wants to jump on this category and figure it out with you. At the very least, I'll know who you should talk to if you want to get some ideas. [Get in touch](https://twitter.com/swyx)!\n"
    },
    {
      "slug": "netlify-nextjs-ssg",
      "data": {
        "technical": true,
        "title": "Using Next.js as a Static Site Generator for Netlify",
        "published": true,
        "slug": "netlify-nextjs-ssg",
        "description": "How to deploy a Static Next.js Site to Netlify, and then upgrade it to use Dynamic Route Segments to become a full fledged Static Site Generator!",
        "tags": "nextjs, netlify",
        "categories": [
          "Tech",
          "Netlify",
          "Nextjs"
        ],
        "date": "2019-09-11T00:00:00.000Z"
      },
      "content": "\n[Next.js](https://nextjs.org) is an incredible React framework, being the premier Server-side Rendering solution for React which is absolutely critical for performance and SEO of non-static React apps. It also comes with first-class [TypeScript Support](https://nextjs.org/blog/next-9), [Hook-based Routing](https://nextjs.org/learn/basics/navigate-between-pages), and a [fantastic scoped CSS-in-JS solution](https://github.com/zeit/styled-jsx).\n\n## Three Export Modes\n\nOne misperception among the community (certainly something I used to have) is that it has other export modes. Next.js can build to a standard Node.js app with `next build`, however, there are actually three export modes:\n\n- Serverful Node.js: created with the `next build` command\n- Serverless Node.js: with a `serverless` target in `next.config.js` and the `next build` command\n- Static HTML: created with the `next export` command\n\nWhile [Zeit's](https://zeit.co/) `now` v1 is the best host for Serverful Next.js, and `now` v2 is the best host for Serverless Next.js, the Static HTML mode is a diamond in the rough - literally exporting the app to a folder of static assets (both HTML/JS/CSS bundles as well as prefetched data) that can be served from as simple a utility as [Zeit's `serve` CLI](https://github.com/zeit/serve)!\n\n## Static is Universal\n\nWhat is great about a folder you can statically export is that it is the one configuration that literally *everybody* supports. You can host it on a Raspberry Pi if you wish, or on an AWS S3 Bucket, or on a Node server, or heck you can print it out and have a dance crew do an interpretive dance of the code if you want (results may vary)! And if you ever outgrow your chosen hosting solution, you can pick up and move to the next one that suits you best!\n\nThis is the heart of the [JAMstack](https://jamstack.org) idea - reducing vendor lock-in, promoting fast and secure defaults (because there is nothing as fast as serving a static file with all pre-computation already done). Even concerns about programming environment, like operating system and Node.js version, melt away because it literally doesn't matter, therefore you never need to debug them.\n\nThe best part of all, the only configuration to do gets no more complex than figuring out what folder to upload. It harkens back to the drag-and-drop, FTP days that have been with us since the dawn of Web Development.\n\n## Deploying Next.js Static Export to Netlify\n\nFor any basic Next.js app ([you can grab one here if you don't have one](https://github.com/zeit/next-learn-demo)), all you need to do to turn it into a static export app is run:\n\n```bash\nnext build\nnext export\n```\n\nThis builds your site to an `out` folder, which you can host locally by running `npx serve out`.\n\nYou can then use the Netlify CLI to deploy this as a static site:\n\n```bash\n## in case you need to download the CLI and log in\n# npm i -g netlify-cli\n# netlify login\nnetlify init\n## or alternatively\nnetlify deploy\n```\n\nThe only thing you need to know to configure the app is your \"build command\" and \"publish directory\". You can answer these in the CLI prompts, or skip that by creating [a `netlify.toml` config](https://www.netlify.com/docs/netlify-toml-reference/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#getting-started) file:\n\n```toml\n## netlify.toml\n[build]\n  command = \"yarn build && yarn export\"\n  publish = \"out\"\n```\n\nIf you have your project on a Git provider like GitHub, GitLab, and Bitbucket, you can also set up [Continuous Deployment](https://www.netlify.com/docs/continuous-deployment/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) to build and deploy your site after every merge. This is your gateway drug to adding on the rest of Netlify's functionality onto your Next.js app:\n\n- Serverless [Functions](https://www.netlify.com/docs/functions/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex)\n- [Branch Deploys and Deploy Previews](https://www.netlify.com/docs/continuous-deployment/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#branches-deploys)\n- [HTTPS/SSL by default](https://www.netlify.com/docs/ssl/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex)\n- [Unblockable Site Analytics](https://www.netlify.com/docs/analytics/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex)\n- Authentication via [Netlify Identity](https://www.netlify.com/docs/identity/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex)\n- [Forms](https://www.netlify.com/docs/form-handling/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex)\n- and more!\n\n## Next.js as a Static Site *Generator*\n\nBy default, Next.js's static export works on a 1 for 1 basis: if you have a `potato.js` file in your `/pages` folder, that directly maps to `potato.html`. This is fine for authoring static pages with React components and the rest of the React ecosystem, but to truly qualify as a Static Site Generator, it should *generate* pages from data. So for example, given a `/content` folder of markdown files, I should be able to generate a corresponding list of HTML pages from a template. [Gatsby](https://www.gatsbyjs.org) and [React-Static](http://react-static.js.org) are best known for doing this in the React ecosystem, but you may be surprised to learn that Next.js holds it's own here!\n\nData-driven static generation has always been possible with Next.js, but it used to involve a lot of nonstandard [custom server](https://nextjs.org/docs#custom-server-and-routing) coding that raised the bar too high for something predicated on simplicity.\n\nHowever, with [Dynamic Route Segments released in Next.js 9](https://nextjs.org/blog/next-9#dynamic-route-segments), as well as constantly improving static export bugfixes and support, data-driven static site generation in Next.js has never been easier!\n\nFirst we write a `next.config.js` file with the routes we want Next.js to statically export:\n\n```js\nmodule.exports = {\n  exportPathMap: function() {\n    return {\n      '/': { page: '/' }\n      '/about': { page: '/about' }\n      // etc...\n    }\n  }\n}\n```\n\nIn the static export process we previously wrote about, we didn't need to write this file because [Next.js autogenerates your route map since v6](https://zeit.co/blog/next6#static-react-applications). However, there is no way for Next.js to know ahead of time what dynamically generated routes to statically render. That's where Dynamic Route Segments come in.\n\nWith Next.js 9, we can declare a file structure like this:\n\n```bash\n- /pages\n  - index.js\n  - about.js\n  - /blog\n    - [slug].js\n```\n\nWithin `[slug].js`, we can receive that parameter and render the content in React accordingly, effectively turning it into a page template!\n\n```js\nimport { useRouter } from 'next/router'\nexport default () => {\n  const router = useRouter()\n  return <h1>Slug: {router.query.slug}</h1>\n}\n```\n\nHowever this still isn't good enough to make Next.js into a Static Site Generator. We need to pass other information other than the slug to the page, and we also need to tell Next.js how many of each slug it should render. It turns out that `next.config.js` is a very nice place to do this!\n\n```js\n// parses a folder of markdown files into objects. very handy!\nconst jdown = require('jdown') \n\nmodule.exports = {\n  exportPathMap: async function() {\n    // pages we know about beforehand\n    const paths = {\n      '/': { page: '/' },\n      '/about': { page: '/about' }\n    }\n    // dynamic, data-generated pages\n    const content = await jdown('content') // assumes some markdown files in a `/content` folder, with frontmatter that offers a slug\n    const posts = [] // build up array of objects for the top level list\n    Object.entries(content).forEach(([filename, fileContent]) => {\n      // the filename becomes the slug\n      paths[`/blog/${filename}`] = { page: '/blog/[slug]', query: { \n          slug: filename, \n          ...fileContent \n        } \n      }\n    })\n    return paths\n  }\n}\n```\n\nNow we are telling Next.js everything it needs to know - the full path with the slug, and passing in the extra information it needs to fill out the `[slug].js` template.\n\nAnd that's that! If you are familiar with React Static, you'll see strong parallels with [`getRoutes` and `getData` in `static.config.js`](https://github.com/react-static/react-static/blob/master/docs/config.md#route). Gatsby opts for a Redux action based model, and so you use [the provided `createPage`](https://www.gatsbyjs.org/docs/creating-and-modifying-pages/) function to progammatically create pages in plugins and themes.\n\nWith this many choices for static site generation in React, the only task left to do is the hardest one: go forth and write that content!"
    },
    {
      "slug": "netlify-python-ssg",
      "data": {
        "technical": true,
        "title": "Python <3 the JAMstack",
        "subtitle": "Case Study: Portray Docs on Netlify",
        "published": true,
        "slug": "netlify-python-ssg",
        "description": "How to deploy Python projects to Netlify",
        "tags": "python, netlify",
        "categories": [
          "Tech",
          "Netlify",
          "Python"
        ],
        "date": "2019-08-27T00:00:00.000Z",
        "canonical": "https://scotch.io/@sw-yx/python-the-jamstack",
        "cover_image": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSVyXO9qi9y9KqWqYLcofhkaCaxQGMcXIkXht9YOGxLXP9jx1-W"
      },
      "content": "\n_Published on [Scotch.io](https://scotch.io/@sw-yx/python-the-jamstack)_\n\nRecently I was floored to hear Netlify's name on the excellent [TalkPython](https://talkpython.fm/episodes/show/224/12-lessons-from-100-days-of-web) podcast as a place to host Python web development projects. Let's talk about why I originally thought Python doesn't work on Netlify, and why that is wrong.\n\n**TL;DR**: In this post we cover how to set up any Python Static Site Generator to deploy on Netlify, using the newly launched [Portray](https://timothycrosley.github.io/portray/) documentation generator as an example.\n\n![Example Usage Gif](https://raw.githubusercontent.com/timothycrosley/portray/master/art/example.gif)\n\n## Python is for the Web, too\n\nFirst, some personal history. In my previous career, [I used Python for data analysis](https://podcast.freecodecamp.org/ep-59-shawn-wang-left-a-350kyear-finance-job-to-learn-to-code), thanks to the awesome time series and data munging capabilities of [pandas](https://pandas.pydata.org/) and [numpy](https://www.numpy.org/). Today, as a part time [Machine Learning student](http://www.omscs.gatech.edu/), I use frameworks like [scipy](https://www.scipy.org/) and [Tensorflow](https://www.tensorflow.org/) to declaratively create neural networks and data pipelines. So: a lot of number crunching, not very much web development.\n\nOver time, I slowly learned that people are creating web experiences using Python too. A previous startup I worked at used the venerable and full featured [Django](https://www.djangoproject.com/) framework, while I am aware that [Flask](https://palletsprojects.com/p/flask/) and [Pyramid](https://trypyramid.com/) are lighter weight frameworks ([here's a full list I found](https://wiki.python.org/moin/WebFrameworks)).\n\nHowever, these are all server-side based technologies. This comes with all the complexities of deploying and scaling servers, which are [well documented issues](https://www.netlify.com/blog/2018/10/09/netlify-raises-30m-to-replace-webservers-with-a-global-application-delivery-network/?utm_source=blog&utm_medium=devto&utm_campaign=devex) that often have little to do with the business goals you actually want to achieve, like continuously deploying your site. So I figured that Python would not be a popular JAMstack language.\n\n## 40 Python Static Site Generators (and counting!)\n\nIt turns out I had a massive blind spot. Python has a rich set of Static Site Generators! I went to [StaticGen.com](https://www.staticgen.com/?utm_source=blog&utm_medium=devto&utm_campaign=devex) and filtered for the Python language and found 40 SSG's:\n\n- [Acrylamid](http://posativ.org/acrylamid/): Static blog or site generator\n- [Bang](https://github.com/squdle/Bang): Quirky text processor and static website generator.\n- [Blended](http://jmroper.com/blended/): The Most Versatile Static HTML Site Generator\n- [Blo](https://github.com/savuir/blo): Static site generator for easy personal blogging\n- [Blogofile](http://blogofile.com): A static website compiler and blog engine, written and extended in Python\n- [BootDown](http://project.geekweaver.com/): Extremely simple static sites with Markdown and BootStrap.\n- [Cactus](https://github.com/koenbok/Cactus/): Static site generator for designers.\n- [django-distill](https://github.com/mgrp/django-distill): django-distill lets you to create and publish a static website from any Django project.\n- [docnado](https://heinventions.github.io/docnado-site/): A rapid documentation tool to blow you away! Batteries and style included; you just need to type.\n- [drupan](https://github.com/fallenhitokiri/drupan): trying to hit the sweet spot between simplicity and being feature rich enough for every use case.\n- [Elsa](https://github.com/pyvec/elsa): Helper module for hosting Frozen-Flask-based websites on GitHub Pages\n- [Frozen-Flask](https://pythonhosted.org/Frozen-Flask/): Frozen-Flask freezes a Flask application into a set of static files.\n- [Grow](https://grow.io/): Grow is a declarative, file-based static site generator for building maintainable, high-quality websites.\n- [Halwa](https://github.com/mhlakhani/halwa): Halwa is a single file static site generator written in Python.\n- [Hyde](http://hyde.github.io/): Jekyll's evil Python powered twin\n- [Landspout](https://github.com/gmr/landspout): A simple static site generation tool\n- [Lektor](https://www.getlektor.com/): A static content management system that can deploy to any webserver.\n- [makesite.py](https://github.com/sunainapai/makesite): Simple, lightweight, and magic-free static site/blog generator for Python coders.\n- [MkDocs](http://www.mkdocs.org/): Project documentation with Markdown.\n- [Nikola](http://www.getnikola.com): A static website and blog generator\n- [Pagegen](http://pagegen.phnd.net): Manage sites and blogs, SEO friendly.\n- [Pelican](http://blog.getpelican.com/): A static site generator, imports from Wordpress, multi-lang publishing.\n- [PieCrust2](http://bolt80.com/piecrust): PieCrust is a static website generator and flat-file CMS\n- [Poole](https://bitbucket.org/obensonne/poole/): A simple Markdown static site generator.\n- [Prosopopee](https://github.com/Psycojoker/prosopopee): A static website generator that allows you to tell a story with your pictures\n- [PyKwiki](http://pykwiki.nullism.com): Markdown based authoring with static search.\n- [pystatic](https://github.com/Zedelghem/pystatic): Dead simple, one-line, few options static website generator. Just write your stuff instead of learning generators.\n- [QPage](http://www.qpage.ir): QPage or QuickPage is a free project for creating academic homepage without any code\n- [Sphinx](http://www.sphinx-doc.org/): A tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl.\n- [staticjinja](http://staticjinja.readthedocs.org/en/latest/): Effortlessly deploy static sites with Jinja2.\n- [Statify](https://github.com/NBens/Statify): Simple, lightweight, one file static site generator, Powered by Python 3 & Jninja2.\n- [Statik](https://getstatik.com/): A simple, generic, static web site generator for developers.\n- [Tags](http://tags.brace.io/): The simplest static site generator\n- [Tarbell](http://tarbell.io): Simple static sites for storytellers.\n- [Tinkerer](http://tinkerer.me): Tinkerer is a blogging engine/static website generator powered by Sphinx\n- [Tiny SSG](https://github.com/Herve07h22/tinySSG): static site generator built with Python, with some interesting features for pre-processing the images.\n- [Urubu](http://urubu.jandecaluwe.com): A micro CMS for static websites\n- [Vite](https://github.com/icyphox/vite): A simple and minimal static site generator\n- [wok](http://wok.mythmon.com/): Toss some content, templates, and media in a pan and fry it up!\n- [YASBE](http://github.com/underr/yasbe): Yet Another Static Blog Engine\n\nAnd just yesterday, I found a new one, [Portray](https://timothycrosley.github.io/portray/), at the [top of Hacker News](https://news.ycombinator.com/item?id=20800157)! Clearly this innovation is not over.\n\n[Static Site Generators are resoundingly JAMstack](https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/). That means Netlify should support Python based SSGs too. Let's see if we can!\n\n## Deploying Portray (or any Python SSG) on Netlify\n\nFirst I have to figure out how to get `portray` up and running. I have Python 3 installed, so I installed `portray` using pip3:\n\n```bash\npip3 install portray\n```\n\nI needed a sample `portray` project to show some docs, so why not portray `portray`? I [forked the project](https://github.com/sw-yx/portray) and cloned it locally:\n\n```bash\ngit clone https://github.com/YOUR_USERNAME_HERE/portray\ncd portray\nportray in_browser\n```\n\nThis launched a local dev server in `127.0.0.1:8000` and ensured that I knew how this web development thing works 😅\n\nPortray has a built in deploy to GitHub Pages functionality, but we'll want to configure this for deployment to Netlify for some other features:\n\n- [Deploy Previews](https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex), the #1 killer feature for open source documentation projects or team collaboration\n- [HTTPS by default](https://www.netlify.com/docs/ssl/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex)\n- [Continuous Deployment](https://www.netlify.com/docs/continuous-deployment/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) (so all you need to do to update your docs is literally edit them in GitHub, which you can do on your phone)\n- [Forms](https://www.netlify.com/docs/form-handling/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) for comments, file storage and other simple user input\n- [Functions](https://www.netlify.com/docs/functions/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) for anything else more complex\n\nNetlify still defaults to Python 2.7 (👿) so we'll need to fix it to 3.7 (which Portray needs) [according to the Netlify docs](https://www.netlify.com/docs/build-settings/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#python):\n\n```python\n# runtime.txt\n3.7\n```\n\nWe'll also want to get Netlify to install Portray itself via `requirements.txt`:\n\n```python\n# requirements.txt\nportray==1.0.5\n```\n\nThat sets up the environment, but the final step is to configure the build setup (aka tell Netlify the information it needs to do things for you). There are a few equivalent ways to do this, so I'll walk through 3 of the most popular. What's common among all of them is you need to know upfront:\n\n- the build `command`: `portray as_html` (what command you type into your terminal to do a production build of your site)\n- the `publish` folder: `site` (what folder the above build command builds to, so we only publish this specific folder to our CDN)\n\n## Option 1: Configuring Build Commands through Netlify Web UI\n\nWith an existing Netlify account, head to `https://app.netlify.com/start` and select the appropriate repo. Then fill in the build command and deploy directory:\n\n![image](https://user-images.githubusercontent.com/6764957/63789820-1f8e2580-c8c6-11e9-9445-b4950f710b22.png)\n\nThat's it! That sets up the site and continuous deployment for you and gives you the basis for all the other [features of Netlify](https://www.netlify.com/pricing/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#features).\n\n## Option 2: Configuring Build Commands through the Netlify Dev CLI\n\nThis is for the people (like me!) who rather not leave their terminals. With the [Netlify CLI](https://www.netlify.com/docs/cli/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) installed and logged in, you can take any project and run a single command to set it up for a new site:\n\n```bash\n# at the project root\nnetlify init\n```\n\nIf your project has a git remote (on GitHub, GitLab or Bitbucket), it will set up continuous deployment for you, else it will assume you want a \"manual deploy\" (you can fix this later with `netlify link`). The CLI will ask you for the build command and deploy directory and scaffold out the [netlify.toml config file](https://www.netlify.com/docs/netlify-toml-reference/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) for you:\n\n```toml\n# example netlify.toml\n[build]\n  command = \"portray as_html\"\n  publish = \"site\"\n\n## more info https://www.netlify.com/docs/netlify-toml-reference/\n```\n\nIf you need to do manual deployments, you can always run `netlify deploy --prod`, but we do encourage continuous deployment from git as a best practice.\n\n## Option 3: One Click Deploy Buttons\n\nThe `netlify.toml` file explained above is useful for more than deploying just your site. If you check it into git, then people who fork your repo also get this configuration for free. Try it! We have this set up as a nice [Deploy to Netlify](https://www.netlify.com/docs/deploy-button/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) button you can add to your README:\n\n![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)[Deploy To Netlify](https://app.netlify.com/start/deploy?repository=https://github.com/sw-yx/portray) (I used a text link because Scotch.io is buggy)\n\nThat sets up the fork and a new site in one click!\n\n## Python is my JAM\n\nHopefully this is helpful for any Python users out there looking for a great way to host their JAMstack sites (particularly docs) on Netlify.\n"
    },
    {
      "slug": "netlify-redirects-i18n",
      "data": {
        "technical": true,
        "title": "JAMstack or 'Pilha de Atolamento'?",
        "subtitle": "Let Your User Decide (i18n in Gatsby + Netlify)",
        "slug": "netlify-redirects-i18n",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "started": "2019-08-19T00:00:00.000Z",
        "date": "2019-08-21T00:00:00.000Z",
        "canonical": "https://scotch.io/@sw-yx/jamstack-or-pilha-de-atolamento-let-your-user-decide-i18n-in-gatsby-netlify",
        "tweet": "https://twitter.com/swyx/status/1164328143571677185"
      },
      "content": "\n_Published on [Scotch.io](https://scotch.io/@sw-yx/jamstack-or-pilha-de-atolamento-let-your-user-decide-i18n-in-gatsby-netlify)_\n\nInternationalization (often shortened to i18n) is an important part of your app's world domination plans, but do it badly and you risk shipping your leaning Tower of Babel app to emerging markets users that don't even speak English. Or worse, you might accidentally deny users who _can_ speak English, access to your English content! In this post, we explore how to intelligently internationalize your apps and yet allow your users to opt out when appropriate, and provide a Gatsby + Netlify example for you to explore a proof of concept with English and Portuguese translations.\n\n![gatsby-netlify-i18n](https://user-images.githubusercontent.com/6764957/63299767-8b5c0700-c2a4-11e9-880b-7e45615cb502.gif)\n\nYou can [see the Demo here](https://gatsby-netlify-i18n-demo.netlify.com) and its [source is on GitHub](https://github.com/sw-yx/gatsby-netlify-i18n-redirects).\n\n## Naive Route-based or Client-side i18n\n\nURL design can greatly affect the desired i18n solution. For example, you can choose to offer your languages by subdomains:\n\n- English: `www.mydomain.com`, `en.mydomain.com`\n- Portuguese: `pt.mydomain.com`\n\nThis may involve a complex deployment and DNS strategy, although it can be made easier with each subdomain belonging to a git branch with [Netlify DNS Branch Subdomains](https://www.netlify.com/docs/custom-domains/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#branch-subdomains). With a good CI/CD system, this strategy is quite maintainable.\n\nThere is some concern about the SEO optimality of this strategy as each subdomain is no longer an exact match. Under this schema, links to a domain in one language don't contribute as much as everyone linking to the same URL.\n\nA close second which may be a better fit if your company or client has physical local subsidiaries may be to use country code TLDs:\n\n- USA: `www.mydomain.com`\n- Brazil: `www.mydomain.com.br`\n- Portugal: `www.mydomain.com.pt`\n\nHowever most companies without a local presence will find this DNS strategy difficult to manage.\n\nThe last, route-based strategy is the one we will consider for most smaller sites:\n\n- English: `www.mydomain.com`, `www.mydomain.com/en`\n- Portuguese: `www.mydomain.com/pt`\n\nSEO, Code sharing, deployment, and incremental migration will be more straightforward here. At the extreme of simplicity, with a dynamic Single-Page App client, one can even abandon all route-based i18n; just process and display i18n content based on a simple setting stored as a cookie or localstorage or even together with authentication preferences. However, this isn't encouraged as it does give up the full SEO and speed benefits of having a statically rendered app.\n\nLet's look at how to set up route-based i18n with React and Gatsby.\n\n## i18n in Gatsby\n\nReact and Gatsby abound with great options for i18n. [`react-i18next`](https://github.com/i18next/react-i18next), [`lingui`](https://github.com/lingui/js-lingui), [`react-intl`](https://github.com/yahoo/react-intl) are great React options, while [`gatsby-plugin-i18n`](https://npm.im/gatsby-plugin-i18n) streamlines the static rendering story with Gatsby.\n\nTo add i18n to your Gatsby app, install the plugin:\n\n```bash\nnpm i gatsby-plugin-i18n react-intl\n```\n\nThen configure the plugin accordingly:\n\n```js\n// gatsby-config.js\nmodule.exports = {\n  siteMetadata: {\n    // ...\n    languages: ['en', 'pt']\n  },\n  plugins: [\n    // ...\n    {\n      resolve: 'gatsby-plugin-i18n',\n      options: {\n        langKeyForNull: 'any',\n        langKeyDefault: 'en', // or pick your preferred default\n        useLangKeyLayout: true,\n        prefixDefault: true // adds a route for your default language, en\n      }\n    }\n  ]\n}\n```\n\nYou can then set up your i18n according to the [`react-intl`](https://github.com/yahoo/react-intl) API, however for Gatsby you'll want to pay attention to the magic `src/pages` folder, where you now can provide pages in two languages:\n\n```bash\n- src\n  - pages\n    - index.en.js # mydomain.com/en/\n    - index.pt.js # mydomain.com/pt/\n    - page-2.en.js # mydomain.com/en/page-2\n    - page-2.pt.js # mydomain.com/pt/page-2\n```\n\nNotice how the language prefixes are correctly inferred from the file name syntax. See [the rest of our demo code](https://github.com/sw-yx/gatsby-netlify-i18n-redirects) for ideas on customizing relative links and drawing translated messages from a static file (a common i18n workflow). In particular, a design goal I would encourage is allowing the user to change languages in the site navigation, as it serves as an important visual indication that a more suitable translation may be available.\n\nAbove all, remember that you're still working with the full flexibility of JavaScript and you are free to set up reusable code in a way that makes sense for your app. Code reuse is maximized where there is no language specific assumption in it (in particular, don't forget the needs of Right-To-Left languages if you anticipate needing that!).\n\nWith a route-based strategy, the user still has to choose what language they want to read your content in. But you, as a modern web developer, can do better than that! Let's look at options for automatically picking your language based on what the user already uses.\n\n## Content Negotiation: Serving Exactly What the User Wants\n\nUniform Resource Identifiers ([URIs](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)) are the backbone of how we link to and request resources on the Internet. (You may be more familiar with the terminology of \"URLs\" - there is [some debate on the the difference](https://danielmiessler.com/study/url-uri/), but URI is more general). The Web wouldn't be very interesting if we couldn't link to and download things from other servers.\n\nWe tend to think of URIs as boring, immutable things - request a resource, and get back whatever is there (all diagrams are from [MDN](https://mdn.mozillademos.org/files/13789/HTTPNego.png)):\n\n![https://mdn.mozillademos.org/files/13789/HTTPNego.png](https://mdn.mozillademos.org/files/13789/HTTPNego.png)\n\nHowever, this is not quite true. Web developers are most commonly familiar with the contingent nature of HTTP requests where it comes to REST APIs.\n\n![https://phpenthusiast.com/theme/assets/images/blog/what_is_rest_api.png](https://phpenthusiast.com/theme/assets/images/blog/what_is_rest_api.png)\n\nIf we send a POST request to an endpoint, we would expect it to behave differently than a GET or DELETE or PUT request.\n\nSimilarly, this conditional behavior also happens for files requested by their URI's!\n\nImportantly, the principle URI's espouse is [uniformity](https://en.wiktionary.org/wiki/uniformity) to a predefined syntax (e.g. `https://foo.bar/baz.jpg`). The **U** in **URI** doesn't mean \"Unique\", whereas a [Content Addressable Network](https://en.wikipedia.org/wiki/Content_addressable_network) would be a stronger guarantee of uniqueness. What you actually get when you request a URI depends on what you included in your request, in much the same way that I might address a letter to your home, but different people might open it depending on whose name I put on the letter.\n\nIn **Content Negotiation**, the browser sends a range of headers which indicates the user's preferences. The `Accept` header is often used to either return `json` or `xml` or `html` or any other number of file formats. In future, the [`Client Hints`](https://developer.mozilla.org/en-US/docs/Glossary/Client_hints) spec may give indications for viewport size and pixel resolution for better optimized mobile performance. But for internationalization, the relevant header is the [`Accept-Language`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header, indicating the languages preferred by the user by language code. Here's a fuller picture of the request-response cycle with headers:\n\n![https://mdn.mozillademos.org/files/13791/HTTPNegoServer.png](https://mdn.mozillademos.org/files/13791/HTTPNegoServer.png)\n\nSince this header is attached by default, we should take advantage of it to adapt our content to the system defaults of the user.\n\nWith this ability, ALL inbound links to content can point to `www.mydomain.com`, and get maximum SEO juice, while also preserving the speed of a JAMstack site with intelligent i18n customization based on the user's own language! This is the best of all worlds, but the _real_ good news is: it's all configurable with a few lines of redirects!\n\n## Redirecting based on `Accept-Language`\n\nFirst we have to make our server understand the `Accept-Language` header and differentially redirect the user based on the header. This is difficult if we're working in a JAMstack environment with no running server!\n\nCue cutscenes of frantically rummaging through `.htaccess` files and Route53 documentation...\n\nFortunately, Netlify does offer [Redirects](https://www.netlify.com/docs/redirects/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex) for this exact use case.\n\nNetlify Redirects can take two forms - a `_redirects` file in the publish directory root folder, or `toml` rules in the central [`netlify.toml`](https://www.netlify.com/docs/netlify-toml-reference/) config file.\n\nSo a simple redirect from `/` to `/en` can either look like this:\n\n```bash\n## _redirects\n/             /en\n```\n\nand with HTTP Status Codes:\n\n```bash\n## _redirects\n/   /en  302\n```\n\nor, if more conditional and expressive power is required:\n\n```toml\n##  netlify.toml\n[[redirects]]\n  from = \"/\"\n  to = \"/en\"\n```\n\nHowever that only redirects requests for `/index.html` to `/en/index.html`. What about all the other files, like requests for `/page-2.html` to `/en/page-2.html` and all other associated CSS and image files? That's where a [splat rule](https://www.netlify.com/docs/redirects/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#splats) comes in!\n\n```bash\n## _redirects\n/*   /en/:splat 302\n```\n\nWe don't actually want to redirect EVERYTHING to `/en/*`, that would defeat the purpose of i18n altogether. The last piece of this puzzle is making it conditional based on the [`Accept-Language` header](https://www.netlify.com/docs/redirects/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#geoip-and-language-based-redirects):\n\n```bash\n## _redirects\n/*  /en/:splat   302  Language=en\n/*  /pt/:splat   302  Language=pt\n```\n\nSome browsers, especially mobile browsers, don't have any language settings though. So make sure to have some fallback (here we fallback to English):\n\n```bash\n## _redirects\n/*  /pt/:splat   302  Language=pt\n/*  /en/:splat   302\n```\n\nVoila! You can test this in Chrome by going to `chrome://settings/languages` (or alternatively, navigate Settings > Advanced Settings > Languages > Language) and switching up the order of languages you have configured to accept.\n\n![image](https://user-images.githubusercontent.com/6764957/63475659-d2383100-c44b-11e9-991a-fc663cd9bdf1.png)\n\nHowever we've subtly introduced a user experience bug here. Assume your user is bilingual, using a Portuguese-preferring browser. For whatever reason (incomplete translation, temporary language loss) they need to switch over to your English version. If they try to manually navigate over to the English version and refresh the page - we don't let them! 😱 Because we _only_ check the `Accept-Language` header. We need to get smarter than this.\n\n## Freedom to Choose\n\nThis is the final UX principle to check for in a i18n setup - you can take clever hints from your user, but never assume you know more than your user about what they want.\n\nIf they want `en`, give them `en`.\n\nThere are two ways to do this in the setup we have built so far. Since redirects match in sequence, we can extend our redirects to match more eagerly for specfic matches:\n\n```bash\n## _redirects\n/en  /en/:splat   302\n/pt  /pt/:splat   302\n/*  /pt/:splat   302  Language=pt\n/*  /en/:splat   302\n```\n\nThis way, the language agnostic pages can redirect intelligently, while the the language specific pages bypass all redirection, giving full control to the user. The last rule is the catchall, fallback rule that matches everything the others don't.\n\nLastly, since the `nf_lang` cookie overrides the browser language setting in [Language Based Redirects](https://www.netlify.com/docs/redirects/?utm_source=blog&utm_medium=scotchio&utm_campaign=devex#geoip-and-language-based-redirects), you can also create a user interface to set that cookie in JavaScript.\n\nFinally, you will have arrived at the full intelligent i18n flow, with great user control:\n\n![gatsby-netlify-i18n](https://user-images.githubusercontent.com/6764957/63299767-8b5c0700-c2a4-11e9-880b-7e45615cb502.gif)\n\nAs a reminder, you can [see the full demo here](https://gatsby-netlify-i18n-demo.netlify.com) and its [source is on GitHub](https://github.com/sw-yx/gatsby-netlify-i18n-redirects).\n\nIf you've got any feedback or would like to share this, you can [find this article's tweet here](https://twitter.com/swyx/status/1164328143571677185)!\n"
    },
    {
      "slug": "netlify-worlds-greatest-demo-v0",
      "data": {
        "technical": true,
        "title": "The World's Greatest Netlify Demo v0",
        "slug": "netlify-worlds-greatest-demo-v0",
        "categories": [
          "Tech",
          "Netlify"
        ],
        "started": "2019-08-26T00:00:00.000Z",
        "date": "2019-09-24T00:00:00.000Z"
      },
      "content": "\n_Note: this was published as the Complete Intro to Netlify on the FreeCodeCamp Channel_\n\nHi everyone! I'm swyx and I'm happy to be sharing this walkthrough with you!\n\nI learned Web Dev through FreeCodeCamp 3 years ago and back then I struggled a lot with getting my projects online, at first through Cloud9 and then Heroku. I only found Netlify a year later and realized that deploying and scaling is a lot easier with the JAMstack approach, especially with modern front-end frameworks like React and Vue. So this is the video series I wish I had when I started out!\n\n# How to Build Everything with Netlify in 4 hours\n\n## Part 1: 🗺️ Netlify Edge\n\n- 4 methods\n  - Netlify Drop\n  - Netlify CLI **separate video**\n  - Continuous Deploy to Netlify\n    - Deploy Hooks\n    - Private repos https://url.netlify.com/rJ-WZsqwS\n  - Deploy to Netlify Button\n    - https://url.netlify.com/SkmMWo5wH\n    - more ways (Siri, Wand, Watch, CodeSandbox) https://url.netlify.com/rkRMZjcPB\n- Functions\n  - add a sample JS and Go function\n  - setting Functions folder in app\n  - setting Functions folder in netlify.toml\n  - Event Triggered Functions\n    - `deploy-building`, `deploy-succeeded`, `deploy-failed`, `deploy-locked`, `deploy-unlocked`\n    - Env variables\n      - INCOMING_HOOK_TITLE, INCOMING_HOOK_URL, INCOMING_HOOK_BODY https://url.netlify.com/ryqXbo5Pr\n  - AWS Lambda versions: AWS_LAMBDA_JS_RUNTIME nodejs10.x\n- Defaults\n  - [HTTPS](https://url.netlify.com/S1LVbsqDH)\n  - [Deploy Previews](https://url.netlify.com/By4cWi5Pr)\n    - [Branch deploys](https://url.netlify.com/HyBHboqvB)\n    - Split testing\n      - `split-test-activated`, `split-test-deactivated`, `split-test-modified`\n  - Distributed Deploys, Atomic Deploys, Instant Rollbacks\n- Post Processing\n  - Forms **separate video**\n  - Mixed Content\n  - Prerendering https://url.netlify.com/S1Hj-i9wr\n  - [Asset Optimization](https://url.netlify.com/r1fnZjqvS)\n    - Netlify Large Media\n    - https://url.netlify.com/HyRnZsqDH\n  - Snippet Injection\n    - for GA, eg its more involved if you do it in Nuxt\n- Netlify and Custom Domains\n  - Custom Netlify Domain\n  - Redirects\n    - `_redirects` file\n    - netlify.toml version\n    - Redirects Playground https://url.netlify.com/Syk0-s5wB\n  - Headers\n    - `_headers` file\n    - netlify.toml version\n    - Headers Playground https://url.netlify.com/SJlkMiqDr\n    - Cache control https://url.netlify.com/By2kfoqwr\n    - Auth headers https://url.netlify.com/HkLlfjcwr\n  - [Custom Domains](https://url.netlify.com/B16efs9vr)\n  - Netlify DNS\n    - DNS Docs https://url.netlify.com/Bk5-GsqwB\n    - Community Common Issue: Should you use Netlify DNS? https://url.netlify.com/Sy_MficDr\n    - Migrating to Netlify DNS with minimal downtime https://url.netlify.com/HykBGocvB\n  - Emails https://url.netlify.com/SkWIMi5PH\n- CDN Tips\n  - Faster deploys https://url.netlify.com/BJiLMscDB\n  - Enterprise https://url.netlify.com/B1zvGsqDS\n\n## Part 2: ⚒️ Netlify Build\n\n- Netlify ❤️ Build Tools and SSGs\n  - StaticGen.com https://url.netlify.com/ryQFMscwr\n  - https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/\n- Understand The Build Process\n  - You can always local build!!! You May Not Need CD™\n  - Build Settings and where to set them\n    - Build Settings Docs https://url.netlify.com/Syr5ficPH\n    - in app\n    - netlify.toml (override)\n  - the Build Bot\n    - How it Works https://url.netlify.com/BJMifs9wS\n    - https://github.com/netlify/build-image/blob/master/run-build.sh\n  - Build stages and Reading Logs\n    - Netlify App Logs https://url.netlify.com/SJEpGi9wH\n    - Netlify Site Logs https://url.netlify.com/BykRMi9Pr\n    - Fetch from cache\n      - NETLIFY_CACHE_DIR = \"/opt/build/cache\"\n      - https://github.com/DavidWells/cache-me-outside\n    - Install\n    - Build\n    - Package & optimize\n    - Save cache\n    - (post processing)\n    - Deploy\n    - Output manifest\n  - Concurrent Builds and Canceling Builds\n  - Gotchas\n    - Common Build Gotchas https://url.netlify.com/H1hAMocDH\n    - 15 min rule\n    - Permissions and API Secrets\n    - Think about what folder you are deploying\n    - Community Build tips https://url.netlify.com/BJjJ7jqDH\n  - Troubleshooting\n    - Read your build logs\n    - Make sure you can build locally\n    - Hidden Dependencies\n      - Environment version\n      - Yarn vs npm\n      - Preinstalled Grunt/Hugo/Bower etc\n    - Netlify Community https://url.netlify.com/BysgQs5wS\n- Environment Variables\n  - Where to set them\n  - https://gist.github.com/sw-yx/c53634e7e63f0015e43c16bc26832283\n  - https://scotch.io/@sw-yx/netlify-environment-variables-the-cheat-codes-of-the-internet\n\n## Part 3: 👩🏼‍💻 Netlify Dev\n\n- Netlify Dev\n  - Docs https://url.netlify.com/B1k5Xjcvr\n  - netlify dev (netlify.toml)\n    - command\n    - port\n  - netlify dev (detector)\n    - env vars\n    - redirects\n  - netlify dev --live (_beta_)\n  - netlify functions:create\n  - netlify functions:invoke\n- netlify-lambda\n  - netlify-lambda install\n  - netlify-lambda build\n\n## Part 4: 🗒️ Netlify Forms\n\n- Introducing Forms in plain HTML\n- File Uploads\n- Customize Post-Submit page\n- Slack/Email/Webhook Notifications\n- Zapier\n- `submission-created`\n- Spam Filtering\n  - Akismet\n  - Honeypot\n  - Recaptcha\n- Forms in Single Page Apps\n- Forms in Gatsby\n- AJAX form submissions\n\n## Part 5: 🆔 Netlify Identity\n\n- Before Identity: Password Protection and Role Based Access Control\n  - Netlify Password Protection https://url.netlify.com/Sk1fQoqvB\n  - Netlify RBAC https://url.netlify.com/HkoMXjqvH\n- Identity\n  - Enable Netlify Identity\n  - Identity on a boilerplate\n  - Adding `netlify-identity-widget`\n  - Important settings\n    - open signup vs invite only\n    - confirm vs don't confirm\n    - External providers\n    - Email templates\n  - Metadata\n    - User metadata\n    - App metadata\n  - `gotrue-js` and friends\n    - `gotrue`\n    - `react-netlify-identity`\n    - `react-netlify-identity-widget`\n    - `gatsby-plugin-react-netlify-identity`\n  - Authenticated Functions: Identity + Functions\n    - `netlify functions:invoke`\n  - Event Triggered Functions\n    - `identity-validate`: before sign up\n    - `identity-signup`: on sign up\n      - Note: this fires for only email+password signups, not for signups via external providers e.g. Google/GitHub\n    - `identity-login`: on log in\n  - Retrieving Netlify Form Info in Function\n    - https://jamstack-comments.netlify.com\n    - https://open-api.netlify.com/\n  - Paid features\n    - Branded OAuth\n    - SSO\n    - Audit log\n    - Custom sender\n\n## Part 6: ✍️ NetlifyCMS\n\n- Concepts and Config\n  - Admin Endpoint: /admin\n  - Writing: WYSIWYG and Previewing\n  - Editorial Workflow: Draft - Review - Ready\n  - Media and Public folders\n  - NetlifyCMS Backends\n    - Git Gateway + Netlify Identity\n      - Docs https://url.netlify.com/SyTimjcwS\n      - https://github.com/netlify/git-gateway\n      - https://www.netlifycms.org/docs/authentication-backends/\n    - GitHub backend\n    - GitLab backend\n    - Bitbucket backend\n- Clone from Template\n- Config\n  - https://www.netlifycms.org/docs/configuration-options/\n  - Collections\n    - Folder vs File\n      - https://www.netlifycms.org/docs/collection-types/\n    - Filter (published?)\n    - https://www.netlifycms.org/docs/add-to-your-site/#collections\n  - Widgets\n    - Default Widgets\n    - Custom Widgets\n- Scheduled Posts\n  - Zapier Netlify Integration https://url.netlify.com/SkP77i9DH\n  - https://flaviocopes.com/netlify-auto-deploy/\n  - https://davidwells.io/work/static-site-post-scheduler\n- Media\n  - Cloudinary\n  - Uploadcare\n  - Netlify Large Media\n\n## Part 7: ➕ Netlify Addons: Everything Else!\n\n- Analytics\n  - Netlify Analytics Product Page https://url.netlify.com/SkNVQs9wB\n  - Analytics Docs https://url.netlify.com/r1OB7ocwB\n  - Unblockable, No personal info\n  - What unique visitors are\n  - Missing files\n- Large Media\n  - https://git-lfs.github.com/\n  - Large Media Docs https://url.netlify.com/HyRnZsqDH\n  - Large Media Product Page https://url.netlify.com/SJoX4i9DS\n  - https://netlify-photo-gallery.netlify.com\n  - Image Transformation Docs https://url.netlify.com/BkOEEi5wB\n- Addon Marketplace\n  - Partner Addon Docs https://url.netlify.com/SyrSNo5PB\n  - Fauna DB\n    - What is Fauna? https://softwareengineeringdaily.com/2019/03/21/faunadb-with-evan-weaver/\n    - Functions + Fauna Blogpost https://url.netlify.com/B1MLEi9vr\n    - Fauna Addon Announcement https://url.netlify.com/HJ0UVicDH\n    - https://github.com/fauna/netlify-faunadb-todomvc\n    - https://github.com/netlify/netlify-faunadb-example\n    - https://docs.fauna.com/fauna/current/start/netlify\n  - Very Good Security\n    - https://www.youtube.com/watch?v=k2I_4u8_I9s\n    - https://www.youtube.com/watch?v=wtYzLdpSeJo\n    - https://www.verygoodsecurity.com/docs/getting-started\n    - https://www.verygoodsecurity.com/docs/integrations/netlify\n    - https://github.com/verygoodsecurity/netlify-addon-demo\n    - https://github.com/verygoodsecurity/netlify-addon-example\n- Premium Addons\n  - Support\n  - Performance ADN\n\n## Part 8: 🍻 Netlify API\n\n- Make Your Own Netlify Client\n- Example Clients\n  - https://app.netlify.com\n  - https://github.com/netlify/cli\n  - https://github.com/stefanjudis/netlify-menubar\n  - https://github.com/ShailenNaidoo/Netlify\n- API docs https://url.netlify.com/H1zONoqDr\n- OpenAPI docsite https://url.netlify.com/rJ6dVo5wH\n- Netlify Libraries\n  - https://github.com/netlify/js-client\n  - https://github.com/netlify/open-api\n  - https://github.com/netlify/cli-utils/\n\n## Part 9: ❓ Learn More\n\n- Status\n  - https://twitter.com/netlifystatus\n  - https://www.netlifystatus.com/\n- Troubleshoot\n  - https://www.netlify.com/docs/build-gotchas/\n  - http://community.netlify.com\n  - https://www.netlify.com/support/\n  - https://twitter.com/netlifysupport\n- Talks\n  - Mathias Biilmann https://vimeo.com/163522126\n  - Chris Coyier https://youtu.be/VwjXUGFQjYg\n  - Sarah Drasner https://youtu.be/COAVmST41Q0\n  - Phil Hawksworth https://vimeo.com/348733803\n  - Citrix's Beth Pollock & Luis Ugarte - Delivering more to customers with less overhead https://youtu.be/kvS5h5domf0\n  - Quincy Larson - How freeCodeCamp Serves Millions of Learners Using the JAMstack https://youtu.be/NVRsYrUl6Cg\n  - Paypal's Jamund Ferguson https://www.infoq.com/presentations/jamstack-enterprise/\n- VC perspective\n  - a16z https://a16z.com/2017/08/09/netlify/\n  - KPCB https://www.kleinerperkins.com/perspectives/netlify-modernizing-the-web/\n  - Redpoint https://medium.com/memory-leak/the-jamstack-its-pretty-sweet-e0834e4e6bb7\n  - CRV https://medium.com/crv-insights/the-jamstack-startup-landscape-c06cc3cdb917\n- Learn More\n  - jamstackconf.com\n  - http://jamstack.org\n  - https://jamstack.slack.com\n  - https://www.thenewdynamic.org/community/\n  - JAMstack Radio https://www.heavybit.com/library/podcasts/jamstack-radio/ep-1-introducing-jamstack-radio/\n  - OReilly Book https://www.netlify.com/oreilly-jamstack/?utm_source=freecodecamp&utm_medium=fcc9partswyx&utm_campaign=devex\n"
    },
    {
      "slug": "node-red-intro",
      "data": {
        "technical": true,
        "title": "Intro to Node-RED",
        "subtitle": "Visual Programming for Personal Automation",
        "slug": "node-red-intro",
        "categories": [
          "Automation"
        ],
        "date": "2020-02-08T00:00:00.000Z"
      },
      "content": "\nI dipped into [my automation repo](https://github.com/sw-yx/automation/blob/master/README.md) today and explored Huginn. It didn't really appeal so I looked for alternatives and found [Node-RED](https://nodered.org/). It uses a much more familiar toolchain (JS) and is draggy-droppy which I likey!\n\nHere's [a 10min video I made about how to get started](https://youtu.be/5CDNto1TvF0). It was surprisingly easy."
    },
    {
      "slug": "react-distros",
      "data": {
        "technical": true,
        "title": "React Distros",
        "subtitle": "and The Deployment Age of JavaScript Frameworks",
        "slug": "react-distros",
        "categories": [
          "React"
        ],
        "date": "2020-02-19T00:00:00.000Z",
        "description": "Why we no longer have frontend framework wars, and musing on the state of React metaframeworks today and tomorrow"
      },
      "content": "\nJames K Nelson [raised an interesting point](https://twitter.com/james_k_nelson/status/1229649680872558592) recently:\n\n> So Mr. Abramov has been telling us #reactjs is a UI runtime. \n>\n> To me, that sounds like React is a kernel. Webpack/Create React App are bootloaders. Next.js and Gatsby are the closest things we've got to distros.\n>\n> I think we need more distros.\n\nIn case you, like me, weren't sure what bootloaders are, Google says a \"*Bootloader is a piece of code that runs before any operating system is running. Bootloader are used to boot other operating systems, usually each operating system has a set of bootloaders specific for it*\". I guess Webpack's runtime is that, but it is also a compiling mechanism from, well, `/src` to `/dist`.\n\nAnyway, the analogy [rings true](https://twitter.com/dan_abramov/status/1229884766394232838). I'd like to expand on it a little.\n\n## Table of Contents\n\n## The Carlota Perez Framework\n\nThe VC world is particularly enamored with [The Carlota Perez Framework](http://reactionwheel.net/2015/10/the-deployment-age.html) right now. Both [Fred Wilson](https://avc.com/2015/02/the-carlota-perez-framework/) and [Marc Andreesen](https://www.stanforddaily.com/2014/03/05/marc-andreessens-view-from-the-top-part-2-of-2/) love it, and [Ben Thompson](https://stratechery.com/2020/the-end-of-the-beginning/), [Benedict Evans](https://twitter.com/benedictevans/status/1059865573608239105?lang=en) and [Tuur Demeester](https://twitter.com/TuurDemeester) have extended it to BigTech, Smartphones, and Cryptocurrency recently.\n\nPeople love dissing techbros as reinventing things every 10 years in an endless and meaningless cycle. But in reality the real Megatrends often take on a different shape.\n\n![https://i0.wp.com/reactionwheel.net/wp-content/uploads/2015/09/The-Deployment-Age.004.png?w=1280](https://i0.wp.com/reactionwheel.net/wp-content/uploads/2015/09/The-Deployment-Age.004.png?w=1280)\n\nThe X axis takes place on the order of 20-50 years, and the Y axis is % of population penetration. This has played out repeatedly in the past century and adoption is accelerating as we get better at distribution:\n\n[![https://steemitimages.com/1280x0/https://steemitimages.com/DQmVcSfmG5y1J3n3qKCkm53AbMkQiSGrU4XV8QaRbg3i3D4/blackrock-tech-adoption.jpg](https://steemitimages.com/1280x0/https://steemitimages.com/DQmVcSfmG5y1J3n3qKCkm53AbMkQiSGrU4XV8QaRbg3i3D4/blackrock-tech-adoption.jpg)](https://www.visualcapitalist.com/rising-speed-technological-adoption/)\n\nThe basic idea is that there is an initial innovation, then a \"frenzy\" of competing technologies with massive growth, then a turning point comes where the technology reaches synergy and maturity (often compared to [the \"late majority\" and \"laggards\" group from Everett Rogers](https://en.wikipedia.org/wiki/Diffusion_of_innovations)).\n\nThe concerns of the Installation Age are growth and innovation, often resulting in creative destruction (read: massive churn). The concerns of the Deployment Age are stability and addressing the needs of later, often larger, market segments. In the former, hobbyists and speculators rule, and things are often simpler. In the latter, the suits take over, and a lot of time is spent over the nitty gritty details.\n\n## The Deployment Age of JavaScript Frameworks\n\nI think the turning point for JS Frameworks began a year or two ago. We no longer have a new frontend framework every month. [React has been on top of Hacker News Job Board for 31 months](https://www.reddit.com/r/reactjs/comments/f4kr7h/another_year_on_top_for_react_hacker_news_hiring/). But it isn't just React - Vue and Angular both have found very stable adoption among sizable companies who are not going to migrate anytime soon.\n\n![https://pbs.twimg.com/media/ERNOUTnXUAAZlAN?format=jpg&name=medium](https://pbs.twimg.com/media/ERNOUTnXUAAZlAN?format=jpg&name=medium)\n\nThe Deployment Age has led to the rise of metaframeworks - frameworks built around frameworks to **literally address deployment concerns** the original frameworks were not designed for. React has Next.js and Gatsby, Vue has [Nuxt.js](https://nuxtjs.org/) and [Gridsome](https://gridsome.org/), Svelte has [Sapper](https://sapper.svelte.dev/), and [Angular even got Scully recently](https://www.youtube.com/watch?list=PLz8Iz-Fnk_eTpvd49Sa77NiF8Uqq5Iykx&v=ugTx-14jRrI&feature=emb_title). In most cases, the frameworks were designed for taking control of a single DOM element and managing a tree of dynamic elements in it, and their metaframework extends that to cover the entire site/app, including routing and static/server side rendering. \n\nI always liken metaframeworks to the Hulkbuster armor wrapping around the Iron Man suit, because they are heavier but more powerful, but also because I'm a massive Marvel nerd.\n\n![https://media2.giphy.com/media/jrTVYXOVxUASI/giphy.gif](https://media2.giphy.com/media/jrTVYXOVxUASI/giphy.gif)\n\n## React Distros\n\nSo let's talk about React Distros.\n\nClearly the analogy is an apt one. If React is Linux, Vue is MacOS and Angular is Windows. Except here Linux has the most numbers. There are [dozens of Linux distros](https://www.techradar.com/best/best-linux-distros) built for varying kinds of users, all sharing the same underlying tech. To the extent that [React performs many of the functions of an operating system atop the browser](https://twitter.com/swyx/status/1139489436079542273), this is almost a literally true analogy. This is why I observed [last year](https://twitter.com/swyx/status/1139489436079542273):\n\n> React’s refusal to have an opinion on things like styling and routing are the biggest source of frustration for users and also its biggest reason for success. \n>\n> There isnt 1 framework called React, there are 1000s of artisanally handrolled fw’s. React gets credit for ALL of them.\n\nThis is at once React's best and worst feature - it's small surface area and unopinionatedness about many essential things means you not only get to pick and choose what you pair with it, you kind of *have to*.\n\nI disagree with James that CRA is a bootloader - I think it is also a React distro, a decent one for Single Page Apps, but not even close to a perfect one.\n\nHere is an incomplete list of React Distros:\n\n- [React Native](https://facebook.github.io/react-native/) - a distro that builds to iOS and Android apps. One of few React distros to actually include good default components (because the target ecosystems do)\n- [React Boilerplate](https://github.com/react-boilerplate/react-boilerplate) - probably the earliest React distro, just a boilerplate to be cloned\n- [Electron React Boilerplate](https://github.com/electron-react-boilerplate/electron-react-boilerplate) - for desktop apps\n- [React 360](https://facebook.github.io/react-360/) - React for VR? sure.\n- [React Ink](https://github.com/vadimdemedes/ink) - React for CLI's? why not.\n- [Next.js](https://nextjs.org/) - Hybrid Server, Serverless, and Static Rendering. Plugin story surprisingly [nascent](https://github.com/zeit/next.js/issues/9133). Pages pull data.\n- [Gatsby.js](https://www.gatsbyjs.org/) - Static Rendering with GraphQL data layer. Plugins galore. You can push and pull data to/from pages.\n- [React Static](https://github.com/react-static/react-static) - Static Rendering with a simpler data layer. You push data to pages.\n- [Create React App](https://create-react-app.dev/docs/getting-started/) - Single Page App starter with no data layer.\n- [Ionic React](https://ionicframework.com/docs/react) - 100+ great React components, with cross platform targets and React Router built in under the hood\n- [Docusaurus](https://docusaurus.io/) - Static Rendering with documentation focus. Locked down workflow from markdown to preset templates.\n- [Storybook](https://storybook.js.org/) - Component Library playground that can do documentation and display non React components.\n- [Meteor.js](https://guide.meteor.com/react.html) - A full stack framework that later adopted React.\n- [Redwood](https://github.com/redwoodjs/redwood) - Tom Preston-Werner's upcoming full stack framework that includes a backend GraphQL layer\n- [Blitz.js](https://github.com/blitz-js/blitz) - Brandon Bayer's new Rails + React metaframework\n\nThere are even metaframeworks atop metaframeworks:\n\n- [Navi](https://github.com/frontarm/navi) and [CURA](https://github.com/frontarm/create-universal-react-app) - James' projects that add some level of routing and SSR on top of CRA\n- [Docz](https://www.docz.site/) - Static Rendering of Docs with default TypeScript and MDX setups on top of Gatsby\n- [Expo](https://expo.io/) - an excellent React Native distro focused on developer experience\n- [React Native Web](https://github.com/necolas/react-native-web) - a RN distro for the web. See [my post on the RN singularity](https://www.swyx.io/writing/react-native-web-singularity/)\n- [React XP](https://microsoft.github.io/reactxp/) - Microsoft's RN distro that includes building to Windows native apps\n\nAnd [Parcel](https://parceljs.org/) and likely [Rome](http://romejs.dev/) follow the [Collapsing Layers](https://www.swyx.io/writing/collapsing-layers/) thesis and collapse the metaframework into the build tool (instead of having the metaframework circumscribe the build tool). React Native of course has [Metro](https://facebook.github.io/metro/), a dedicated bundler, and [Hermes](https://hermesengine.dev/) a dedicated JS engine.\n\n## What other React Distros should exist?\n\nHowever I agree with James that there should be more React Distros, especially as we start addressing clearly defined usecases within the community. [He writes](https://twitter.com/james_k_nelson/status/1229653411336839169):\n\n> But anyway, here's my ideal React distro:\n> \n>  - Out-of-the-box SSR\n>  - CSS-in-JS is easy － if you want it\n>  - Sane defaults for routing and data fetching/caching, and...\n>  - Works without GraphQL\n>  - Builds like CRA, but...\n>  - Allows Webpack configuration\n>  - And 🙅‍♂️ to fs-based routing\n\nI agree with most of these except I like fs-based routing 😂\n\nI think there are a bunch of toggles that you can play with to think about your needs and roll your own React distro or use one off the shelf. We covered some of this in the [State of /r/Reactjs Survey](https://www.swyx.io/writing/react-survey-2019/)\n\n- Build Target\n- State Management\n- Data Layer\n- Styling\n- TypeScript support\n- Testing\n\nNotice that Routing is missing because of the de facto dominance of React Router, but of course Gatsby,  Next.js, React-Static, and Navi include their own router due to the need to integrate the data layer. React Native used to have more contention in routing, but React Navigation seems to be de facto now.\n\nI happen to think [STAR apps](https://www.swyx.io/speaking/star-apps-svcodecamp) are a good set of opinions for well-maintained apps. I also particularly like the pairing of Tailwind with the React model of classNames, which is why I have made [Rincewind](https://github.com/sw-yx/rincewind) as a basic proof of concept.\n\nI also think we have a ways to go when it comes to authoring format. JSX files is almost certainly not the end state of things. I made an initial attempt at a [React SFC proposal](https://github.com/sw-yx/react-sfc-proposal) inspired by Vue, but I think Storybook actually got it right with [the Component Story Format](https://storybook.js.org/docs/formats/component-story-format/), and I think a React SFC will look closer to a standardized ESM file format than a custom template (The [Formats over Functions](https://www.swyx.io/writing/formats) thesis). Of course, [MDX](http://mdxjs.org/) also exists as a content format with React shortcodes, but I think it has potential as a full fledged Single File Component format - [MDSvex from the Svelte ecosystem](https://github.com/pngwn/mdsvex) is evolving towards this.\n\nA React authoring format will need a dedicated compiler, which at the macro level gets especially interesting when you design it to address a [styling solution](https://www.reddit.com/r/reactjs/comments/f6ci8r/xstyled_consistent_theme_based_css_for/) and [Suspense-enabled render-as-you-fetch solution](https://www.youtube.com/watch?v=KT3XKDBZW7M) like Facebook does. But even at the micro level, we often talk about a [sufficiently advanced compiler](https://twitter.com/dan_abramov/status/1217972977649831937) for all the boilerplate optimizations that React's low level hooks make us do. I do think we can design more syntax to make this all more ergonomic. And of course, if we are going to make a compiler, we might as well make an optimizing compiler! Make use of Preact if we don't really rely on React's nuanced behavior and event system? (I bet this sounds way easier than it really is.)\n\nAs Tom Dale observed in 2017, [Compilers are the new Frameworks](https://tomdale.net/2017/09/compilers-are-the-new-frameworks/). But will React go the way of Svelte, Vue, and Angular and break up its own runtime? [No. It has other concerns.](https://www.reddit.com/r/reactjs/comments/aml427/react_as_a_ui_runtime/efnawbb/)\n\n## React Distros for Toolmakers\n\nWhy should only app makers get React Distros?\n\nI first made friends with Travis Fischer through discovering [create-react-library](https://www.npmjs.com/package/create-react-library). I also help maintain [TSDX](https://github.com/jaredpalmer/tsdx), a toolchain for building React + TypeScript libraries like [Formik](https://github.com/jaredpalmer/formik). As we start being able to bet on a stable foundation in the Deployment Phase, we can start making tools to help us make tools.\n\n![https://pbs.twimg.com/media/ERNJ-dlXYAAfv81?format=jpg&name=medium](https://pbs.twimg.com/media/ERNJ-dlXYAAfv81?format=jpg&name=medium)"
    },
    {
      "slug": "react-native-web-singularity",
      "data": {
        "technical": true,
        "title": "The Case for the React Native Web Singularity",
        "slug": "react-native-web-singularity",
        "categories": [
          "Tech",
          "React"
        ],
        "date": "2019-08-30T00:00:00.000Z",
        "banner": "./assets/react-native-web-singularity.jpeg"
      },
      "content": "\nBottom line up front: There is a possible \"React Native Web Singularity\", when it starts being a better standalone choice for developing for the mobile web than `react-dom`. If this speculation comes true, this would be gamechanging.\n\n## Table of Contents\n\n## Context\n\nI spent a couple hours looking into [React Native Web](https://github.com/necolas/react-native-web) today. I want to preface this with the very important acknowledgements that I have no knowledge of the React team's plans, and I have not ever built anything with React Native Web so I am really just speculating and thinking out loud.\n\n> ⚠️I REITERATE: I AM JUST SOME INTERNET RANDO SPEWING THOUGHTS, DO NOT IN ANY WAY TAKE WHAT I WRITE HERE AS ANY FORM OF OFFICIAL ROADMAP\n\nI just want to discuss why React Native Web is interesting to me and what I see as a neutral but interested outsider to the project. However I am aware that RNW is a moderately controversial project and if you have your mind made up on it, I suggest doing something else with your time than reading on.\n\nI mean it, please stop reading if you are just going to get mad whenever RNW is mentioned.\n\nWew. Ok.\n\n## Basic Facts on React Native Web\n\nIf you are out of the loop on even knowing what RNW is, here are some resources I would recommend:\n\n- [Their README](https://github.com/necolas/react-native-web#react-native-for-web)\n- [@necolas' talk at React Rally 2017](https://www.youtube.com/watch?v=tFFn39lLO-U) and on [the React Podcast](https://changelog.com/reactpodcast/1)\n- [Peggy Rayzis's talk: Write Once, Render Anywhere — ReactNext 2017](https://www.youtube.com/watch?v=HLWM2uhv2wI&feature=youtu.be)\n- [Using React Native For Web in Production at Curai](https://medium.com/curai-tech/using-react-native-for-web-in-production-at-curai-53202945b0b3)\n- _what am I missing?_\n\nAlso worth noting that there was a (more ambitious!) experiment, [React Native DOM](https://github.com/vincentriemer/react-native-dom/), that has since gone on [hiatus](https://github.com/vincentriemer/react-native-dom/issues/102). [ReactXP](https://microsoft.github.io/reactxp/) is another notable attempt I know nothing about, backed by MSFT.\n\nBecause there is a lot of ground to cover, I will assume from here on that you have read and watched these basic things above. The main selling points that resonate with me are:\n\n- Code reuse across RN and Web codebases\n- [Better A11y APIs](https://github.com/necolas/react-native-web/blob/master/docs/guides/accessibility.md) (not a given, and if you reject this out of hand please stop reading)\n- [Improved styling model](https://github.com/necolas/react-native-web/blob/master/docs/guides/style.md) (subjective!)\n- \"native-quality interactions, support for multiple input modes (touch, mouse, keyboard)\" (untested! I'd love to read more here)\n- [\"Free\" built-in components and modules that RN developers enjoy](https://github.com/necolas/react-native-web#components) including [an Animated Module](https://github.com/necolas/react-native-web#modules)\n- (not so relevant to me) [i18n is better](https://github.com/necolas/react-native-web/blob/master/docs/guides/internationalization.md)\n\nThere is one very big downside, which cannot be ignored: it drops all pretense of using APIs that look like normal webdev. No `<div>`s here. No [Media Queries](https://github.com/necolas/react-native-web/blob/master/docs/guides/style.md#what-about-media-queries). And expect fiddling with alien RN ecosystems like Metro with [fun problems with symlinks](https://github.com/facebook/metro/issues/1).\n\nNow, I also pay attention to incidental/leading indicators:\n\n- Both the authors of React-Native-Web and React-Native-DOM have been hired into the React org in the past year. [@necolas](https://twitter.com/necolas) is on React Core and [@vincentriemer](https://twitter.com/vincentriemer) seems to be on Web but is obviously extremely close to the RN team.\n- [Rick Hanlon (RN team)'s talk on the Untouchable Web](https://www.youtube.com/watch?v=LhKglxQT4sU) gives a very strong indication of what the RN team wants for mobile web\n- [React Fire](https://github.com/facebook/react/issues/13525) gave way to [React Flare](https://github.com/facebook/react/issues/15257) (also worth reading: [`<FocusScope>` and the unreleased `useEvent` hook](https://github.com/facebook/react/issues/16009)). I expect some form of this to be announced, even released at [React Conf 2019](https://conf.reactjs.org/) alongside Suspense for Data Fetching.\n- [From Nicolas](https://mobile.twitter.com/necolas/status/1136687268377219073): \"You can now build Web, Android, and iOS apps from the same React codebase using Expo. Expect a lot more progress towards a web-first, multi-platform React over the next couple of years.\"\n- Of course, [Twitter's continuing investment](https://twitter.com/paularmstrong/status/1070472670452559872)\n- _what am I missing?_\n\nAs well as community proof points:\n\n- [Max Stoiber's Regrets](https://mxstbr.com/thoughts/tech-choice-regrets-at-spectrum/)\n- [the incredible DevHub app](https://github.com/devhubapp/devhub)\n- Evan Bacon's Expo Web efforts with a [Crossy Road clone](https://github.com/EvanBacon/Expo-Crossy-Road), [Instagram](https://github.com/EvanBacon/Instagram), [Flappy Bird](https://flappybacon.netlify.com/), [Lego](https://ldr.netlify.com/), [Doodle Jump](https://doodlejump.netlify.com/) (Evan is my RNW idol right now... jeez)\n- _what am I missing?_\n\n## My speculation: The React Native Web Singularity\n\nNow for the really useless part of this blogpost, where I speculate about the potential of RNW without even ever having used it. Yeah, I know. Humor me, contradict me, back me up, I'm just thinking aloud and would love your thoughts.\n\n**Fact**: Mobile is extremely important for web developers. I won't bother substantiating this.\n\n**Fact**: A React-Native-informed approach to Gestures, Focus, and A11y is clearly in the future of React.\n\n**Fact**: It is working for Twitter and [Uber Eats](https://www.youtube.com/watch?v=RV9rxrNIxnY) and others.\n\n**Opinion**: I don't think `react-dom` can or should ever be deprecated, because it will forever be important for web developers coming into React from a HTML/CSS background. I used to entertain this notion, but I recognize it is unnecessarily aggressive.\n\n**Opinion**: Code reuse is very project dependent. Plenty of projects are web-only. BUT...\n\n**Speculation**: There is a decent chance that RNW reaches a crossover point, a singularity, where it simply starts to be a better starting point for developing for mobile web than `react-dom` is. As a standalone tool, **even with no intention of reusing code for native apps**, it could be better than `react-dom`, for reasons I have already stated. At this point, all doubt of premature optimization becomes invalid, and RNW becomes the default for people who are ok not using HTML-like APIs.\n\nIf true, **THIS WOULD BE INCREDIBLY FREAKING IMPORTANT.** This is why I keep eyeing the RNW project despite never having needed it.\n\nIf true, This would be a fun turn of events from people proclaiming the death of RN after [Airbnb sunset RN](https://medium.com/airbnb-engineering/sunsetting-react-native-1868ba28e30a) in 2018. If anything, judging by [Eli White's talk](https://mobile.twitter.com/Eli_White/status/1123490937785782273), the expanded RN team with Lean Core/community focus, and [open sourcing of Hermes](https://www.youtube.com/watch?v=zEjqDWqeDdg), RN has in the public eye become more relevant than ever in 2019.\n\nIt also doesn't have to be RN that \"wins\". If Flutter is a success, [Bruno Lemos](https://twitter.com/brunolemos) also notes that [Flutter for web](https://flutter.dev/web) is in technical preview.\n\n## Definitely Not Immediate Future\n\nI think all this is years out. I directly pointed this question at Dan a few months ago and this was [his reply](https://mobile.twitter.com/dan_abramov/status/1135421892851064832) (which, again, is not official communication they have committed to so dont hold them to it please):\n\n> Me: does some combination of React Native DOM/Web, React Fire, and React Flare point towards some possible future version of react-dom where we drop the HTML-like basic JSX components and just provide a smaller set that are more accessible/intuitive by default?\n\n> Dan: Not in immediate feature. But finding ways to steer people towards accessible UIs by default is an active exploration with Flare. In shorter term insights will likely feed back into React Native. Maybe someday having a unified opt-in API for folks who prefer it would be nice.\n\nSo RN is the near term focus for now. But what if...\n\n## Feedback from early reviewers\n\nI was a bit too web centric in this piece, and was totally blind to the obvious fact that RNW is a bigger win for RN users than for React-Dom users. [Glen Maddern](http://twitter.com/glenmaddern) has ported an RN app to RNW which of course is going to be a great usecase for RNW. He said:\n\n> In general RNW isn't the bottleneck, it's the native bits of RN that cause trouble. So I would speculate that one day maybe Expo becomes better for building for the web than Create React App, that'll be the tipping point. RNW is a small piece of the puzzle but it feels good enough for now.\n\nThe RNW DX story itself does have some drawbacks. [Ryan Jerue](https://twitter.com/rjerue) says:\n\n> In terms of using RNW for a bit over a year, I'd say that there's some good and some bad. The good is that it does deliver on its promise. My focus has been working on a design system that my company can use across our web and native apps. If you like CSS in JS, it's 100% that. Dimensions API covers media queries well too. The bad of RNW is mostly from react native, meaning webapps are going to be stuck at the ceiling of being annoying up upgrade, flexbox everywhere. The support of libraries isn't as great either as often ones with native modules require one to be skilled in JS, Swift/ObjC, and Java. React Native doesn't support SVG out of the box (or really at all) either, which is a bummer.\n\nEven if it isn't RNW, something else that looks like it might do it. [Christian Hall](https://twitter.com/jchristianhall) said:\n\n> Given the interest in VR and AR, for devs who want to focus on making the best UI possible, regardless of platform, I think the “RNW Singularity” is essential. If the React Team doesn’t come up with some way to express UI universally, someone else will.\n\n[Bruno Lemos](https://twitter.com/brunolemos) agreed:\n\n> We are definitely trending into more cross-platform dev, all big companies are betting on it (facebook, microsoft, google and even apple with project catalina). Dunno if it will be react-native-web or not, but yes I agree with the predictions\n\nThere remain key sticking points in a RNW singularity, like opening in a new tab, and routing. As [Josh Parret put it](https://twitter.com/JTParrett/status/1167853538057379840):\n\n> I feel we are quite far off a RNW singularity, as there’s undeniable cases where a single codebase doesn’t work for both platforms; such as opening a link in a new tab, or changing routes/screens...\n\n---\n\n_PostScript: more resources for my reference_\n\n- [Ben Awad's RNW Series](https://www.reddit.com/r/reactjs/comments/aw65z8/react_native_web_workout_app_tutorial/)\n- [Guide for Creating reusable RN and RNW components](https://medium.com/@yannickdot/write-once-run-anywhere-with-create-react-native-app-and-react-native-web-ad40db63eed0)\n- [Material Bread RN universal components](https://www.reddit.com/r/reactjs/comments/brgtqb/how_to_make_a_react_component_library_for_both/eoge9yo/)\n- [Expo Web tutorial](https://medium.com/@toastui/from-zero-to-publish-expo-web-react-native-for-web-tutorial-e3e020d6d3ff)\n- [Routing: React Router](https://github.com/edupooch/simple-crna-routing)\n- [Routing: React Navigation](https://pickering.org/using-react-native-react-native-web-and-react-navigation-in-a-single-project-cfd4bcca16d0)\n- Universal Navigation Strategy in React: https://dev.to/ythecombinator/driving-towards-a-universal-navigation-strategy-in-react-j60"
    },
    {
      "slug": "react-outside",
      "data": {
        "technical": true,
        "title": "To Understand Concurrent React, Look Outside React",
        "subtitle": "3 Talks from Outside React",
        "slug": "react-outside",
        "categories": [
          "React"
        ],
        "date": "2020-02-12T00:00:00.000Z"
      },
      "content": "\n## Table of Contents\n\n## TL;DR\n\nWatch these 3 talks:\n\n- [Raymond Hettinger's Keynote on Concurrency](https://www.youtube.com/watch?v=9zinZmE3Ogk) in Python\n- [Daan Leijen's Asynchrony with Algebraic Effects](https://www.youtube.com/watch?v=hrBq8R_kxI0&app=desktop) in Koka\n- [Let’s Get Lazy: Explore the Real Power of Streams by Venkat Subramaniam](https://www.youtube.com/watch?v=F73kB4XZQ4I) in Java/Haskell/Scala\n\n## Why Even Try\n\nSomething I struggled a lot with when [first trying to understand React Suspense](https://sw-yx.js.org/2018/03/01/that-react-suspense-demo) was the onslaught of jargon that suddenly seemed relevant:\n\n[![https://pbs.twimg.com/media/DZWu8i0XkAEx4mr?format=jpg&name=medium](https://pbs.twimg.com/media/DZWu8i0XkAEx4mr?format=jpg&name=medium)](https://twitter.com/swyx/status/978880884031066112?s=20)\n\n*(see [here](https://twitter.com/swyx/status/1187514920621006848) for updated version post release)*\n\nFor most of us, this was completely alien, and for many of us today, it still is. You don't need to know these concepts and jargon to *use* Concurrent React, just like you don't need to know how a car works to drive one. \n\nBut for new abstractions, it is always wise to look under the hood if you can, so that **when the inevitable abstraction leak occurs, you know what to do**. \n\nMore to the point, if you are going to advocate for refactoring to use React Suspense in your company, you will want to convincingly *explain* what it is and how it does what it does, to bosses that don't care and have actual issues with money attached for you to pick up. \n\n2 years on from [JSConf Iceland](https://www.youtube.com/watch?v=nLF0n9SACd4), this is the final, arduous challenge for React Suspense.\n\n## Why Look Outside React\n\nA lot of us will try to explain Concurrent React by comparison to existing frontend paradigms. But you can only watch Andrew get frustrated at spinners [again](https://www.youtube.com/watch?v=ByBPyMBTzM0) and [again](https://www.youtube.com/watch?v=z-6JC0_cOns) and [again](https://www.youtube.com/watch?v=xrLIeSYRKIc) so many times. Of course, [like me](https://www.swyx.io/speaking/react-suspense/), you can try to make memes out of it, but there's only so much you can do, and I have a strong suspicion that most bosses won't care.\n\nMy insight is this: **We're not good at this because we're new at this.** \n\nBut you know who's gotten good at explaining these concepts? **Non-frontend developers**. Why? Because they've had to, and because they've been using this stuff a lot longer than we have.\n\nYou know what you get when you get when you google [Fibers](https://en.wikipedia.org/wiki/Fiber_(computer_science)) and [Time Slicing](https://en.wikipedia.org/wiki/Preemption_(computing)#Time_slice)? Links to Operating System articles! Because that's where we took the ideas from! Maybe we should look at how *those* people explain their ideas! (except please do it [more coherently than I did](https://www.swyx.io/speaking/react-not-reactive/)).\n\n## Looking Outside\n\nI was reminded of this today when watching some excellent talks from outside the JavaScript world today. \n\nI will recommend them to you here, in brief and completely insufficient context - I just want to leave pointers.\n\n### Learning Async from the Python world\n\nFirst was [Raymond Hettinger's Keynote on Concurrency](https://www.youtube.com/watch?v=9zinZmE3Ogk) in Python. In this talk he discusses two contrasting concurrency models - [threading vs async](https://pybay.com/site_media/slides/raymond2017-keynote/intro.html#threads-vs-async). \n\nHere he explains Threads and why we don't like them:\n\n> Threads switch preemptively. This is convenient because you don’t need to add explicit code to cause a task switch. The cost of this convenience is that you have to assume a switch can happen at any time. Accordingly, critical sections have to be guarded with locks.\n\nYes, JS is single-threaded, except [not really](https://www.red-gate.com/simple-talk/dotnet/asp-net/javascript-single-threaded/). You've encountered threads in React when you run into race conditions resulting from separate components fetching data independently, for example. And to solve them, you've had to [lift state up](https://reactjs.org/docs/lifting-state-up.html) in order to resolve the race condition. That, to me, sounds like a \"lock\".\n\n[Here's Seb on \"working around the lack of threads\"](https://github.com/facebook/react/issues/7942#issuecomment-254984862).\n\nNow Async:\n\n> the cost of task switches is very low. Calling a pure Python function has more overhead than restarting a generator or awaitable. This means that async is very cheap. **In return, you’ll need a non-blocking version of just about everything you do**. Accordingly, the async world has a huge ecosystem of support tools. **This increases the learning curve.**\n\nYup, the nonblocking version of everything we do, otherwise known as our [fallback](https://reactjs.org/docs/code-splitting.html#reactlazy). And, yeah, it increases the learning curve. For example, a stated goal of Concurrent React is to [bring Algebraic Effects to our rendering work](https://github.com/reactjs/react-basic#algebraic-effects), which makes restarting rendering even cheaper than restarting a generator. \n\nConfused already? I know I am. What even are Algebraic Effects?\n\n### Learning Algebraic Effects from Koka\n\nThe second talk is [Daan Leijen's Asynchrony with Algebraic Effects](https://www.youtube.com/watch?v=hrBq8R_kxI0&app=desktop) in Koka.  This is the talk that made them accessible to me. Because I like [two word](https://www.swyx.io/writing/two-words) summaries, I mostly go with \"resumable exceptions\". \n\nHowever this glosses over an important design goal, which is able to write components without worrying about what is in their children or siblings. That's how you get non-leaky abstractions. [Sophie](https://twitter.com/sophiebits) calls this [facilitating local reasoning](https://sophiebits.com/2020/01/01/fast-maintainable-db-patterns.html), which you again see if you look at [DataLoader](https://github.com/graphql/dataloader) from the GraphQL world.\n\nAll good. But wait, didn't Raymond Hettinger also say about Async:\n\n> Async switches cooperatively, so you do need to add explicit code “yield” or “await” to cause a task switch.\n\nWhere is the cooperative, voluntary yielding in React Suspense? We don't write it or see it!\n\n### Learning Lazy Eval from the Java world\n\nThird talk is [Let’s Get Lazy: Explore the Real Power of Streams by Venkat Subramaniam](https://www.youtube.com/watch?v=F73kB4XZQ4I) using Java, but also Haskell and Scala.\n\nFor a while, I had a problem with Concurrent React being described as \"cooperative scheduling\" because, as Wikipedia says:\n\n> Processes voluntarily yield control periodically or when idle or logically blocked in order to enable multiple applications to be run concurrently. This type of multitasking is called \"cooperative\" because **all programs must cooperate for the entire scheduling scheme to work**. \n\nBut there is no explicit cooperation going on in React! Or is there?\n\nI think this is where [React as a UI Runtime](https://overreacted.io/react-as-a-ui-runtime/) and [React Fiber](https://www.swyx.io/speaking/react-from-scratch/) come in. Every component is a Fiber, and every Fiber is a unitary piece of work whose children and siblings can be rendered later (aka Time Slicing), and can be committed later too (aka Suspense). \n\nAs Venkat quotes in his talk, \"*We can solve any problem by introducing an extra level of indirection*\". Concurrent React achieves maximum responsiveness by rendering each Fiber bit by bit, lazily (hence the stark difference in the [Stack vs Fiber Sierpinski Reconciler demo](https://claudiopro.github.io/react-fiber-vs-stack-demo/)). It *also* solves for the API design issue of Algebraic Effects and one-ups [other scheduling frameworks](https://github.com/facebook/react/issues/7942#issuecomment-254987818) by introducing this extra layer of indirection called React Fiber.\n\nVenkat's talk also discusses why functional programming isn't as inefficient as it might seem, because of intermediate representations. This is analogous to the Fiber data structure itself, which enables the intended suspend-and-resume nature of Suspense, which is very efficient because no extra work is done.\n\n\n\n"
    },
    {
      "slug": "react-survey-2019",
      "data": {
        "technical": true,
        "title": "2019 /r/ReactJS Survey Results",
        "subtitle": "Lessons from the Front Page of React",
        "slug": "react-survey-2019",
        "categories": [
          "React"
        ],
        "date": "2020-02-13T00:00:00.000Z"
      },
      "content": "\n[![https://pbs.twimg.com/media/EQrqygkW4AIxT0c?format=jpg&name=large](https://pbs.twimg.com/media/EQrqygkW4AIxT0c?format=jpg&name=large)](https://docs.google.com/presentation/d/1M-JUtp9I5_gSk8OpV9Adk9sYzhoU-VNcwz9RUJ1-8Sw/edit?usp=sharing)\n\nI presented at [This Dot's online React meetup today](https://twitter.com/ThisDotLabs/status/1228049999537360897?s=20). \n\n## Here are [the slides that I made](https://docs.google.com/presentation/d/1M-JUtp9I5_gSk8OpV9Adk9sYzhoU-VNcwz9RUJ1-8Sw/edit#slide=id.p) \n\n## Here is [the video recording](https://www.swyx.io/speaking/react-survey-2019-talk/)\n\nNote that I do not at all take credit for the survey - I only made the slides and gave initial ideas - The survey and data munging only happened with the heavy lifting made of [/u/timmonsjg](http://reddit.com/u/timmonsjg) and reviews from the mod team on Reddit.\n\n## TL;DW\n\nHere are some pull quote facts for the lazy:\n\n![https://pbs.twimg.com/media/EQrqygkWAAAkH-I?format=jpg&name=large](https://pbs.twimg.com/media/EQrqygkWAAAkH-I?format=jpg&name=large)\n\n- **Demographics**\n  - we hit 167k subscribers, with 1.2m pageviews a month. \n  - Mostly Europe and North America audience given our English bias. \n  - 37% of /r/reactjs subscribers don't identify as professional React devs - they work on other things and only incidentally use React (23%), or they are PMs and Designers looking to stay in touch (5%), or they are students (10%)\n- **Build setup**\n  - **Webpack powers 92% of React apps** via CRA, Nextjs, Gatsby, and other handrolled setups\n- **State management**\n  - No consensus here: 1/3 of devs use inbuilt tooling (Prop Drilling + React Context), 1/3 use Redux, 1/3 use other stuff like MobX/Apollo\n- **Styling**\n  - Wew. even less consensus.\n  - Sass > Styled Components > Vanilla CSS > everything else\n  - Tailwind very small % despite [Twitter hype](https://twitter.com/lesliecdubs/status/1227816837800484864?s=20). My rationalization is that it is VERY hard to change CSS tooling on production apps. Greenfield apps may have a very different split.\n- **Hooks vs Classes**\n  - 64% now code primarily in Hooks\n  - 17% an equal mix of Hooks and Classes\n  - 19% primarily in Classes\n- **Types**\n  - 48% don't use Types\n  - 47% use TypeScript\n  - Flow/PropTypes/ReasonML were all offered options but vanishingly small compared to others\n- **Backend API**\n  - 59% REST\n  - 21% GraphQL\n  - 16% JSON-API\n- **Hosting**\n  - 44% Static + Serverless\n  - 34% VPS\n  - 20% Self Hosted/Onsite\n- **Testing**\n  - Tricky one here as we allowed multiple choice and just did simple addition of all selected answers\n  - **19% of React users don't write tests**\n  - Jest is still the dominant testing tool at 31% of total responses\n  - react-testing-library at 18% beat out Cypress and Enzyme at 10-11% each\n\n## Qualitative\n\n## What does well\n\nI think at this point I have a pretty good eye for what does well on Reddit. High effort stuff that inspires people, preferably open source. See the slides or go to /r/reactjs itself and sort by top all time posts to see examples.\n\n  - Interactive Demos\n  - React Native Demos\n  - Portfolios\n  - Chrome Extensions\n  - Nostalgia (eg iPod, Windows 95 clones)\n  - Free Workshops/YouTube Courses\n  - Learning Roadmaps\n  - Cheatsheets\n  - Career advice and Encouragement\n  - Algorithms\n  - React Core Team\n\n### What people want more of\n\nThese are gleaned responses from survey answers.\n\n![https://pbs.twimg.com/media/EQrqygiWoAEoAnb?format=jpg&name=large](https://pbs.twimg.com/media/EQrqygiWoAEoAnb?format=jpg&name=large)\n\n  - “Weekly or monthly challenges to learn how to solve specific problems.”\n  - “Would be glad if there is a megathread of tutorials. too many poorly written beginner articles out there”\n  - “Maybe some educational sources can be compiled or prepared for advanced users.”\n  - “stay up to date with new React standards and features; as well as to get other people's insight on good practice”\n\n### What Beginners struggle with\n\n![https://pbs.twimg.com/media/EQrqyg3WAAwjT6h?format=jpg&name=large](https://pbs.twimg.com/media/EQrqyg3WAAwjT6h?format=jpg&name=large)  \n\n  - Code Review\n  - Friendlier StackOverflow\n  - “Why doesn’t this work!!!”\n  - Styled-Components Questions\n  - How do I get my first job?\n  - “Do I have to learn classes if it is going to be deprecated?”\n  - “I bound `this` and it still doesn’t work?”\n  - CSS Questions\n  - How to do skeleton loading?\n  - How do I make parents and children communicate state?\n  - What is `Uncaught SyntaxError: Unexpected token '<'`\n\n\n## Meta\n\nI didn't present this as it was less relevant to the meetup attendees but the main takeaways:\n\n- People are generally happy with the state of moderation (yay!)\n- 50% of respondents check /r/reactjs daily\n- a small but vocal set of people want less newbie questions and blogspam. We are discussing this actively.\n- people want more curation at all levels (for free of course).\n\nI also adopted the branding of \"**/r/Reactjs is the Front Page of React**\" inspired by Reddit's \"[Front Page of the Internet](https://www.quora.com/How-and-why-is-Reddit-known-as-the-front-page-of-the-internet)\" branding.\n\n## Things we could have done better\n\nWe made a metric TON of mistakes. For example, running this survey in the dead of December at our seasonal traffic low when nobody is at work or wants to think or talk about work.\n\nWe also collected people's `package.json`s in an attempt to look at dependency correlations. It would have probably yielded some VERY promising insights unavailable anywhere else (particularly in closed source codebases). However, I don't think we did it very well (eg, not warning people in advance, so that if you were doing the survey on mobile you suddenly were ambushed with this \"pls dump your deps here\" question that you would need to head back to a laptop for) and so not many people did this.\n\nWe didn't ask anything about linting, or vim/IDEs, or Prettier, or animations, or specific questions on adoption of React Native.\n\nWhat is maybe more important, we didn't ask GOOD questions about what people want.    \n- What problems do they have in learning? \n- What arguments do they have at work? \n- Do they feel better or worse about the state of React today?\n- What is one \"crazy idea\" that they wish someone would make (or build into React)?\n\nWe could have focused a lot more on asking these questions in order to probe deeper on solving \"real\" problems rather than staying at surface level numbers that don't really help swing any decisions.\n\nNext year I want to get past surface level shit and get deeper to the heart of understanding what people want and what people struggle with. Do that well and I think we give creators the intel to serve the community better. I'm realizing that that is ultimately the role of the community moderator - not to provide the answers but to **provide the platform for great answers to emerge**."
    },
    {
      "slug": "better-way-to-get-data",
      "data": {
        "technical": true,
        "title": "A Better Way to Get Data",
        "slug": "better-way-to-get-data",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "date": "2019-09-15T00:00:00.000Z",
        "published": false
      },
      "content": "\nOn the back of [Bad Ways to Get Data](/writing/bad-ways-to-get-data), I want to rewrite how I do data fetching, again. This time my design goals are:\n\n- generate a manifest upfront. This means firing off the minimum viable request to index everything, as defined by the user. Do NOT attempt to read everything up front as that blocks execution.\n- offer easy profiling. instead of ad hoc console.logs, use `debug` to provide reusable log events.\n- Define a transparent plugin interface - pass the input of the main function to a plugin, get the output and pass it out.\n  - i don't like passing in a set of strings or objects and letting the thing opaquely call the thing\n- (not data related) use a temp folder to store all the Sapper boilerplate\n- DON'T cache or precompute anything upfront. rely on the index to be authoritative instead.\n- getDataSlice should memoize itself\n- allow non SSG work to be done with the data afterward on each build?\n  - for RSS\n  - for image production?\n- allow non SSG work to be done ONCE at author time, fuck building\n  - for image production?\n\nReach goals:\n\n- TypeScript?\n- Estimate time for completion\n- offer incremental builds by diffing a prior manifest (cheap to read) and/or the actual generated file system (a better source of truth, but more expensive to read)\n  - In dev, watch and reload individual files\n  - how do you figure out the dependency tree from here?\n  - sapper rebuilds everything every time. may have to fork sapper or somehow influence them to merge the export_only PR that's been sitting around.\n- offer a dry run? this isn't a priority for me right now. It's just one step lower than a manifest.\n- hew as close to the gatsby/11ty developer experience as possible\n\nThe API right now:\n\n- `getInitialData`: get and preprocess ALL the data, and cache it. return index.\n- `getData`: read individual items from cache. return item.\n\nThe API I want:\n\n- `createIndex`: a CHEAP function to get an overview of all data and their hashes/modified dates.\n- (invisible API): read prior index if exists and diff and only THEN kick off SSR\n- `getDataSlice`: an idempotent function to get a data slice based on a key. results will be temporarily cached and return if request repeats.\n- `postProcess`: post process.\n- (invisible API): save index and save generated files for next build\n\nThe hooks API is very attractive for composition but I'm not sure it works here.\n\nThe interface for the index is very important as I'll be passing this around. We could have a \"fat index\" (and worry about what to include) or a \"thin index\" (and worry about doing subsequent work):\n\n- `lastModified`: datetime\n- `uid`: can be the slug, filename, whatever as long as it is guaranteed to be unique. Right now slug and uid are the same thing, but this will break.\n\nI have no idea what I should do here.\n\n---\n\nExperimenting with the hooks API...\n\n```js\nexport async function getIndex() {\n  const index = getMainIndex() // create index - this should be fast!\n  const blogIndex = await myPlugin('blog')\n  ssg.postProcess(async () => {\n    // make rss feed of index and blogindex\n  })\n  return {\n    index,\n    blogIndex\n  }\n}\nasync function myPlugin(name, opts) {\n  const index = createPluginIndex(name, opts)\n  const getSlice = ssg.createSlice(name, async key => {\n    // expensively fetch slice\n  })\n  ssg.postProcess(async () => {\n    // do some postbuild thing?\n    // you can use getSlice here cheaply since its cached\n  })\n  return index\n}\n```\n\nand you can create plugin plugins...\n\n```js\nasync function myPlugin(name, opts) {\n  const index = createPluginIndex(name, opts)\n  const getSlice = myPluginPlugin(name)\n  ssg.postProcess(async () => {\n    // do some postbuild thing?\n    getSlice(name).then(console.log)\n  })\n  return index\n}\n\nasync function myPluginPlugin(name) {\n  const getSlice = ssg.createSlice(name, async key => {\n    // expensively fetch slice\n  })\n  ssg.postProcess(async () => {\n    getSlice(name).then(console.log)\n  })\n  return getSlice\n}\n```\n\n---\n\nafter thinking it through, i dont like this anymore. if everything is run once, there is no sense sequestering it inside a function. this isn't the right use case for plugins.\n\nI reference [Component Story Format](https://medium.com/storybookjs/component-story-format-66f4c32366df) in this - they broke it up, and now it's far more reusable. It makes sense. I don't have an excuse.\n\nI'll just stick to individual exports for now.\n"
    },
    {
      "slug": "rise-of-immer",
      "data": {
        "technical": true,
        "title": "The Rise of Immer in React",
        "slug": "rise-of-immer",
        "categories": [
          "Tech",
          "React"
        ],
        "date": "2018-09-12T00:00:00.000Z",
        "canonical": "https://www.netlify.com/blog/2018/09/12/the-rise-of-immer-in-react/"
      },
      "content": "\n_Published on the Netlify Blog as [The Rise of Immer in React](https://www.netlify.com/blog/2018/09/12/the-rise-of-immer-in-react/)_\n\nImmutability is changing. At least, the way we do immutability in React is changing. (The irony isn't lost on us.)\n\n![plsdelete](https://user-images.githubusercontent.com/6764957/45408018-b48c1480-b69d-11e8-951f-227774c9f852.png)\n\n## History\n\nThe need for immutability in JavaScript isn't obvious. Classically, the primary advantage of immutability is [fearless concurrency](https://www.infoq.com/articles/dhanji-prasanna-concurrency), but as JavaScript is single-threaded it isn't much of a benefit.\n\nThe history of immutability in React can be traced as far back as December 2013 when [David Nolen first introduced Om](https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs). Om was a wrapper around React for ClojureScript users to be able to use it, but the weird thing about Om was that it turned out to be _faster than React_.\n\n**How can a wrapper over a thing be faster than the thing itself?** David did a great talk about it [here](https://www.youtube.com/watch?v=DMtwq3QtddY) but the primary reason is immutable data. The bulk of React's work is [reconciliation](https://reactjs.org/docs/reconciliation.html), and it turns out that you can skip a lot of it if you can shallow compare objects and arrays and [memoize functions](https://github.com/reactjs/react-basic#memoization). React Fiber's data structure effectively does a lot of memoization under the hood to avoid repeat work.\n\nThe prolific Lee Byron brought this further into the React mainstream with [Immutable.js in 2015](https://www.youtube.com/watch?v=I7IdS-PbEgI)\n(other versions of that ReactConf talk [here](https://vimeo.com/144790954), and [here with Q&A](https://blog.adroll.com/news/lee-byron-immutable)) which is a [dedicated library for immutability in JavaScript](https://facebook.github.io/immutable-js/). Note, in particular, his point that mutable objects [complect](https://www.youtube.com/watch?v=34_L7t7fD_U) time and value, and the benefits of low-level structural sharing.\n\nGiven its philosophical similarity to Flux, Immutable.js was [quickly adopted within the Redux community](https://redux.js.org/recipes/usingimmutablejs) (along with [67 other alternatives](https://github.com/markerikson/redux-ecosystem-links/blob/master/immutable-data.md#immutable-update-utilities), because Redux) and we [adopted it at Netlify, too](https://www.netlifycms.org/docs/architecture/)! Immutability was solved! Right?\n\nRight?\n\n## The People, Culture, Community of Immer\n\nEarly in 2018, Michel Weststrate open-sourced Immer. I will simply insist that you read his [introduction blogpost](https://hackernoon.com/introducing-immer-immutability-the-easy-way-9d73d8f71cb3) and [project readme](https://github.com/mweststrate/immer) rather than repeat it here. I also recommend his [React Finland](https://www.youtube.com/watch?v=-gJbS7YjcSo) talk (you'll need the [slides here](https://immer.surge.sh/)) as follow-up.\n\nThe reaction to Immer has been ecstatic from companies:\n\n> Despite its downsides, Immer not only fulfills both of these requirements, but is also lightweight, simple, and generally performant. Thus far, **developers enjoy using Immer**; it has been extremely non-intrusive and easy to uptake with little-to-no learning curve. — [Workday Engineering](https://medium.com/workday-engineering/workday-prism-analytics-the-search-for-a-strongly-typed-immutable-state-a09f6768b2b5)\n\nand instructors:\n\n> **I currently prefer Immer**. — [Cory House](https://medium.freecodecamp.org/handling-state-in-react-four-immutable-approaches-to-consider-d1f5c00249d5)\n\nand open source maintainers:\n\n> **I'd go with Immer** — [Mark Erikson](https://twitter.com/acemarke/status/999436116280262656)\n\n> **react-copy-write uses @mweststrate's Immer internally**. It lets you mutate a draft of an object to process an immutable update. Since this uses structural-sharing, react-copy-write is very good about only re-rendering when it needs to — [Brandon Dail](https://twitter.com/aweary/status/984828941595652096)\n\nand the React team:\n\n> \"If you like MobX, I highly recommend following along @mweststrate’s work on Immer. While MobX is pretty far removed from the vision of where we’re going with React. **Immer is dead on.**\" — [Sebastian Markbåge](https://twitter.com/sebmarkbage/status/1032684851063705600)\n\n## React and the \"Why\" of Immer\n\nSo there is something obviously magic going on with Immer and it is worth spending some time thinking about how Immer's philosophy may fit particularly well with React's principles to understand what is going on.\n\nWhen it comes to understanding React's philosophy (as separate from React the library as it exists today) there are two documents I constantly refer to: the [Design Principles](https://reactjs.org/docs/design-principles.html) on the official docs and [react-basic](https://github.com/reactjs/react-basic), a pseudocode progression through core beliefs in React. I'll highlight three concepts relevant to Immer:\n\n**Temporal Mutability**\n\n[React's data model is immutable](https://github.com/reactjs/react-basic#state) with state updater functions. Taking a simple Click Counter application, we intentionally don't do this in React:\n\n```js\n// MobX?\nclickHandler = () => this.state.count++\n```\n\nAlthough you could rewrite React internally to support it (or [do it in userland with MobX](https://dev.to/swyx/introduction-to-mobx-4-for-reactredux-developers-3k07)). Instead, we write:\n\n```js\n// React\nclickHandler = () =>\n  this.setState((state) => ({\n    count: state.count + 1,\n  }))\n```\n\nThis bears a great parallel to Immer's Producers:\n\n```js\n// Immer\nconst nextState = produce(currentState, (draft) => {\n  draft.count = draft.count + 1\n})\n```\n\n**Interoperability**\n\n[The biggest issue with Immutable.js](https://redux.js.org/recipes/usingimmutablejs#what-are-the-issues-with-using-immutable-js) is the difficulty of interoperability. Although we have been happy users of Immutable.js at Netlify over 2 years, we get constant reminders we are not using \"just JavaScript\" every time we try to destructure Immutable.js `Map`s:\n\n```js\n// Immutable.js\nconst map1 = Immutable.Map({ foo: 1, bar: 2 })\nconst { foo, bar } = map1\nconsole.log(foo) // undefined\nconsole.log(bar) // undefined\n```\n\nThis makes Immutable.js a fairly leaky abstraction as we have to constantly think about whether the variable we are manipulating is wrapped in Immutable.js.\n\nWith Immer, your objects and arrays are really JavaScript objects and arrays, so you can do everything you would normally do:\n\n```js\n// Immer\nconst map1 = { foo: 1, bar: 2 }\nconst map2 = produce(map1, (draft) => {\n  draft.foo += 10\n})\nconst { foo, bar } = map2\nconsole.log(foo) // 11\nconsole.log(map1.bar === bar) // true\n```\n\nThis is the same philosophy that led to React's success as well — [React's focus on interoperability](https://reactjs.org/docs/design-principles.html#interoperability) allowed gradual adoption (instead of having to convert everything everywhere at once) as well as the general ability to work with other libraries in the JavaScript ecosystem that assume data structures passed to them are plain JS. This is the same goal pitched by Brendan Eich back when [proxies were introduced around 2010](https://www.youtube.com/watch?v=sClk6aB_CPk). Immer is a great use case for unobtrusively extending the language!\n\n**Debugging**\n\nImmer's advanced [Patches](https://github.com/mweststrate/immer#patches) feature allows opportunities for fine-grained debugging and tracing, potentially even building developer tools on top of it.\n\nThis is very similar to [React's focus on debuggability](https://reactjs.org/docs/design-principles.html#debugging), which includes allowing erroneous UI updates to be traced to the source, and building great devtools like the [React DevTools](https://www.netlify.com/blog/2018/08/29/using-the-react-devtools-profiler-to-diagnose-react-app-performance-issues/) on top of these guarantees from React.\n\nAs a nice bonus, Patches also allow for [Redux-like undo/redo implementations](https://redux.js.org/recipes/implementingundohistory) to be done without too much ceremony. Please see the linked resources for code as full examples are too long to be included here.\n\n## Staying Power\n\nChurn is a tired meme in the JavaScript ecosystem, and **the ability to identify technologies with staying power** is the key to sustainable growth. [Our CEO Mathias Biilmann wrote about three lessons for doing this well](https://medium.com/netlify/leveling-up-why-developers-need-to-be-able-to-identify-technologies-with-staying-power-and-how-to-9aa74878fc08):\n\n- Learn your history\n- People, culture, and community matter\n- Always understand the \"why\"\n\nMy confession to you is that I've been slowly walking you through this mental framework as you read through this article. I think it is a great way to evaluate technologies and also explain why some open source projects gain greater adoption in some communities than others.\n\nImmer's meteoric rise is notable, but it is not without reason — it comes from a lot of historical learning and has already gained a great following within the React community, and none of it would be possible if it didn't get its fundamental philosophy right.\n\nDan Abramov also noted recently how these cycles of evolution in technology go, and how people break paradigms successfully:\n\n> Recipe for success: take something that’s easy to debug, and make it less annoying to write. **Thanks to @mweststrate for immer!** — [Dan Abramov](https://twitter.com/dan_abramov/status/1016783114381639680)\n\nI think this is a profound insight — Immer would not have been possible if prior art hadn't already established the core developer experience benefit of immutability, making the remaining problem the leaky API. Immer thus focuses on keeping the same benefits while improving the API in the same ways that made React successful.\n\nThe best way to incrementally try Immer today is in reducing your [Redux](https://github.com/mweststrate/immer#reducer-example) or [React setState](https://github.com/mweststrate/immer#reactsetstate-example) boilerplate. In the future, look for many more Immer-powered libraries like the highly anticipated [redux-starter-kit](https://github.com/markerikson/redux-starter-kit) project as well as non-Redux state-management solutions like [react-copy-write](https://github.com/aweary/react-copy-write), [immer-wieder](https://github.com/drcmda/immer-wieder#readme) and [bey](https://github.com/jamiebuilds/bey) for building fast, boilerplate-free apps!\n"
    },
    {
      "slug": "rollup-plugin-svelte",
      "data": {
        "technical": true,
        "title": "How rollup-plugin-svelte Works",
        "slug": "rollup-plugin-svelte",
        "categories": [
          "Svelte"
        ],
        "date": "2020-01-31T00:00:00.000Z",
        "description": "Svelte is often thought of as a compiler. But really it is a compiler within a bundler."
      },
      "content": "\n*[Tweeted today from the bus](https://twitter.com/swyx/status/1223334283693084672?s=20)*\n\nSvelte has a dirt-simple compiler API - [literally `svelte.compile(source)`](https://svelte.dev/docs#Compile_time) - but it only works at the single component level. Most apps need a bundler solution!\n\n`rollup-plugin-svelte` is [only 338 lines of code](https://github.com/sveltejs/rollup-plugin-svelte/blob/master/index.js) and I thought I would dig into it today! I was originally gearing up for a bigger post, but didn't have much time today due to the final day of Netlify allhands.\n\n## Supporting breaking changes in Svelte\n\nCheck out how it finds the app's Svelte version! This is used for supporting old versions of Svelte.\n\n```js\nconst { version } = require('svelte/package.json'); // directly requiring the file that must be there\n\nconst major_version = +version[0]; // coerce + get first number\n\nconst { compile, preprocess } = major_version >= 3 // branch based on version\n\t? require('svelte/compiler.js')\n\t: require('svelte');\n```\n\n## Plugin Part 1: Resolving Shared Svelte Components\n\nShared Svelte component packages have [a \"svelte\" field in the package.json](https://github.com/sveltejs/component-template/blob/master/package.json#L3). Svelte apps have to be able to access shared Svelte components in their source form, so as to be able to bundle them accordingly. This is what makes that happen.\n\n```js\nresolveId(importee, importer) {\n  if (cssLookup.has(importee)) { return importee; }\n  if (!importer || importee[0] === '.' || importee[0] === '\\0' || path.isAbsolute(importee))\n    return null; // swyx: seriously, we dont handle any absolute or relative imports. only modules.\n\n  // if this is a bare import, see if there's a valid pkg.svelte\n  const parts = importee.split('/');\n  let name = parts.shift();\n  if (name[0] === '@') name += `/${parts.shift()}`; // swyx: allow for @namespaced packages\n\n  const resolved = tryResolve( // swyx: step 1: try resolving for package.json\n    `${name}/package.json`,\n    path.dirname(importer)\n  );\n  if (!resolved) return null;\n  const pkg = tryRequire(resolved); // swyx: step 2: try requiring it\n  if (!pkg) return null;\n\n  const dir = path.dirname(resolved);\n\n  if (parts.length === 0) {\n    if (pkg.svelte) { // swyx: if we get here, there IS a pkg.svelte field!!\n      return path.resolve(dir, pkg.svelte);\n    }\n  } else {\n    // swyx: import sub paths of that shared component package\n    if (pkg['svelte.root']) {\n      // TODO remove this. it's weird and unnecessary - swyx: not sure why this comment is here\n      const sub = path.resolve(dir, pkg['svelte.root'], parts.join('/'));\n      if (exists(sub)) return sub;\n    }\n  }\n},\n```\n\n## Plugin Part 2: Svelte Transform\n\nThe first really important part - the rollup plugin's `transform` method. I went and simplified the code. it basically calls `svelte.compile` with that file's code and adds the css onto a `Set` for later.\n\n```js\ntransform(code, id) {\n  // swyx: etc.\n  // swyx: preprocess code\n  // swyx: etc.\n  return preprocessPromise.then(code => {\n    let warnings = [];\n    const base_options = {}\n    const compiled = compile( // swyx: svelte.compile(code, options)\n      code,\n      Object.assign(base_options, fixed_options, { filename: id })\n    );\n\n    // swyx redacted: emit warnings\n    \n    if ((css || options.emitCss) && compiled.css.code) {\n      let fname = id.replace(extension, '.css');\n      if (options.emitCss) { // css sourcemaps\n        const source_map_comment = `/*# sourceMappingURL=${compiled.css.map.toUrl()} */`;\n        compiled.css.code += `\\n${source_map_comment}`;\n        compiled.js.code += `\\nimport ${JSON.stringify(fname)};\\n`;\n      }\n      cssLookup.set(fname, compiled.css); // save the css of the Svelte component\n    }\n    if (this.addWatchFile) { // rollup api for adding extra watches on all dependencies of this file\n      dependencies.forEach(dependency => this.addWatchFile(dependency));\n    } else {\n      compiled.js.dependencies = dependencies;\n    }\n    return compiled.js; // only return the js of the Svelte component\n  });\n},\n```\n\n## Plugin Part 3 - Generating CSS and SourceMaps\n\nRollup already takes care of the JS so only CSS needs handling for the final bundle output. It is a straight concat of code and sourcemap and then writeFileSync https://github.com/sveltejs/rollup-plugin-svelte/blob/master/index.js#L295-L336\n\n```js\ngenerateBundle() {\n  if (css) {\n    let result = '';\n\n    const mappings = [];\n    const sources = [];\n    const sourcesContent = [];\n\n    for (let chunk of cssLookup.values()) {\n      if (!chunk.code) continue;\n      result += chunk.code + '\\n';\n      // swyx redacted: sourcemap stuff\n    }\n\n    const writer = new CssWriter(result, {\n      sources,\n      sourcesContent,\n      mappings: encode(mappings) // swyx: sourcemap stuff\n    }, this.warn);\n\n    css(writer); // swyx: call user supplied `css()` function with a \"writer\" that has a `.write` method\n  }\n}\n```\n\nThat final `css` function call is supplied by the rollup plugin user. It's a really simple one but can be as complex as you want - here's the standard Svelte rollup template:\n\n```js\nsvelte({\n    // enable run-time checks when not in production\n    dev: !production,\n    // we'll extract any component CSS out into\n    // a separate file — better for performance\n    css: css => {\n        css.write('public/build/bundle.css');\n    }\n}),\n```"
    },
    {
      "slug": "scrollbar-shenanigans",
      "data": {
        "technical": true,
        "title": "Scrollbar Shenanigans",
        "slug": "scrollbar-shenanigans",
        "categories": [
          "CSS"
        ],
        "date": "2020-02-06T00:00:00.000Z",
        "description": "Styling scrollbars for my space on the Internet"
      },
      "content": "\nIf you visit this site on a desktop Webkit browser (Chrome, Safari, Opera, new Edge) you will see a new fancy scrollbar:\n\n![zengarden](https://user-images.githubusercontent.com/6764957/73976710-cae4e100-4920-11ea-976e-cc5e1d3373bd.gif)\n\nThis is a result of me constantly admiring the chunky fat scrollbar on CSS Tricks. They have a really good guide on it: https://css-tricks.com/the-current-state-of-styling-scrollbars/. I'm told this is a webkit prefixed feature, but `scrollbar-gutter` is [on its way to being a standardized CSS property](https://css-tricks.com/almanac/properties/s/scrollbar-gutter/) in [Overflow Module Level 4](https://drafts.csswg.org/css-overflow-4/#scollbar-gutter-property), but it seems [there will also be](https://twitter.com/simevidas/status/1225643974687260673) `scrollbar-color` and `scrollbar-width`.\n\nI like that it is kind of a frivolous thing that has a natural fallback (on non Webkit and on mobile) so you don't have to worry about getting fancy.\n\nOn a total whim I decided to try it out on [Svelte Zen Garden](https://www.swyx.io/writing/svelte-zen-garden). Here is what I discovered in my messing around.\n\n## Minimal styled scrollbar example\n\nGo put this on your site:\n\n```css\nbody::-webkit-scrollbar {\n  width: 2rem;\n}\nbody::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.9);\n  background-color: #444444;\n}\nbody::-webkit-scrollbar-thumb {\n  background-color: red;\n}\n```\n\nOr even better, try it out on [Svelte Zen Garden](https://svelte-zengarden.netlify.com/).\n\n## The PseudoElements\n\nYou have to specify `::-webkit-scrollbar` for any styling to work. (Try removing it, you'll see) It doesn't really matter what you specify, so you can specify a nonsensical property, but you need something:\n\n```css\nbody::-webkit-scrollbar {\n  color: red;\n}\n```\n\nBut most often, you will want to specify the width:\n\n```css\nbody::-webkit-scrollbar {\n  width: 10px;\n}\n```\n\nYou can specify any [CSS length unit](https://www.swyx.io/writing/line-lengths) - I found `vw` a nice one as it scales down as you resize the window smaller and never gets too small.\n\nOnce you've specified `::-webkit-scrollbar`, you can then style `::-webkit-scrollbar-track` (the bigger gutter of the scrollbar) and `::-webkit-scrollbar-thumb` (the smaller thing that actually moves as you scroll).\n\nThose 3 are good enough to use, but [there is a full list of other elements and selectors](https://css-tricks.com/custom-scrollbars-in-webkit/):\n\n```css\n::-webkit-scrollbar              { /* 1 */ }\n::-webkit-scrollbar-button       { /* 2 */ }\n::-webkit-scrollbar-track        { /* 3 */ }\n::-webkit-scrollbar-track-piece  { /* 4 */ }\n::-webkit-scrollbar-thumb        { /* 5 */ }\n::-webkit-scrollbar-corner       { /* 6 */ }\n::-webkit-resizer                { /* 7 */ }\n\n/* pseudo-class selectors */\n:horizontal {}\n:vertical {}\n:decrement {}\n:increment {}\n:start {}\n:end  {}\n:double-button {}\n:single-button {}\n:no-button {}\n```\n\nYou can style them *almost* however you like!\n\n## Things you can do\n\nYou can add fancy gradient patterns! Pick gradients from [Lea Verou](https://leaverou.github.io/css3patterns/).\n\n```css\n/* other selectors omitted */\nbody::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  background-color: #D62929;\n  background-image: -webkit-linear-gradient(45deg,\n                                            rgba(255, 255, 255, .2) 25%,\n                                            transparent 25%,\n                                            transparent 50%,\n                                            rgba(255, 255, 255, .2) 50%,\n                                            rgba(255, 255, 255, .2) 75%,\n                                            transparent 75%,\n                                            transparent)\n}\n```\n\n[You can add margins!](https://twitter.com/swyx/status/1225272701494972416)\n\n```css\n/* other selectors omitted */\nbody::-webkit-scrollbar-track {\n    margin: 20vh;\n}\n```\n\n[You can add transparency!](https://twitter.com/swyx/status/1225276009206992896)\n\nMedia queries work!\n\nYou can target scrollbars on any `overflow: scroll` element, not just `body`!\n\nNote: Unspecified, styling applies to horizontal as well as vertical scrollbars, which you can customize with `:horizontal` and `:vertical`.\n\n## Not Everything Works\n\nIt doesnt work on mobile!\n\nSetting `cursor: pointer` doesn't work, but it'd be fun to change the cursor on scrollbar hover.\n\n## Don't Do This\n\nYou can [put your scrollbar on the left!](https://twitter.com/chordbug/status/1101645780962734081)\n\n## Crazy Scrollbar Examples On The Web\n\nOf course most people should be more subtle with their scrollbars.\n\nBut I like a little personality.\n\n- [CSS Tricks](https://css-tricks.com/)\n- Where else?"
    },
    {
      "slug": "star-apps",
      "data": {
        "technical": true,
        "title": "STAR Apps",
        "subtitle": "A New Generation of Front-End Tooling for Development Workflows",
        "slug": "star-apps",
        "categories": [
          "Tech"
        ],
        "date": "2019-01-18T00:00:00.000Z",
        "canonical": "https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/"
      },
      "content": "\n_Published on CSS Tricks as [STAR Apps: A New Generation of Front-End Tooling for Development Workflows](https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/)_\n\nI started having this observation in October, it started as a tweet that was rejected and I couldnt get it out my head so I made it into an article.\n"
    },
    {
      "slug": "svelte-auth",
      "data": {
        "technical": true,
        "title": "Writing an Authentication Store in Svelte",
        "slug": "svelte-auth",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "description": "This is my attempt today wrapping an Authentication workflow into a Svelte Store",
        "date": "2020-01-22T00:00:00.000Z"
      },
      "content": "\n## Table of Contents\n\nChris Dhanaraj, one half of the AMAZING [Toolsday](https://twitter.com/toolsday?lang=en) duo with the equally talented [Una Kravets](https://twitter.com/una), and [serial mispronouncer of my name](https://spec.fm/podcasts/toolsday/311251), recently schooled me that [Svelte Stores are very similar to React Hooks](https://twitter.com/chrisdhanaraj/status/1214663440184164352). I objected at first, but Rich Harris confirmed he was right.\n\nThis is my attempt today wrapping an Authentication workflow into a Svelte Store, just like I did with [Netlify Identity and React Hooks + Context](https://github.com/sw-yx/react-netlify-identity-widget). This example uses Amplify Auth, but really its going to be the exact same for any auth library/system.\n\n## Bottom Line Up Front\n\nYou can see my Live Demo here: https://d1tdmagl19vwso.cloudfront.net/\n\nand the source code is at: https://github.com/sw-yx/svelte-amplify-auth-demo\n\n![image](https://user-images.githubusercontent.com/6764957/72947142-2030c800-3d4f-11ea-8095-cd1df9d3920e.png)\n\n> *Sequel post: [Optimistic, Offline-First Apps with Svelte and Amplify DataStore](https://www.swyx.io/writing/svelte-amplify-datastore/)*\n\n## Process - setup from Scratch\n\n> ⚠️Note: this is a backward reconstruction of my process, I have not doublechecked that I have accounted for every step of the process if you followed this tutorial from top down. Thinking caps on!\n\nOriginally I set out to try out [Amplify's new DataStore](https://medium.com/open-graphql/create-a-multiuser-graphql-crud-l-app-in-5-minutes-with-the-amplify-datastore-902764f27404), but quickly got sidetracked because it requires auth and there is no Amplify Svelte adaptor. So I embarked on a little bit of yak shaving to implement auth in a simple Svelte app.\n\nI think the best way to start is to boot up a standard Svelte app:\n\n```bash\nnpx degit sveltejs/template-webpack svelte-app # must use webpack, Amplify doesnt work with rollup\ncd svelte-app\nnpm install\nnpm run dev\n```\n\nAnd then follow some of the steps on Amplify's Auth docs: \n\n- https://aws-amplify.github.io/docs/js/authentication#configure-your-app\n- https://github.com/aws-amplify/amplify-js/blob/master/README.md#2-add-authentication-to-your-app\n\n```bash\nnpm i @aws-amplify/auth @aws-amplify/core aws-amplify\nnpx amplify-app\namplify init \namplify add auth\n```\n\nYou will also need to modify Svelte's root js page to use amplify's generated config files ([adapting their Configuration docs](https://github.com/aws-amplify/amplify-js/blob/master/README.md#configuration)):\n\n```js\n// src/main.js\nimport App from './App.svelte';\n\nimport Amplify from '@aws-amplify/core';\nimport Auth from '@aws-amplify/auth';\nimport aws_exports from './aws-exports';\n\nAmplify.configure(aws_exports);\n\nconst app = new App({\n  target: document.body,\n  props: {\n    name: 'world'\n  }\n});\n\nexport default app;\n```\n\nYou are now ready to add Svelte stores.\n\n## Adding a Svelte Store\n\nSvelte stores are dead easy to use. I gave an [Intro to Svelte Stores](https://twitter.com/SvelteSociety/status/1215264775262949378) recently. You could also [RTFM](https://svelte.dev/docs#svelte_store) but where's the fun in that??\n\n```js\n// auth.js\nimport { writable } from 'svelte/store';\n\nexport const store = writable(null); // start with no user\n```\n\nAnd so we have a two line store we can now use in our app. Let's also create a login component:\n\n\n```html\n<!-- src/Login.svelte -->\n<script>\n  import { store } from './auth.js'\n  let username = \"\"\n  let password = \"\"\n  let email = \"\"\n  function handleSubmit() {\n    $store = { username } // simulate login\n  }\n</script>\n<div>\n  <h1>Sign In</h1>\n  <pre>{JSON.stringify($store, null, 2)}</pre>\n  <form on:submit|preventDefault={handleSubmit}>\n    <label>\n      Username:\n      <input type=\"text\" bind:value={username} placeholder=\"your username\"/>\n    </label>\n    <label>\n      Password:\n      <input type=\"password\" bind:value={password} />\n    </label>\n    <label>\n      Email:\n      <input type=\"email\" bind:value={email} />\n    </label>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>\n```\n\nHere we are using two way binding and the `$` store autosubscribe syntax to make creating the form easy.\n\nImplementing logout is even easier:\n\n```html\n<!-- Main.svelte -->\n<script>\n  import { store } from './auth.js'\n  function logout() {\n    $store = null\n  }\n</script>\n<main>\n  <h2>You are logged in <button type=\"button\" on:click={logout}>Log Out</button></h2>\n  <pre>\n    {JSON.stringify($store, null, 2)}\n  </pre>\n</main>\n```\n\nand you can tie them together in your main app:\n\n```html\n<!-- App.svelte -->\n<script>\n\timport Login from './Login.svelte'\n\timport Main from './Main.svelte'\n\timport { store } from './auth.js'\n</script>\n\n<main>\n\t{#if $store != null}\n\t\t<Main />\n\t{:else}\n\t\t<Login />\n\t{/if}\n</main>\n```\n\n## Adapting the Auth Library\n\nNow lets actually wire up the submit handler to sign up the user:\n\n```html\n<!-- src/Login.svelte -->\n<script>\n  import { store } from './auth.js'\n  import Auth from '@aws-amplify/auth';\n  let username = \"\"\n  let password = \"\"\n  let email = \"\"\n  function handleSubmit() {\n    Auth.signUp({\n      username,\n      password,\n      attributes: {\n        email,\n      },\n    }).then(user => {\n      $store = user //  save user object, representing a successful login\n    })\n  }\n</script>\n<!-- etc -->\n```\n\nOk, this lets us sign people up but then we also need to confirm the user.  Amplify requires a two step signup process - a [sign up](https://github.com/aws-amplify/amplify-js/blob/master/README.md#2-add-authentication-to-your-app) and then a [confirm step](https://aws-amplify.github.io/docs/js/authentication#sign-up) for 2FA verification (in this case, your email, but they also do SMS). Because this is Amplify specific, I'm going to handwave over it and ask you to look at my demo if you need details. It's gonna be dependent on whatever you actually end up using.\n\n## Showing Promise State\n\nIt's a good user experience to tell the user exactly what's going on with their login, while it happens. Svelte helps with this too with the super handy [await syntax](https://svelte.dev/docs#await). The trick to this is assigning a promise to a variable, and then letting Svelte track/unroll the state of the promise as it goes inflight and results in either success or failure:\n\n```html\n<!-- src/Login.svelte -->\n<script>\n  import { store } from './auth.js'\n  import Auth from '@aws-amplify/auth';\n  let username = \"\"\n  let password = \"\"\n  let email = \"\"\n  let promise // undefined at first\n  function handleSubmit() {\n    promise = fetch('/myapi')\n      // etc...\n  }\n</script>\n\n{#await promise}\n  <p>Logging in...</p>\n{:catch error}\n  <p class=\"errorMessage\">Something went wrong: {error.message}</p>\n{/await}\n<!-- etc -->\n```\n\nYou can test the rejection case works by assigning \n\n```js\npromise = new Promise((yay, nay) => setTimeout(() => nay({message: 'rejected'}), 1000)\n```\n\n## Moving Logic into the Store\n\nWhat we've made isn't really reusable. I like wrapping up reusable behavior in UI-less libraries - this was the original impetus behind hooks, which [Merrick Christensen called Headless Components](https://medium.com/merrickchristensen/headless-user-interface-components-565b0c0f2e18). This way, you get to reuse this code however you like with whatever UI you like. We're also mixing a lot of business logic into our Login component, and it might be nice to split it out a bit.\n\nSo lets revisit the store and do the move:\n\n```js\n// src/auth.js\nimport { writable } from 'svelte/store';\nimport Auth from '@aws-amplify/auth';\n\nexport const store = writable(null);\nexport const logout = () => store.set(null);\nexport async function signUp(username, password, email) {\n  return Auth.signUp(username, password, email)\n          .then((data) => void store.set(data));\n}\n// etc, as needed\n```\n\nNow I can `import { logout, signUp } from './auth'` anywhere in my app and use this logic!\n\n## Draw the rest of the Owl\n\nDo more of the same for signing in an already signed up user.\n\n## Bonus: persisting state to localStorage\n\nIt can be annoying to lose the logged in user state on refresh. People expect their session to stick around. so you might want to sync up the user object to localStorage:\n\n```js\n// src/auth.js\nimport { writable } from 'svelte/store';\nimport Auth from '@aws-amplify/auth';\n\nlet _user = localStorage.getItem('amplifyUser');\nexport const store = writable(_user ? JSON.parse(_user) : null);\nstore.subscribe((value) => {\n  if (value) localStorage.setItem('amplifyUser', JSON.stringify(value));\n  else localStorage.removeItem('amplifyUser'); // for logout\n});\n```\n\nNote some caveats - this may need an isomorphic wrapper if you are doing server side rendering, and that there are some security situations in which you should not store JWT's in localStorage. You can adapt your code to your needs but this will get you started.\n\nThat's all I've got - even getting here took longer than I thought! I hope to return to DataStore at some point but figured I would write up what I have.\n\n> *Sequel post: [Optimistic, Offline-First Apps with Svelte and Amplify DataStore](https://www.swyx.io/writing/svelte-amplify-datastore/)*"
    },
    {
      "slug": "svelte-contributing",
      "data": {
        "technical": true,
        "title": "How to Contribute to Open Source Frameworks",
        "subtitle": "A 9 Step Guide for First Time Contributors",
        "slug": "svelte-contributing",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "description": "One of the best ways to level up in programming is to contribute to a high quality open source project, especially a framework.",
        "date": "2020-02-15T00:00:00.000Z"
      },
      "content": "\n## TL;DR\n\n1. **Setup**\n2. **Look for similar code**\n3. **Look for similar tests**\n4. **Write your own test**\n5. **Run your tests**\n6. **Write your code**\n7. **Pass local tests**\n8. **Fix fixtures**\n9. mystery.. read on!\n\n## Background\n\nI've [contributed to React](https://www.swyx.io/speaking/contributing-to-react/) before, and though I didn't become a regular contributor, it definitely gave me a deeper appreciation of how React worked internally, and how a high quality open source framework is run (which is a whole nother level of abstraction from normal app code). \n\nAt the time, I was just looking to get something nontrival on the board for Hacktoberfest. But recently I [ran into a minor problem in Svelte](https://github.com/sveltejs/svelte/issues/4405) and [Conduitry opened it up as an issue](https://github.com/sveltejs/svelte/issues/4408) to be addressed. \n\nThis was my call to action.\n\n## Table of Contents\n\n## Why Contribute\n\nOne of the best ways to level up in programming is to contribute to a high quality open source project, especially a framework. You level up specifically in two ways: \n\n1. You learn to think one level lower in terms of abstraction. With an app, you are typically consuming code ([according to Seldo, 97% of app code is OSS code](https://medium.com/npm-inc/this-year-in-javascript-2018-in-review-and-npms-predictions-for-2019-3a3d7e5298ef)). With an OSS library or framework, you are writing code to be consumed by other code, with probably wider usecases than you have experience with. Be ready for the \"this doesn't work on Windows\" or \"What about IE11\" or \"Did you consider React Native?\" or any number of cases you may not normally think about.\n2. You can get by only manually testing things in an app. But with an OSS framework, nobody has time to manually test everything for regressions with every PR. So an extensive test suite and CI automation is a must - this is to *save time* rather than a *nice to have*. Ditto documentation, error messages, etc etc. So you level up by being forced to think through all these factors that a typical app developer might normally skip for expedience.\n\nAnd, of course, as a user of the open source project, if anything goes wrong in future, you are extremely well equipped to dig into the internals to figure out the fix.\n\n## What to Contribute\n\nOne of the best ways to contribute to a high quality open source project (or even an app at a new job) is to work on something with a small scope and add tests. In fact [you can even skip adding functionality - Just add tests and people will thank you!](https://twitter.com/swyx/status/1064742523426430976?s=20). \n\nIn practice, for OSS frameworks, I've found adding devmode warnings is a nice entry point. You don't risk adding any JS weight to production bundles, you learn how the library differs between dev and prod, and you improve the developer experience for everyone who comes after you.\n\n> ⚠️ Note: Make sure your contribution is welcome! \n\nFor example, there should be an open issue acknowledged by maintainers. Don't skip this unless you know the context well enough to be sure. **Driveby PRs are not welcome**, and cause extra maintainer stress when they have to reject your code. \n\n## How to Contribute\n\nHere are the high level steps to follow:\n\n1. **Setup**\n  - Fork the repo\n  - `git clone` it locally\n  - `npm install` \n    - `yarn install` doesn't work on the Svelte codebase for some reason\n  - Run the full test suite\n    - You're gonna have to run it at the end, so might as well run it at the start to make sure you have everything setup right. Sometimes you need to setup extra env vars and stuff like that. For Svelte, nothing is needed, just run `npm test`\n  - Read `CONTRIBUTING.md`\n    - many projects have uninformative `CONTRIBUTING.md`'s, but often you at least get some good hints on project structure and contribution requirements (e.g. a [CLA](https://en.wikipedia.org/wiki/Contributor_License_Agreement))\n2. **Look for similar code**\n\t- it is unlikely that you're contributing something totally novel, so hopefully there is something similar nearby\n\t- For me, I found [this code](https://github.com/sveltejs/svelte/blob/2b3c2daafb854d04100e0648910083d493bcb1d7/src/runtime/internal/keyed_each.ts#L111), which was used [here](https://github.com/sveltejs/svelte/blob/6250046c052eb360e51b272c55870cff71f41a70/src/compiler/compile/render_dom/wrappers/EachBlock.ts#L377). It isn't EXACTLY a copy and paste job, but it gave me enough context that my solution was going to look the same.\n3. **Look for similar tests**\n\t- That code is (hopefully) tested - so let's look for the corresponding tests!\n\t- For me, I used the error `Cannot have duplicate keys in a keyed each` and [found this test](https://github.com/sveltejs/svelte/tree/1a343b165c577429e968cea48607cccabf714b9b/test/runtime/samples/keyed-each-dev-unique).\n\t- There are also often several different ways to test things, so use this as an opportunity to study which approach is used to test which kinds of features - you may have to defend your choice in future.\n4. **Write your own test**\n  - I copied the test out and adapted it to expect the error/warning I was aiming to add\n\t- For Svelte, you can [prototype it in the REPL](https://svelte.dev/repl/hello-world?version=3) to ensure your test case fails as you expect\n5. **Run your tests**\n\t- To know that the test is properly written, and that you understand the test harness, you should run your test to see it *fail* first before you try to make it succeed.\n  - In Svelte, you can run `npm test` for all tests and `npm run test -- -g REGEX_FOR_SPECIFIC_TESTS` for individual groups of tests by regex so that you can iterate faster. For me, I ended up running `npm run test -- -g dev-warning-each-block` - you get this instruction from `CONTRIBUTING.md`\n6. **Write your code**\n\t- Now you know how your test fails, time to make your tests pass!\n\t- You may run into other dependencies, and have to yak shave a bit. For me, I ran into the new and not-well documented `code-red` dependency, and [sent in a PR](https://github.com/Rich-Harris/code-red/pull/34) to update the docs for myself and for others. I think it is quite common to run into further documentation issues while working on an existing PR, because existing maintainers have the info in their heads, and so this is often a further contribution opportunity.\n\t- By now you have seen a decent part of the codebase - try to match the code style/conventions of the surrounding code, including Prettier/Linting settings.\n7. **Pass local tests**\n\t- Bounce between 6 and 7 ad infinitum until you are sure your tests fail and pass in the right scenarios and not in each others' scenarios.\n\t- Speed is important here - run local test groups (eg `npm run test -- -g REGEX_FOR_SPECIFIC_TESTS`) rather than rerun all tests every time (eg `npm run test`)\n\t- Because Svelte is a compiler, when you run the test, every test folder gets an `/_output` folder generated with the intermediate compiled code, which you can manually inspect to ensure where your code is going wrong\n8. **Fix fixtures**\n\t- If you affect any output code, you will probably break some fixtures and snapshots. Make sure nothing untoward is going on, then copy and paste into the fixtures to update them!\n9. **Blog about it, do a Talk about it**\n\t- What, you expect me not to encourage you to pass on your knowledge? \n\n## [Here is the final PR](https://github.com/sveltejs/svelte/pull/4419) I made.\n\nGood luck!"
    },
    {
      "slug": "svelte-amplify-datastore",
      "data": {
        "technical": true,
        "title": "Optimistic, Offline-First Apps",
        "subtitle": "with Svelte and Amplify DataStore",
        "slug": "svelte-amplify-datastore",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "description": "This is my attempt adapting an Amplify DataStore tutorial to Svelte",
        "date": "2020-01-23T00:00:00.000Z"
      },
      "content": "\n**Offline-first apps and Optimistic UI are essentially the same thing**. Given a well defined backend contract (like GraphQL), we can move a lot of this desirable functionality into a reusable frontend-framework-agnostic \"data framework\" that handles all this so the developer doesn't have to.\n\nThis is why I am interested in DataStore. I wrote [Optimistic, Offline-first apps using serverless functions and GraphQL](https://twitter.com/swyx/status/1108663969466572800) in a private gist a year ago, and I believe that DataStore is the closest attempt at a framework for this since [Meteor](https://docs.meteor.com/api/collections.html) and [PouchDB](https://pouchdb.com/).\n\nThis blogpost is a two-parter. \n\n- Part 1 is a How-To for hooking up Svelte to DataStore. \n- Part 2 is a republishing of my musings on why this is so important.\n\n## Table of Contents\n\n## Bottom Line Up Front\n\nYou can see the source: https://github.com/sw-yx/svelte-amplify-datastore-demo\n\nand the deployed demo here: https://d1tdmagl19vwso.cloudfront.net/\n\n![sveltedatastore](https://user-images.githubusercontent.com/6764957/73031770-05238e00-3e0b-11ea-8bf8-67ca0f844c2c.gif)\n\n\nConcurrent Session CRUD seems to have a bug right now, filed at: https://github.com/aws-amplify/amplify-js/issues/4765\n\n## Part 1 - Svelte + DataStore\n\n### Wiring up the DataStore\n\nThis is a followup to [Writing an Authentication Store in Svelte](https://www.swyx.io/writing/svelte-auth).\n\nNow that I have a nice auth wrapper in Svelte, I can actually start playing around with the DataStore, as [per the React tutorial](https://medium.com/open-graphql/create-a-multiuser-graphql-crud-l-app-in-5-minutes-with-the-amplify-datastore-902764f27404). I had already set up the model and the codegen per its instructions, and the remaining task was to wire up DataStore to do basic CRUD.\n\nThe tutorial example colocates the DataStore logic with component logic. This is nice and short but sometimes you might wish to move it out into an app-level state. I was tempted by the idea of having a \"Amplify DataStore Svelte Store\" just like the much-maligned [AWS Systems Manager Session Manager](https://twitter.com/quinnypig/status/1166847095736807424). But it is extra complexity so I discarded the idea.\n\nWhat's really nice about Svelte is that almost everything inside the `<script>` tag is \"just JavaScript. The only things that get transformed are the assignment operators and the magic `$` reactivity label. So most of these examples I can do in \"plain JS\".\n\nFirst step is to establish some state to be able to store stuff:\n\n```html\n<!-- Main.svelte -->\n<script>\n  let notes = [] // in memory copy of all the results from DataStore queries\n  const setNotes = v => void (notes = v) // helper to set the store\n</script>\n```\n\nEasy peasy! now let's actually grab some data from the store when the component mounts and unsubscribe when it unmounts:\n\n```html\n<!-- Main.svelte -->\n<script>\n  import { DataStore, Predicates } from '@aws-amplify/datastore';\n  import { Note } from './models';\n  import { onMount, onDestroy } from 'svelte';\n  \n  let notes = [] // in memory copy of all the results from DataStore queries\n  const setNotes = v => void (notes = v) // helper to set the store\n  function listNotes() {\n    return DataStore.query(Note, Predicates.ALL).then(setNotes);\n  }\n\n  // do stuff on mount/unmount\n  onMount(listNotes);\n  const subscription = DataStore.observe(Note).subscribe(listNotes);\n  onDestroy(subscription.unsubscribe)\n  \n  // handle connectivity and logout\n  const handleConnectionChange = () => {\n    const condition = navigator.onLine ? 'online' : 'offline';\n    if (condition === 'online') listNotes();\n  };\n  window.addEventListener('online', handleConnectionChange);\n  Hub.listen('auth', (data) => (data.payload.event === 'signOut') && DataStore.clear())\n</script>\n```\n\nWe don't technically have to wrap DataStore in functions, but it can make the code a lot more readable and abstract implementation from the actual domain.\n\n### CRUD wrappers\n\nSimilarly, you can write simple event handlers that wrap around the basic DataStore operations:\n\n```html\n<!-- Main.svelte -->\n<script>\n  // etc\n  let value = '' // we will bind this to a textbox used for search, update, and creation\n  const resetValue = () => value = \"\" // helper to reset value to ''\n\n  // add, update, delete\n  const handleAddNote = () => DataStore.save(new Note({ note: value })).then(listNotes).then(resetValue)\n  function handleUpdateNote() {\n    const original = await DataStore.query(Note, selectedId);\n    await DataStore.save(\n      Note.copyOf(original, (updated) => void (updated.note = value))\n    ).then(listNotes)\n  }\n  async function deleteNote(id) {\n    const toDelete = await DataStore.query(Note, id);\n    return DataStore.delete(toDelete);\n  }\n</script>\n```\n\n### Display Modes\n\nThe original demo used a set of Boolean states to manage what was displaying on screen:\n\n```js\n  const [displayAdd, setDisplayAdd] = useState(true);\n  const [displayUpdate, setDisplayUpdate] = useState(false);\n  const [displaySearch, setDisplaySearch] = useState(false);\n```\n\nThis can result in weird states because it relies on the developer correctly resetting values as appropriate on each state change. It is probably better to consciously design states like this:\n\n```js\n  let displayMode = 'add' // add, search, update\n```\n\nand you are free to just set displayMode once and be sure that your UI will rerender as intended. Instead of 2x2x2 = 8 possible states, you get 3 and only 3. I did a small version of this with [the auth screen](https://www.swyx.io/writing/svelte-auth) as well.\n\n### Putting them together\n\nWe can now wire up the CRUD wrappers and Display Modes together to create a full Svelte clone of the DataStore example:\n\n\n```html\n<!-- Main.svelte -->\n<script>\n  import { store as authStore, logout } from './stores/auth.js'\n  import Amplify, { Hub } from '@aws-amplify/core';\n  import { DataStore, Predicates } from '@aws-amplify/datastore';\n  import { Note } from './models';\n  import { onMount, onDestroy } from 'svelte';\n\n  let displayMode = 'add' // add, search, update\n  let value = \"\"\n  const resetValue = () => value = \"\"\n  let selectedId = \"\"\n  let notes = [] // in memory copy of all the results from DataStore queries\n  const setNotes = v => void (notes = v) // helper to set the store\n  onMount(listNotes);\n  const subscription = DataStore.observe(Note).subscribe(listNotes);\n  onDestroy(subscription.unsubscribe)\n  const handleConnectionChange = () => {\n    const condition = navigator.onLine ? 'online' : 'offline';\n    if (condition === 'online') listNotes();\n  };\n  window.addEventListener('online', handleConnectionChange);\n  Hub.listen('auth', (data) => (data.payload.event === 'signOut') && DataStore.clear())\n  function handleAddNote() {\n    return DataStore.save(new Note({ note: value })).then(listNotes).then(resetValue)\n  }\n  async function handleUpdateNote() {\n    const original = await DataStore.query(Note, selectedId);\n    await DataStore.save(\n      Note.copyOf(original, (updated) => void (updated.note = value))\n    ).then(listNotes)\n  }\n  function handleSearch() {\n    displayMode = 'search'\n    DataStore.query(Note, (c) => c.note('contains', value)).then(setNotes)\n  }\n  function clearSearch() {\n    displayMode = 'add'\n    listNotes().then(resetValue)\n  }\n  function handleSelect(note) {\n    value = note.note\n    selectedId = note.id\n    displayMode = 'update'\n  }\n  function listNotes() {\n    return DataStore.query(Note, Predicates.ALL).then(setNotes);\n  }\n  function handleDelete(id) {\n    return async () => {\n      const toDelete = await DataStore.query(Note, id);\n      DataStore.delete(toDelete).then(listNotes)\n    }\n  }\n</script>\n\n<h2>You are logged in as {$authStore.username} <button type=\"button\" on:click={logout}>Log Out</button></h2>\n<div class=\"container\">\n  {#if displayMode === 'add'}\n  <form on:submit|preventDefault={handleAddNote}>\n    <div class=\"input-group mb-3\">\n      <input type=\"text\" class=\"form-control form-control-lg\" placeholder=\"New Note\" bind:value />\n      <div class=\"input-group-append\">\n        <button class=\"btn btn-warning border border-light text-white font-weight-bold\" type=\"submit\">\n          Add Note\n        </button>\n        <button class=\"btn btn-warning border border-light text-white font-weight-bold\" type=\"button\" on:click={handleSearch} >\n          Search\n        </button>\n      </div>\n    </div>\n  </form>\n  {/if}\n  {#if displayMode === 'update'}\n  <form on:submit|preventDefault={handleUpdateNote} >\n    <div class=\"input-group mb-3\">\n      <input type=\"text\" class=\"form-control form-control-lg\" placeholder=\"Update Note\" bind:value />\n      <div class=\"input-group-append\">\n        <button class=\"btn btn-warning text-white font-weight-bold\" type=\"submit\">\n          Update Note\n        </button>\n      </div>\n    </div>\n  </form>\n  {/if}\n</div>\n<div class=\"container\">\n  {#each notes as item}\n  <div class=\"alert alert-warning alert-dismissible text-dark show\" role=\"alert\">\n    <span on:click={() => handleSelect(item)}>{item.note}</span>\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" on:click={handleDelete(item.id)} >\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  {/each}\n  {#if displayMode === 'search'}\n  <button class=\"button btn-warning float-right text-white font-weight-bold\" on:click={clearSearch}>\n    <span aria-hidden=\"true\">Clear Search</span>\n  </button>\n  {/if}\n</div>\n```\n\nIt comes in at 100 lines of code, compared to 158 lines for the React example.\n\nYou can see the source: https://github.com/sw-yx/svelte-amplify-datastore-demo and the deployed demo here: https://d1tdmagl19vwso.cloudfront.net/\n\n- Try going offline, editing, and going back online again. You **do not lose data** and it is always fast because you're writing to a local store first.\n- Concurrent Session CRUD seems to have a bug right now, filed at: https://github.com/aws-amplify/amplify-js/issues/4765\n\n## Part 2 - Why this is Important\n\nI wrote [Optimistic, Offline-first apps using serverless functions and GraphQL](https://twitter.com/swyx/status/1108663969466572800) in a private gist a year ago, and I believe that DataStore is the closest attempt at a framework for this since Meteor and [PouchDB](https://pouchdb.com/). ([Eric Vicenti](https://twitter.com/EricVicenti) also has a more nascent project, Aven Cloud), and I have yet to confirm if Firebase's SDK actually does this as well. [Replicache](https://replicache.com) is a newer attempt at this problem.\n\nThe main realization is that Offline-first and Optimistic UI are essentially the same thing, and given a well defined backend contract (like GraphQL), we can move a lot of this desirable functionality into a reusable frontend-framework-agnostic \"data framework\" that handles all this so the developer doesn't have to.\n\n### Optimistic Apps\n\nIn a world where API latency is unpredictable, the way to make user interactions seem instant is essentially by lying to the user. Most implementations of optimistic updates work like this:\n\n- duplicate what the result of the interaction would be in clientside code, while sending off the interaction to the server.\n- (optional) If this succeeds, the legitimate result may replace the clientside simulated result\n- If this fails, a notification is shown and the result is reverted.\n\nPulling this off well is tremendously hard to do:\n\n- Design considerations of whether to make it clear the optimistic result is not final, and how to revert on failure\n- Authentication may expire, or APIs may hit other limits\n- Properly keeping the rest of the app in sync that may need to know about this update\n- Firing off multiple interactions that depend on each other, where some may fail and some may succeed, possibly arriving at the API out of sequence.\n- State changes on the serverside that may impact the results of user's interaction (for example, from other users)\n\n```\nParadigm 1: Client <-> Server\n```\n\nAgainst the sole benefit of \"feeling instant\", the engineering challenge of coordinating all these cases may often kill the goal.\n\n### Offline-first\n\nA constraint that can simplify the design and engineering of Optimistic UI is the idea of Offline-first apps. This concept is still very new and not that popular with webapps, and traditionally has more to do with local storage and manipulation of data (and subsequent syncing). The usage of service workers and IndexedDB to do this gives this concept a lot of overlap with Progressive Web Apps.\n\nHere the challenge is to download some subset of data that is likely to be useful, as well as being able to locally operate on that data, while being able to sync back and forth with the data store.\n\nHowever, simply having an explicit layer to control syncing on one side (facing the server) and updates on the other (facing the client) with explicit global knowledge of whether we are in online or offline state can make the programming model a lot clearer.\n\n```\nParadigm 2: Client <-> IndexedDB + Service Worker <-> AppSync\n```\n\n### GraphQL as Contract\n\nOne way to dramatically lock down the surface area of REST endpoints is to only communicate back and forth between client and service worker and server with GraphQL. On the clientside, DataStore exposes a constrained ORM for this purpose, which gets translated to GraphQL queries for AppSync.\n\n```\nParadigm 3: Client <- DataStore queries -> IndexedDB + Service Worker <- GraphQL -> AppSync\n```\n\n### Conflict resolution\n\nOf course all this is nice until you have multiple people editing the same fields on a database. The nice word for this is \"collaboration\", but to devs the technical term is \"clusterfuck\". \n\n[Commutative operations](https://sciencing.com/associative-commutative-property-of-addition-multiplication-with-examples-13712459.html) are still fine. Order doesn't matter.\n\nBut so many interesting things happen when order matters. The simplest strategy is \"Last-Write-Wins\". But sometimes you want to merge complex objects. And also you should have a way to not discard data irretrievably for dropped updates.\n\nI haven't done a whole lot of thining here, to be brutally honest. I just know it's hard and I rather hand it over to a framework unless I absolutely have to dig into it. More reading from smart people:\n\n- [DataStore docs on their Conflict Detection](https://docs.aws.amazon.com/appsync/latest/devguide/conflict-detection-and-sync.html)\n- [Richard Threlkeld - AppSync/DataStore session at Re:invent 2019](https://www.youtube.com/watch?v=KcYl6_We0EU&list=WL&index=4&t=5s)\n- [Richard on more important nuances](https://twitter.com/undef_obj/status/1213034443759243264)\n- [James Long - CRDTs for Mortals](https://twitter.com/swyx/status/1215631885239492610)\n- [Andrew Herron - To OT or CRDT, that is the question](https://www.tiny.cloud/blog/real-time-collaboration-ot-vs-crdt/)\n- [Thai Pangsakulyanont - Handling Optimistic Updates in a Separate Queue](https://www.youtube.com/watch?v=DWZj56qUNfs&app=desktop)\n  - [Richard's comments](https://twitter.com/undef_obj/status/1213020036484366336): What this is talking about is needing a deterministic synchronization protocol that has both safety and correctness in the system. Separate stores is one way to do this on the client, however it doesn't address the problem of dealing with conflicts\n- what else is required reading? [please let me know.](https://twitter.com/swyx)"
    },
    {
      "slug": "svelte-eleventy",
      "data": {
        "technical": true,
        "title": "Svelte as an Eleventy Template Engine",
        "slug": "svelte-eleventy",
        "categories": [
          "Svelte",
          "ssg"
        ],
        "date": "2020-02-01T00:00:00.000Z",
        "description": "Svelte is a really nice authoring format for HTML components. I wanted to explore if I could extend Eleventy to use it."
      },
      "content": "\nEleventy is great, but I wanted to see if I could use Eleventy with the Svelte component authoring experience.\n\nThis post explores the main knowledge you will need to know to add any templating language to Eleventy, not that much is really Svelte specific. There is no demo and no call to action, because this is an unreleased work in progress. But of course, if this interests you please reach out to have a chat.\n\n## Table of Contents\n\n## JS vs No-JS\n\nA big part of why JS SSG's like Gatsby and Sapper are enjoyable is that the upgrade path for adding interactivity is very natural and idiomatic. Scoped CSS is also a nice to have. No-JS SSG's tend to treat JS as something to be \"sprinkled on\" later (I am often amused by how much people love that phrase), which can be a little awkward to write when you have to hop in and out of folders and build systems. Many sites start completely static, and then add and add and add dynamic elements over time as people naturally want features and a more interactive user experience. It would be nice if the upgrade path was seamless.\n\nHowever, JS SSG's can also add unnecessary JS weight. Most offer SPA-like clientside navigation to subsequent pages by default. The argument for this is that by just downloading json, you skip downloading the repeated HTML of your layout, and gain the ability to offer things like [native-like page transitions](https://css-tricks.com/native-like-animations-for-page-transitions-on-the-web/) and [predictive prefetching](https://noti.st/shortdiv/jsHO3Z) (not impossible without a framework, just a little harder). The argument against this is that most traffic is view-one-page-and-bounce, so you are optimizing for the minority multi-page-viewer at the expense of the majority-single-page-bouncer. And [most of the time we don't do any page transitions](https://twitter.com/ryanflorence/status/1186515553285857280).\n\nI wanted to see if I could blur the lines a little bit.\n\n## Eleventy Templating\n\nEleventy allows you to specify the layout of each page. You can see in [Phil's Eleventyone project](https://github.com/philhawksworth/eleventyone) the wide variety of ways you are allowed to specify a layout, but the outcome is the same - the filesystem determines the route, and markdown content is piped through a specified layout. \n\nThe concept of a layout may feel a little ambiguous to you, as it did to me. [Eleventy Layouts](https://www.11ty.dev/docs/layouts/) are special templates that can be used to wrap other content. It basically spells out the exact html structure that you want to be output, given some data. Here is a [nunjucks](https://mozilla.github.io/nunjucks/) layout:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"/css/styles.css\">\n    <title>{{ title }}</title>\n  </head>\n  <body {% if bodyClass %}class=\"{{ bodyClass }}\"{% endif %}>\n\n    <div class=\"container\">\n      {% include \"header.njk\" %}\n      {{ content | safe }}\n      {% include \"footer.njk\" %}\n    </div>\n\n    {% set js %}\n      {% include \"js/core.js\" %}\n      {% include \"js/hello.js\" %}\n    {% endset %}\n    <script>{{ js | jsmin | safe }}</script>\n\n  </body>\n</html>\n```\n\nEleventy offers [no less than 11 templating languages](https://www.11ty.dev/docs/languages/) to write these layouts in. These, internally, are known as templating engines, and you can [set defaults for data, markdown, and html](https://www.11ty.dev/docs/config/#default-template-engine-for-global-data-files) so you don't need to explicitly specify every time.\n\n## Eleventy Template Engines\n\nHere is a minimal Eleventy Template Engine that doesn't really do much:\n\n```js\n// @11ty/src/Engines/MyTemplate.js\nconst TemplateEngine = require(\"./TemplateEngine\");\n\nclass MyTemplate extends TemplateEngine {\n  async compile(str, inputPath) {\n    console.log({\n      str, // the user's raw template\n      inputPath // where it is located\n    })\n    return function(data) {\n      // data being passed in to your template, do something with it\n      let newStr = str + data\n      return newStr\n    };\n  }\n}\n\nmodule.exports = MyTemplate;\n```\n\nTo add a template, you'd currently have to PR it into Eleventy, eg. [JSX](https://github.com/11ty/eleventy/issues/235) is a popular one. This process, as you might imagine, doesn't scale. The proposal for an official template customization API is currently [the top pinned issue](https://github.com/11ty/eleventy/issues/117) for the project.\n\n## Svelte Template Engine\n\nSo you could conceivably use Svelte's compile API to power a template engine, just like the others:\n\n```js\n// untested pseudocode!!!\nconst TemplateEngine = require(\"./TemplateEngine\");\nconst svelte = require('svelte')\n\nclass SvelteEngine extends TemplateEngine {\n  async compile(str, inputPath, svelteOptions) {\n    // first pass for html\n    const ssrApp = svelte.compile(str, \n      Object.assign({}, svelteOptions, {\n        generate: 'ssr' // output html, not js\n      }) \n    ) \n    // second pass for js\n    const clientApp = svelte.compile(str, \n      Object.assign({}, svelteOptions, {\n        hydrate: true // output hydrating js\n      }) \n    ) \n    fs.writeFileSync('somewhere', clientApp.js.code)\n\n    return function(data) {\n      // data being passed in to your template, do something with it\n      const { head, html, css } = ssrApp.render(data);\n      fs.writeFileSync('somewhere else', css)\n      return head + html\n    };\n  }\n}\n\nmodule.exports = SvelteEngine;\n```\n\nBut this isn't good enough, because the Svelte compiler only works on a single component level. Most likely, to build up pages, you will want to import multiple levels of components to build up to a page. \n\n## Svelte's Node Hook\n\nI actually went down a bundling rabbit hole (the next section) before finding this solution. [Svelte has a Node register hook](https://svelte.dev/docs#Server-side_component_API), similar to [babel/register](https://babeljs.io/docs/en/babel-register). Those who have never tried to hook stuff into Node will find this capability very surprising and slightly disturbing, as I did. It is [an extremely old deprecated API](https://nodejs.org/api/modules.html#modules_require_extensions) that [everybody uses](https://stackoverflow.com/questions/28884377/better-way-to-require-extensions-with-node-js) because Node has offered no real better solution. It simplifies our job a helluva lot:\n\n\n```js\n// untested pseudocode!!!\nconst TemplateEngine = require(\"./TemplateEngine\");\nconst svelte = require('svelte')\nrequire('svelte/register'); // https://svelte.dev/docs#Server-side_component_API\n\nclass SvelteEngine extends TemplateEngine {\n  async compile(str, inputPath, svelteOptions) {\n    // not sure how to involve svelteOptions in there\n    return function(data) {\n      // data being passed in to your template, do something with it\n      const App = require(inputPath).default; // directly require the svelte component, hope it imports\n      const { head, html, css } = App.render(\n        data // top level component's props\n      )\n      fs.writeFileSync('build/lastCss.css', css) // TODO: make sure this goes in the right place\n      return head + html // feeble concat of html\n    };\n  }\n}\n\nmodule.exports = SvelteEngine;\n```\n\nSo this is a nice way to use Svelte to write components, and output only HTML and CSS.\n\nBut if you want clientside interactivity... you will need a bundler to also output the JS.\n\n## Rollup Plugin Svelte\n\nI [wrote up](https://twitter.com/swyx/status/1223334283693084672?s=20) my exploration of [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) previously. So I won't cover that here and will just see if I can integrate it with my SvelteEngine.\n\nThe strategy I've settled on is to use [Svelte's native Node hook](https://svelte.dev/docs#svelte_register) to generate the html without bundling, and then to use rollup to generate the bundle for that path. Maybe this could be optimized since this would generate a lot of bundles. I'm not entirely sure that's avoidable.\n\n```js\n// untested pseudocode\nconst TemplateEngine = require(\"./TemplateEngine\");\nconst svelte = require('svelte')\nrequire('svelte/register'); // https://svelte.dev/docs#Server-side_component_API\nconst rollup = require(\"rollup\");\nconst sveltePlugin = require(\"rollup-plugin-svelte\");\n\nclass SvelteEngine extends TemplateEngine {\n  async compile(str, inputPath, svelteOptions) {\n    // https://github.com/sveltejs/sapper/blob/52f40f9e63dab19ad11f5073b2446b2632c85179/src/core/create_compilers/RollupCompiler.ts#L63\n\t\tconst start = Date.now();\n    let rollupResult;\n\t\ttry {\n\t\t\tconst bundle = await rollup.rollup({\n        input: inputPath, // path to the file that is being imported\n        plugins: [\n          sveltePlugin({\n            // preprocess // in future, allow typescript\n            // plugin copies all properties. docs on options from https://svelte.dev/docs#svelte_compile\n            generate: 'ssr',\n            hydratable: true\n          })\n        ]\n      });\n\t\t\tawait bundle.write({\n        dir: 'build/client.js',\n        entryFileNames: '[name].[hash].js',\n        chunkFileNames: '[name].[hash].js',\n        format: 'esm',\n        sourcemap: 'inline' // or false\n      });\n\t\t\trollupResult = new RollupResult(Date.now() - start, this);\n\t\t} catch (err) {\n\t\t\tif (err.filename) {\n\t\t\t\t// TODO this is a bit messy. Also, can\n\t\t\t\t// Rollup emit other kinds of error?\n\t\t\t\terr.message = [\n\t\t\t\t\t`Failed to build — error in ${err.filename}: ${err.message}`,\n\t\t\t\t\terr.frame\n\t\t\t\t].filter(Boolean).join('\\n');\n\t\t\t}\n      console.error(err)\n      rollupResult = err\n    }\n    console.log(rollupResult) // :shrug:\n\n    for (let warning of compiledJS.warnings) {\n      console.warn(warning)\n    }\n    console.log('writing js and css')\n    fs.writeFileSync('build/mainJS.js', compiledJS.js.code)\n    fs.writeFileSync('build/mainJS.js.map', compiledJS.js.map)\n    fs.writeFileSync('build/mainCSS.css', compiledJS.css.code)\n    fs.writeFileSync('build/mainCSS.css.map', compiledJS.css.map)\n\n    return function(data) {\n      // data being passed in to your template, do something with it\n      const App = require(inputPath).default; // directly require the svelte component, hope it imports\n      const { head, html, css } = App.render(\n        data // top level component's props\n      )\n      fs.writeFileSync('build/lastCss.css', css) // TODO: make sure this goes in the right place\n      return head + html // feeble concat of html\n    };\n  }\n}\n\nmodule.exports = SvelteEngine;\n```\n\nAs an aside - Rollup isn't compatible with non ESM modules. I've found myself dropping to the webpack loader more often than I want.\n"
    },
    {
      "slug": "svelte-metaphysics",
      "data": {
        "technical": true,
        "title": "Notes on 'Metaphysics and JavaScript'",
        "slug": "svelte-metaphysics",
        "categories": [
          "Tech",
          "Svelte",
          "React"
        ],
        "banner": "./assets/metaphysics1.jpg",
        "url": "https://docs.google.com/presentation/d/1_aeM_UkwS9qaSzHDz87zC9bmtvbuLbPof7RnN96SJKE/edit?usp=sharing",
        "date": "2019-08-28T00:00:00.000Z"
      },
      "content": "\n_[Slides here](https://docs.google.com/presentation/d/1_aeM_UkwS9qaSzHDz87zC9bmtvbuLbPof7RnN96SJKE/edit?usp=sharing)_\n\nRich Harris gave an excellent unrecorded talk tonight at [useReactNYC](http://usereact.nyc) on [Metaphysics and JavaScript](https://twitter.com/Rich_Harris/status/1166342346323238912). Much of it was above my paygrade, and I don't have access to his slides, but I love every opportunity to dissect Rich Harris insights so I figured I would jot down some notes from (my very holey) memory, in my words.\n\nBecause this talk had a lot of flair, and I am trying to learn how to package my talks better, I break it up into content vs style points, while acknowledging that it isn't Rich's intention to have these evaluated separately but its my blog so I call the shots.\n\n## Crux of the Argument\n\n- \"UI as a function of State\" is a [leaky abstraction](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/)\n  - Immediate mode rendering is nice for game development (he showed a beautiful 500 line 3d animated scene render example where this does work)\n  - BUT the DOM fundamentally is stateful (especially where it comes to transitions as time is seldom explicitly accounted for)\n  - React tries to provide an abstraction with a runtime patching DOM diffs. This is good. to a point.\n  - **Why not stop fighting the stateful DOM and embrace it with templates, reactivity, and a compiled approach?**\n    - leads to the objectively better things he's talked about in prior talks like speed, size, less code\n  - But this core argument is why Svelte is _subjectively_ better\n    - also it has scoped css, animations, 2 way binding, a11y linting built in.\n- Aside: React and functional programming/purity (cf. [wycats on sebmarkbage comment](https://mobile.twitter.com/wycats/status/1161464944648318977))\n  - \"People are horny for functions\". FP is too seductive.\n  - React used to have lifecycles in class components. Made it feel OO.\n  - React/Eucalyptus Avatar pulled off \"syntatical jiu-jitsu\" with Hooks, made everything a result of render, even side effects (c.f. [ryanflorence comment on synchronizing with state](https://mobile.twitter.com/ryanflorence/status/1125041041063665666))\n  - \"Functions all the way\" is very nice, but still has impedance mismatch (see above). Also stale closure problems.\n\nI think I noted down all the substantive points in the talk here. A few of us reported losing the thread of the argument particularly in the 180 reversal from admiring immediate mode for gamedev to arguing that DOM's should be retained mode, but this was clarified in post talk drinks.\n\n## Style Points\n\nThis talk was heavily wrapped up in a delightful package of metaphysical discussion, involving:\n\n- The [Ship of Theseus](https://en.wikipedia.org/wiki/Ship_of_Theseus) - I don't remember what the analogy was here\n- This Heraclitus quote, where I think the message was time matters, `UI = f(State)` is an illusion\n\n![heraclitus](/assets/heraclitus.jpg)\n\n- [Plato's Allegory of the Cave](https://en.wikipedia.org/wiki/Allegory_of_the_Cave) which I found the most apt, which was the attraction of developers around the idea of components, but looking at React and thinking that this is the ultimate expression of that ideal, when in reality the core idea can be done without looking through the blurry shadows of FP\n\n![platocave](/assets/platocave.jpg)\n\nI found this approach extremely fun for a meetup talk, especially as someone familiar with all the allegories, but for someone new to any of these it might be too much cognitive load to juggle both the meta and the message. Eh.\n\nThere were also a couple other stylistic notes I loved, specifically in the introduction.\n\nRich started by recapping his 3 prior talks at [JSConfEU](https://www.youtube.com/watch?v=qqt6YxAZoOc), [YGLF](https://www.youtube.com/watch?v=AdNJ3fydeao), and JSCamp Barcelona (not yet recorded, but meeting Jenn Creighton was the proximate cause of coming to speak at useReactNYC). I dont remember what exactly was said but **each talk was neatly wrapped up and contrasted against each other in one sentence each** and I thought that this was a very nice shorthand for longtime observers (\"Previously on...\") as well as homework for newcomers.\n\nFinally, one of his last contrast points, that \"Svelte is objectively better than React\" also served as the context setter for this talk, that \"Svelte is subjectively better than React\". A bit of a troll framing of course, but very effective in indicating that we're going to talk about the Why, not the What.\n"
    },
    {
      "slug": "svelte-static",
      "data": {
        "technical": true,
        "title": "Static Svelte: JavaScript Blogging with 93% less JavaScript",
        "subtitle": "Why Svelte is a Perfect Fit For Blogging",
        "slug": "svelte-static",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "date": "2019-09-13T00:00:00.000Z"
      },
      "content": "\nThis blog now uses [Svelte & Sapper](https://sapper.svelte.dev/) as a static site generator, where it [previously used React & Gatsby](https://5d7699e172ae430007210374--scout-videos-51664.netlify.com/writing/moving-to-novela). This is achieved through [Sapper's `sapper export` feature](https://sapper.svelte.dev/docs#sapper_export).\n\nThrough the magic of [Netlify's Immutable Deploys](https://www.netlify.com/blog/2018/10/05/netlify-and-the-functional-immutable-reactive-deploy/?utm_source=blog&utm_medium=swyxdotio&utm_campaign=devex), we can directly compare them on representative live URL's for a recent blogpost of mine:\n\n- [With React/Gatsby](https://5d7699e172ae430007210374--scout-videos-51664.netlify.com/writing/netlify-redirects-i18n): **138kb**\n- [With Svelte/Sapper](https://5d7c46e60da4524431f76aef--scout-videos-51664.netlify.com/writing/netlify-redirects-i18n/): **9kb**\n- For the curious, I also recently wrote about using [Next.js as a Static Site Generator](https://scotch.io/@sw-yx/using-nextjs-as-a-static-site-generator-for-netlify) as well, but don't expect much difference.\n\n> ⚠️To be very clear - this post is not even close to being an apples to apples benchmark, and I spend some effort below explaining why it isn't. If you aren't prepared to read this post with a critical mind and understanding that this is a random work in progress report, please stop here.\n\n## Screenshots\n\n### Gatsby version (138kb)\n\n![screenshot of Gatsby site with 138kb of JS](/assets/sveltegatsby.jpeg)\n\n### Sapper version (9kb)\n\n![screenshot of Sapper site with 9kb of JS](/assets/sveltesvelte.jpeg)\n\n## Differences and Similarities\n\n### Similarities\n\nFirst, the similarities must be noted, for any reasonable discussion to be had. For example, the _reductio ad finem_ conclusion of the premise of this post is to use any old static site generator like [Jekyll or Hugo](https://www.staticgen.com/) since it will result in _no_ JS payload.\n\n**Costs and Benefits of JS Blogging**\n\nHowever, both Gatsby and Sapper offer clientside rehydration, which makes the subsequent page navigation very fast. It is also easy to:\n\n- progressively add dynamic features without a major refactor\n- code in reusable components\n- and leverage the vast JS ecosystem to add functionality.\n\nYes, these are all available through other means. I'm aware.\n\nThis is by no means a free tradeoff: as [Addy Osmani recently noted](https://addyosmani.com/blog/rehydration/), an \"uncanny valley\" of rehydration exists, and [Alex Russell consistently warns](https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/) that better developer experience is not without its costs. [Nicole Sullivan recently noted](https://www.youtube.com/watch?v=dvtfNpt75aA&t=2s) we don't even have the language and terminology yet to intelligently discuss tradeoffs between first and subsequent loads. These matter in different contexts.\n\n**Syntax Highlighting**\n\nAs for Sapper JS size, I originally used [PrismJS](https://prismjs.com/), which adds ~19kb of JS, beacuse as a developer you can pry syntax highlighting from my cold dead hands. So it wouldn't be fair to compare a site without syntax highlighting to my old site with one.\n\nHowever, there are no-JS solutions for syntax highlighting, since I don't intend readers to edit the code in runtime. [Andrew Branch recently twote](https://mobile.twitter.com/atcb/status/1158480783666888704) about how to preprocess ALL your syntax-highlighting using some VSCode API's. I put this off as too complicated, but [Khrome](https://khrome.dev) tipped me off that the open source [shiki](https://github.com/octref/shiki) library from the Vue ecosystem does the same thing and so I managed to get that in.\n\n**High End Lighthouse Score**\n\nThe default, no throttling Lighthouse scores are totally fine. I'm not going to be read by the next billion users when I don't even have 200 subscribers on [my mailing list](https://tinyletter.com/swyx). These are all going to vary based on the specific implementation details of the site (in particular, how much time/effort I spend on it) so don't pay this _too_ much mind, but not that they're all... _alright_. Definitely not a failing grade:\n\n- [Gatsby version](https://5d7699e172ae430007210374--scout-videos-51664.netlify.com/writing/netlify-redirects-i18n):\n  - Performance: 100\n  - Accessibility: 96\n  - Best Practices: 93\n  - SEO: 89\n  - PWA: yes\n- [Sapper version](https://5d7c46e60da4524431f76aef--scout-videos-51664.netlify.com/writing/netlify-redirects-i18n/):\n  - Performance: 100\n  - Accessibility: 100\n  - Best Practices: 93\n  - SEO: 89\n  - PWA: some things missing (i didn't spend time on a manifest)\n\n## Differences\n\nThere are material differences in implementation that make the two sites not comparable.\n\n**Low End Lighthouse Score**\n\nThe (mobile, 4x applied throttling) Lighthouse scores tell a somewhat different story. This is the same as we had in the screenshots. So I won't repeat.\n\n**Developer Experience**\n\nTime spent getting things to work is an important cost to factor in. Sapper is by far less mature, and not designed to have an upfront content ingestion pipeline with pluggable lifecycles. I spent a significant amount of time coding up the markdown ingestion for my site, which in Gatsby is as trivial as adding a couple of source and transform plugins. It's another involved process to pipe this data in to templates, made harder by the fact that I had to make [my own site generator](https://npm.im/ssg) in the process, but Gatsby is also quite involved where one has to create the right templates and queries and `gatsby-node` files. Kind of a wash here until Gatsby Themes mature, and even then the lack of a standard format may hurt mass adoption or intra ecosystem compatibility (imagine 2-3 warring factions of Gatsby Themes! Good or bad? Unclear)\n\nThere are other missing pieces I have to code up myself as well, for example a PWA or [RSS feed plugin](https://twitter.com/Rich_Harris/status/1172869555611459584).\n\n**Image Optimization**\n\nAs [Una Kravets has noted](https://mobile.twitter.com/Una/status/687690138550288384), images are a critically important part of web performance. [Gatsby-Image](https://www.gatsbyjs.org/packages/gatsby-image/) not only preprocesses images to resize them down via standard techniques, but also helps you rapidly [load superfast images for a nice progressive upgrade effect](https://using-gatsby-image.gatsbyjs.org/). My colleague [Phil Hawksworth recently wrote on CSS Tricks about how to achieve your own lazy loading](https://css-tricks.com/tips-for-rolling-your-own-lazy-loading/) - so you definitely don't need Gatsby for this - but it is nice to have a blessed, maintained, tested, well documented, adaptable approach.\n\nThis Sapper site does not (yet!) do any of that. There are open source [Svelte Image](https://svelte-image.matyunya.now.sh/) components I have yet to investigate.\n\n**Styling**\n\nFinally, the Sapper site does not use CSS-in-JS. This is a very controversial topic with pros and cons so I put it last. In particular, if you have not spent time appreciating [some basic facts of CSS in JS from proponents](https://mxstbr.com/thoughts/css-in-js/), as well as [some nuances in implementation](https://github.com/styled-components/styled-components/issues/2377), then your debate will not be very well informed.\n\nThe old site has a [Dark Theme Toggle](https://github.com/sw-yx/gatsby-theme-dev-blog/blob/master/packages/gatsby-theme-dev-blog/src/components/Header/ThemeToggler.js). Also a responsive mobile navigation. This Sapper implementation does not.\n\nHowever, I expect [animations to be a lot easier with Svelte](https://svelte.dev/tutorial/animate) as it is a first class citizen. This frees me up to play a lot more with animations in future.\n"
    },
    {
      "slug": "svelte-why",
      "data": {
        "technical": true,
        "title": "Why I Enjoy Svelte",
        "slug": "svelte-why",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "description": "Reasons I enjoy Svelte, despite not using it for work.",
        "date": "2020-01-26T00:00:00.000Z"
      },
      "content": "\nAs someone who is primarily associated with React both at work and in my personal capacity, I get frequent questions on why I am messing around with Svelte so much. So I'm writing them down to organize my thoughts.\n\n## Table of Contents\n\nThere is absolutely some New Toy Syndrome going on. I don't deny that. It's fun to try new things. But what follows is what features I think really makes me smile when I play with Svelte in my free time.\n\n## Batteries Included\n\nOne of the first things that will probably hit you on first contact is that Svelte is very much on the Batteries Included side of frameworks, maybe more than Vue (which is a LOT more than React). (*i cant compare with other frameworks because I dont know them*)\n\nI have to agree with Rich that a proper frontend framework should come with a styling solution. One that lets you [Just Write CSS](https://svelte.dev/blog/the-zen-of-just-writing-css).\n\nBut Svelte keeps going. Transitions and Animations. State Management. Even the server-side rendering metaframework is first-party. Here is a list of first-party Svelte features and their third party React equivalents\n\n- **Static Scoped Styling** - `<style>` vs Linaria/Astroturf/Styled-Components + Babel Plugin\n- **Transitions**: `transition:fn` and `in:fn/out:fn` vs React Transition Group\n- **Animations**: `animate:fn` vs React Spring/Framer Motion\n- **Head management**: `<svelte:head>` vs react-helmet/react-async-helmet\n- **Class toggling**: `class:name` vs `classnames`\n- **State management**: Svelte Stores(?) vs Redux/Mobx\n- **A11y linting**: in the compiler vs `react-axe` and `eslint-plugin-jsx-a11y`\n- **SSR Metaframework**: Sapper vs Next.js\n- **Routing** is a notable omission from both. Default starter CLIs are also loosely managed by both.\n\nFor someone like me where decision fatigue and the paradox of choice is very real, it is very nice to have first party solutions for many of these things. Of course, it comes at a cost of maintainers that are spread very thin.\n\nTo be fair to React, here are things React has first party that Svelte doesn't:\n\n- DevTools: https://github.com/RedHatter/svelte-devtools\n- Portals: https://github.com/romkor/svelte-portal\n- Suspense: https://github.com/sveltejs/svelte/issues/3203\n- Lazy/Code Splitting: https://github.com/sveltejs/svelte/issues/742 \n- Mobile/Native: https://github.com/halfnelson/svelte-native\n- Streaming SSR: 🤷🏽‍♂️\n- Test Utilities: 🤷🏽‍♂️\n- I'm not sure about how events are normalized xbrowser but probably React does more\n\n## The Joy of Mutability\n\nSvelte is the `let` to React's `const`.\n\nHere is an idiomatic Svelte counter:\n\n```html\n<script>let i = 0</script>\n<button on:click={() => i += 1}>count {i}</button>\n```\n\nand an idiomatic React counter:\n\n```js\nconst [i, setI] = useState(0)\nreturn <button onClick={() => setI(i + 1)}>count {i}</button>\n```\n\nRich makes a big deal about the concision, and it is true that in refactorings I have noticed about 15-30% less application code. But that's neither here nor there if tradeoffs negate the benefits of saving keystrokes. (this is contested, of course)\n\nI think the bigger deal is **mental model**. [Direct Manipulation](https://en.wikipedia.org/wiki/Direct_manipulation_interface) is a core human-computer interface principle. It is just plain easier to directly mutate variables by setting them, instead of pulling setters from the runtime and scheduling an async update (the majority of React beginners don't even know this, and we have learned to just accept it). It's not just more concise, it's genuinely simpler and more familiar. [Rich has argued that mutability is the fundamental mode we naturally want to interact with the DOM too.](http://swyx.io/writing/svelte-metaphysics)\n\nSvelte, and Rich's programming style in general, is extremely mutable. Many people would recoil in horror at [the way Rich uses state in modules](https://github.com/sveltejs/sapper/blob/52f40f9e63dab19ad11f5073b2446b2632c85179/src/config/env.ts). Many variables are just held in scope and directly mutated with setters. *Are you supposed to hold singleton values in ES modules?* I think many people already do, but pretend they don't by sticking a bunch of functions between them and the cold hard truth.\n\nI get the value of [functional, immutable programming](https://www.netlify.com/blog/2018/10/05/netlify-and-the-functional-immutable-reactive-deploy/). However, [even React embraces local mutability](https://www.swyx.io/writing/rise-of-immer/). Svelte is obviously a little more aggressive about the mutability, but mutability is still scoped within component and store boundaries. [Rich even acknowledges](https://youtu.be/ogXETl_I0Dg) that React got one-way data flow right.\n\nBy the way, Svelte allows for immutability too. You can [toggle the compiler to immutable mode](https://svelte.dev/docs#svelte_options) at the component level, for performance needs. It just isn't required to function.\n\n## $ugar $yntax\n\n### Two Way Binding\n\nForms are hard in React, hence [Formik](https://github.com/jaredpalmer/formik). A typical React form would be something like:\n\n```js\nconst submitForm = () => {/* etc */}\nconst [name, setName] = useState('')\nconst handleChange = e => setName(e.target.value)\nconst handleSubmit = e => e.preventDefault() || submitForm(name)\n// not real code; needs labels and submit button too\nreturn <form onSubmit={handleSubmit}>\n<input type=\"text\" value={name} onChange={handleChange} />\n</form>\n```\n\nWhereas Svelte offers two-way binding and handy helpers:\n\n```html\n<script>\n  let value = \"\"\n  const submitForm = () => {/* etc */}\n</script>\n<!-- not real code; needs labels and submit button too -->\n<form onSubmit|preventDefault={submitForm}>\n  <input type=\"text\" bind:value >\n</form>\n```\n\nI used to think two-way binding was bad. One can argue it makes code a bit less auditable. But now I think it optimises for what developers need to write the most. React forces you to write change handlers, which you often don't need. Data validation and transformation best belongs in submit handlers and pure functions in render.\n\nReact of course famously prides itself on having a small API surface area. This has at once made 3rd party library compatibility and API preservation easier, but has also shifted a lot of learning and boilerplate burden to app authors. This isn't a criticism, it is a conscious tradeoff - for example, this enabled the React community to explore design patterns like HoCs and Render Props with zero change to the library.\n\n### Stores\n\nI have [written about my love for Svelte Stores](https://www.swyx.io/writing/svelte-auth). The fact that with the `$` syntax, we can read from stores (and, for that matter, any Observable) is great, but we can also set them by assignment! 🤯 And the beauty of it is that it automates teardown of subscriptions:\n\nThe no-sugar way to read from Svelte store:\n\n```html\n<script>\nimport { onDestroy } from 'svelte'\nimport { store } from './store.js'\nlet localVar\nlet unsub = store.subscribe(v => {\n  localVar = v\n})\nonDestroy(unsub)\nconst handler = () => store.set(localVar + 1)\n</script>\n<button on:click={handler}>{localVar}</button>\n```\n\nWith the sugar syntax:\n\n```html\n<script>\nimport { store } from './store.js'\nconst handler = () => $store += 1\n// unsubscribe on unmount is also done for you\n</script>\n<button on:click={handler}>{$store}</button>\n```\n\n[Yehuda Katz recently said](https://twitter.com/samselikoff/status/1194622768274460672) that the value of React Hooks is in the self contained teardown mechanism. This lets Hooks be nicely bounded abstractions. I would apply this analogy to all frameworks too. After all, the biggest code saving of using a framework over vanilla JS is in not having to write teardown code for every element!\n\nSvelte is full of stuff like this. Have I told you about [promise unrolling??](https://twitter.com/swyx/status/1220052804485746690) Memoization? Try `$: a = b + c;` vs useMemo/useCallback!\n\nYes, that is a lot of syntax to hold in your head. That's why it is important to have...\n\n## Good Docs\n\nSvelte sets an extraordinarily high bar for an unfunded side project of a tiny group of people:\n\n- [API docs](https://svelte.dev/docs)\n- [Tutorial](https://svelte.dev/tutorial)\n- [Gist-linked REPLs](https://svelte.dev/repl)\n- [Examples](https://svelte.dev/examples) - check out [this Chatbot example in 107 lines of code!!](https://svelte.dev/tutorial/update)\n\nYou can probably count on two hands the number of JS OSS projects with this standard of docs, and most of those have some people working fulltime on it.\n\nRecently, I was able to find `actions` would help solve my usecase [without even knowing they existed!](https://twitter.com/swyx/status/1220905001926696962)\n\n## Simple Internals\n\nI actually think this is a SUPER underrated aspect of Svelte. I can [pull up the source code](https://github.com/sveltejs/svelte/tree/master/src), read it, follow it, and understand it. Wow! You can't say that for other frameworks, which, admittedly, have extremely different goals.\n\nHowever the simple internals and simple contracts let me be EXTREMELY confident in knowing when to eject or handwrite the code myself. Stores and Animations are explicitly designed this way, where the first party stuff is merely included for convenience but the expectation is that you WILL write your own if needed.\n\n[On a recent podcast](https://www.swyx.io/speaking/sedaily-nocode) Jeff Meyerson remarked something like \"if React went in a different direction you could fork the code and maintain it\". That's not true. [I've tried contributing](https://www.swyx.io/speaking/contributing-to-react), and it is very hard to keep React's codebase in my head. \n\nBut, very conceivably, **I could fork and maintain Svelte myself**.\n\n## No Baggage\n\nReact is a very highly charged topic for many people, because of its impact. Svelte has much smaller impact, and results in lighter JS bundles in many (not all) cases, so it's nicer to play around with and not get yelled at simply for using and talking about it.\n\n## Because I Can\n\nI do have the privilege that I am secure in my React knowledge, so I don't have to prove myself to feed myself. I do have free time because I don't have dependents. So being able to do this is absolutely a privilege, about on par with using free time to play Fortnite or follow sports.\n\nHowever I've also been challenged, at React meetups, on why I spend time on non React things. I strongly object to this view. I would assert that a React developer who only knows React will not understand React as well as someone who has come from, or knows well, other frameworks.\n\n## Svelte is Fun, But\n\nPeople always want to put other people in boxes. I think I might be viewed as pivoting away from React towards Svelte. I'm not. \n\nI think Svelte has serious challenges to growth, not least of which the [nonstandard language](https://gist.github.com/Rich-Harris/0f910048478c2a6505d1c32185b61934) it really is, but also the governance model of loose volunteers. At some point (I'm not qualified to know when), there should be regular, even full-time maintenance with more well defined roles and responsiveness expectations. \n\nSvelte has had no problem attracting early adopters, but as it looks toward early and late majority, what got it here won't get them there. It will have to scale people more than code.\n\nCommunity will be a major lever in this. [I'm involved](https://github.com/sveltejs/community) in this, again mainly because I hope to have fun and learn, but I'm far from sure I can do a good job of it. I have more existential needs I'm not taking care of.\n\nReact has plenty going for it, and is [good enough](https://twitter.com/swyx/status/1221125270989692928) for a vast majority of people. Network effect alone may be insurmountable. They also have [top notch release quality](https://reactjs.org/blog/2019/10/22/react-release-channels.html) and are working on awesome things no other framework is working on. If I were to start a new work app today, I'd still use React. I also think a compiler layer can be built for React to copy over some ideas from Svelte.\n\nFor now, my approach is \"**Svelte for sites, React for apps**\"."
    },
    {
      "slug": "svelte-zen-garden",
      "data": {
        "technical": true,
        "title": "Svelte Zen Garden",
        "subtitle": "with Monaco Editor and Netlify Dev",
        "slug": "svelte-zen-garden",
        "categories": [
          "Tech",
          "Svelte"
        ],
        "description": "reigniting the Zen Garden era with modern technology",
        "date": "2020-01-24T00:00:00.000Z"
      },
      "content": "\nThe [CSS Zen Garden](http://www.csszengarden.com/) era was hugely inspirational to many. I figured I could try making my own with modern technologies.\n\n## Demo Up Front\n\n- Try Live Demo at: https://svelte-zengarden.netlify.com/\n- View Source at: https://github.com/sw-yx/svelte-zen-garden\n\nYou can edit your CSS and it updates live.\n\n![sveltezen](https://user-images.githubusercontent.com/6764957/73112468-73845100-3edc-11ea-978a-74bb9537833a.gif)\n\nyou can also paste in a link to github gist in the editor. if the github gist has a file called `zengarden.css` it will pull that css and apply it. Once you're happy with what you have, you can send it as a url by appending a `path` search param, e.g.\n\n- https://svelte-zengarden.netlify.com/?path=https://gist.github.com/sw-yx/0e1d14276ef9d2608453fed3c7dfa4ec\n- https://svelte-zengarden.netlify.com/?path=https://gist.github.com/sw-yx/67a8c6f39aae5e206b43eb662edb75b9\n\n## Table of Contents\n\n## Design Goals\n\nThe original project was served on a PHP server, and people who wanted to take part had to host it themselves or PR into the project.\n\n-  I wanted to update it to [JAMstack](https://jamstack.org/?utm_source=zengarden-swyx&utm_medium=swyx&utm_campaign=devex) \n- I wanted to use [GitHub Gists](http://gist.github.com/) which are a wonderfully low friction way of sharing code\n- I also wanted to be able to edit live with modern editor experience (where, for example, i can save to localStorage or expand gist URLs) instead of living in browser devtools. Basically I want Monaco.\n\n## Svelte CSS in JS\n\nTo dynamically render the CSS, i'd have to come up with a strategy to \"CSS in JS\" in Svelte. At first I tried using [the svelte:head tag](https://svelte.dev/docs#svelte_head):\n\n```html\n<script>\n  let myCSS = 'body { color: red }'\n</script>\n<svelte:head>\n\t<style>\n    {myCSS}\n\t</style>\n</svelte:head>\n```\n\nBut Svelte doesn't work like that - all css is statically compiled, and changing `myCSS` doesn't update the head component.\n\nSo what I ended up with was something like this:\n\n\n```html\n<script>\n  import { onMount, onDestroy } from 'svelte'\n  import { userCSS } from './store'\n  onMount(renderCSS)\n  onDestroy(() => {\n    var ss = document.getElementById(\"unique-stylesheet-id\")\n    ss.innerHTML = '' // not actually sure if i need this\n  })\n  let _userCSS // $ store syntax buggy\n  userCSS.subscribe(v => {\n    _userCSS = v\n  })\n  function renderCSS() {\n    var ss = document.getElementById(\"unique-stylesheet-id\");\n    if (!ss) return // not rendered yet\n    ss.innerHTML = _userCSS\n  }\n  $: {\n    console.log({ _userCSS })\n    renderCSS()\n  }\n</script>\n<svelte:head>\n  <style id=\"unique-stylesheet-id\"> </style>\n</svelte:head>\n```\n\nThis means that whatever CSS string I put in `userCSS`, will be applied to my Zen Garden HTML. Great! Now the hard part.\n\n## Monaco Editor\n\n[Monaco](https://microsoft.github.io/monaco-editor/) is what VScode, and CodeSandBox, use for code editing. It's obviously one of the best code editors in the world. It's always been on my want-to-try-list and this is the perfect proejct. \n\nIn my eyes, the docs for Monaco aren't very friendly. It took me a bit of digging around to find anything and it doesnt work with rollup and when I initially tried to set it up with webpack, the web workers would fail randomly. They seem stable now but it seems a way heavier build than optimal. \n\nStill, it works! 🎉 So here is my \"baby's first Monaco Editor\" tutorial.\n\n### Webpack Setup and rendering the Editor\n\nThere is a Parcel setup for Monaco too, but I only tried Webpack with ESM.\n\nResources:\n\n- https://github.com/microsoft/monaco-editor-samples/tree/master/browser-esm-webpack\n- https://github.com/microsoft/monaco-editor-samples/tree/master/browser-esm-webpack-small\n- https://github.com/microsoft/monaco-editor/blob/master/docs/integrate-esm.md\n\nI went with option 1 in the Readme, configuring `webpack.config.js` as instructed.\n\nThe basic Svelte integration with Monaco looks something like this (improvements welcome!)\n\n```html\n<script>\n  import { onMount, onDestroy } from 'svelte'\n  import * as monaco from 'monaco-editor';\n  let editor\n  onMount(mountEditor)\n  function mountEditor() {\n      editor = monaco.editor.create(document.getElementById('monaco-container'), {\n        value: [\n          'function x() {',\n          '\\tconsole.log(\"Hello world!\");',\n          '}'\n        ].join('\\n'),\n        language: 'css',\n      });\n  }\n  onDestroy(() => {\n    if (editor) {\n      editor.dispose();\n      const model = editor.getModel();\n      if (model) model.dispose();\n    }\n  })\n</script>\n\n<style>\n  #monaco-container {\n    height: 40vh;\n    width: 40vw;\n    min-width: 600px;\n    position: fixed;\n    z-index: 999;\n    bottom: 0;\n    left: 0;\n  }\n</style>\n<div id=\"monaco-container\"></div>\n```\n\n### Monaco-Svelte Data Flow\n\nWe need to tell Monaco to update Svelte, and more trickily, tell Svelte to update Monaco. \n\n```html\n<script>\n  import { onMount, onDestroy } from 'svelte'\n  import { userCSS } from './store'\n  import * as monaco from 'monaco-editor';\n  import { pannable } from './pannable.js';\n  let editor, modelChangeSub\n  let x = 0\n  let y = 0\n  onMount(mountEditor)\n  function mountEditor() {\n    setTimeout(() => {\n      editor = monaco.editor.create(document.getElementById('monaco-container'), {\n        // redacted\n      });\n      modelChangeSub = editor.getModel().onDidChangeContent(v => {\n        userCSS.set(editor.getModel().getValue()) // if Monaco is updated, update Svelte store\n      })\n    }, 200)\n  }\n  userCSS.subscribe(v => {\n    if (!editor || !editor.getModel()) return\n    const curVal = editor.getModel().getValue()\n    if (curVal !== v) {\n      editor.setValue(v) // if svelte store is updated, update Monaco accordingly\n    }\n  })\n  onDestroy(() => {\n    if (editor) {\n      editor.dispose();\n      const model = editor.getModel();\n      if (model) model.dispose();\n    }\n    if (modelChangeSub) modelChangeSub.dispose() // clean up subscription\n  })\n</script>\n<!-- etc -->\n```\n\n### Draggable Editor using a Svelte Action\n\nThis was so easy to implement thanks to [Svelte's great docs on actions!](https://svelte.dev/examples#actions)\n\nActions are like hooks that can help abstract logic, like dispatching [DOM CustomEvents](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) so you can basically invent your own special events as a user of the action. I copied `pannable.js` completely and implemented it to get a draggable editor:\n\n```html\n<script>\n  // etc\n  import { pannable } from './pannable.js';\n  let x = 0\n  let y = 0\n  function handlePanMove(event) {\n    x = x + event.detail.dx\n    y = y + event.detail.dy\n  }\n</script>\n<div use:pannable\n  on:panmove={handlePanMove}\n  style=\"transform:\n  translate({x}px,{y}px)\"\n  id=\"monaco-container\"\n>\n</div>\n```\n\nAnd there you have a draggable element!!! amazing!!!\n\n### On/Off Toggle\n\nI also added a toggle, becaue I don't want the editor on screen at all times.\n\n```html\n<script>\n  // etc\n  let showEditor = true\n  function toggleEditor() {\n    showEditor = !showEditor\n    if (showEditor) mountEditor()\n  }\n</script>\n<style>\n  #editorWithButton {\n    height: 40vh;\n    width: 40vw;\n    min-width: 600px;\n    position: fixed;\n    z-index: 999;\n    bottom: 0;\n    left: 0;\n  }\n  #monaco-container {\n    height: 100%;\n    width: 100%;\n  }\n  #handButton {\n    position: fixed;\n    width: 60px;\n    height: 60px;\n    z-index: 9999;\n    top: -30px;\n    right: -30px;\n    background-color: #0C9;\n    border-radius: 50px;\n    text-align: center;\n    box-shadow: 2px 2px 3px #999;\n    font-size: 3rem;\n  }\n</style>\n<div use:pannable\n  on:panmove={handlePanMove}\n  style=\"transform:\n  translate({x}px,{y}px)\"\n  id=\"editorWithButton\"\n>\n  <button id=\"handButton\" on:click={toggleEditor}>✍️</button>\n  {#if showEditor}\n  <div id=\"monaco-container\"></div>\n  {/if}\n</div>\n```\n\n## Gist API and Netlify Functions\n\nThe backend section of this is in the store. I've written about [my love for Svelte Stores](https://www.swyx.io/writing/svelte-auth) before. \n\nFrankly I'm not super proud of the code I wrote here but basically I wrote a writable store that persists to localStorage. You can also intercept value updates but be careful not to make an infinite loop:\n\n\n```js\n// store.js\nimport { writable } from 'svelte/store';\n\nlet _userCSS = localStorage.getItem('userCSS');\n_userCSS = _userCSS ? JSON.parse(_userCSS) : defaultUserCSS();\nexport const userCSS = writable(_userCSS);\n\n// special hacks to respond\nuserCSS.subscribe((value) => {\n  // secret hack - to restore default css - type 'default'\n  if (value === 'default') userCSS.set(defaultUserCSS());\n  if (value) localStorage.setItem('userCSS', JSON.stringify(value));\n});\n\n// defaultUserCSS is a getter function that gets a css string\n```\n\nSo far so good. The more interesting feature I want is to be able to paste in a path to a gist, and have it resolve to CSS.\n\nThe code below works in the browser console, but if you try to do this from the clientside, you get CORS errors:\n\n\n```js\nfetch('https://api.github.com/gists/0e1d14276ef9d2608453fed3c7dfa4ec')\n// CORS Error\n  .then(results => {\n    return results.json();\n  })\n  .then(data => {\n    console.log(data.files);\n  });\n```\n\nFortunately I already have advice on [Solving CORS once and for all](https://www.swyx.io/writing/netlify-dev-cors/)!\n\n### Getting around CORS with Netlify Functions\n\nThe rough idea is that you never get CORS if you ping an api on your own domain, and once you're in Node, you're free to ping any other API domain. So you should set up a little proxy serverless function to do this.\n\nThis is the same tech underlying the fun little http://is-this.netlify.com/ utility I wrote for Netlifiers :)\n\n```js\nconst fetch = require('node-fetch');\nexports.handler = async function(event, context) {\n  let path = event.queryStringParameters.path || null;\n  const segments = path.split('/');\n  // loosely rewrite the gist URL to the API form\n  // this means people who self host their own css can do so if they respond with the right structure\n  if (segments[2] === 'gist.github.com') {\n    path = `https://api.github.com/gists/${segments[4]}`;\n  }\n  try {\n    const server = await fetch(path).then(async (res) => {\n      const data = await res.json();\n      return data;\n    });\n    return {\n      statusCode: 200,\n      body: JSON.stringify(server)\n    };\n  } catch (err) {\n    console.log(err); // output to netlify function log\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ msg: err.message }) // Could be a custom message\n    };\n  }\n};\n```\n\nHowever, this Netlify Function would only work once you deploy to Netlify.\n\nYou can use [Netlify Dev](https://github.com/netlify/cli/blob/master/docs/netlify-dev.md) to run local emulation of Netlify to develop locally:\n\n```toml\n# netlify .toml\n[build]\n  functions=\"functions\"\n  command=\"yarn build\"\n\n[dev]\n  command = \"yarn start\" # Command to start your dev server\n  targetPort=8080     # svelte webpack template's port\n  publish = \"public\"\n```\n\nAgain, you can see all this in action here https://github.com/sw-yx/svelte-zen-garden.\n\n\n## Future?\n\nWe could add a \"save to Gist\" feature.\n\nWe could add ability to pull image, font, and other assets from Gist.\n\nWe could add some sort of leaderboard or dynamic link list of other people who have submitted their zen gardens\n\n[If you want to work on this lmk!](https://twitter.com/swyx)"
    },
    {
      "slug": "types-already",
      "data": {
        "technical": true,
        "title": "You Already Use Types",
        "slug": "types-already",
        "categories": [
          "Tech"
        ],
        "date": "2019-08-29T00:00:00.000Z",
        "canonical": "https://www.freecodecamp.org/news/you-already-use-types/",
        "decription": "Even if you are a skeptic about type systems, you probably already use one in your code. However, because you refuse to use a formal type system, you are missing out on better tooling that takes advantage of the type work you do anyway, and that the open source community can do for you."
      },
      "content": "\n_[Published on Freecodecamp](https://www.freecodecamp.org/news/you-already-use-types/)_\n\nThis post is for skeptics and newcomers to type systems, and aims to articulate rather than hard sell.\n\n1. First we'll look at how static type conventions appear in your dynamically typed coding.\n2. Then we'll step back and try to think about what this phenomenon tells us about how we want to code.\n3. Lastly, we'll ask some (leading!) questions that should arise from these insights.\n\n## Table of Contents\n\n## 1A: Types in Names\n\nRegardless of language, your journey with types starts almost as soon as you learn to code. The basic list data structure invites a corresponding plural:\n\n```js\nvar dog = 'Fido'\nvar dogs = ['Fido', 'Sudo', 'Woof']\n```\n\nAs you work with more and more and more code, you start to form opinions that you may mandate to your team or style guide:\n\n- always use specific names like `dogID` vs `dogName` vs `dogBreed` or a namespace/class/object like `dog.name` or `dog.id` or `dog.breed`\n- singles should not be substrings of plurals, e.g. BAD: `blog` and `blogs`, GOOD: `blogPost` vs `blogList`\n- booleans [should have a boolean-ish prefix](https://github.com/typescript-eslint/typescript-eslint/issues/515), like `isLoading`, `hasProperty`, `didChange`\n- functions with side effects should have verbs\n- internal variables should have a `_prefix`\n\nThis may seem trivial since we're talking about variable names, but this vein runs _extremely_ deep. Names in our coding reflect the concepts and constraints we place on our code to make it more maintainable at scale:\n\n- [Presentational Components vs Stateful/Connected Containers](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0)\n- [Atoms, Molecules, Organisms, Templates, Pages](http://bradfrost.com/blog/post/atomic-web-design/)\n- [Concepts, Actions, Operands](https://reactjs.org/blog/2016/09/28/our-first-50000-stars.html#api-churn) (one of the most successful name grammars ever)\n- [Block\\_\\_Element--Modifier](http://getbem.com/naming/)\n- [Higher Order Components](https://reactjs.org/docs/higher-order-components.html)\n\nThese all seep into your code accordingly: `*Container`, `*Component`, `*Reducer`, `*Template`, `*Page`, `with*`.\n\nOnce you start crossing execution paradigms, you start feeling your way into monadic type hints.\n\nNode.js felt this early on:\n\n```js\nfs.readFile(myfile, callback)\nfs.readFileSync(myfile) // introduced when people realized callback hell might not be worth non-blocking\n```\n\nReact introduced the `use` prefix to indicate hooking into the runtime that must respect [certain rules](https://reactjs.org/docs/hooks-rules.html):\n\n```js\nfunction Component() {\n  const [bool, setBool] = React.useState(true)\n  React.useEffect(callback)\n  const foo = useCustomHook()\n  // ...\n}\n```\n\nI am personally fond of reminders of nullability:\n\n```js\nconst maybeResult = await fetchAPI()\nif (maybeResult) {\n  const result = maybeResult\n  // do things with result\n} else {\n  // maybeResult is falsy, dont assume it is there\n}\n```\n\n**In almost everything you name, you're already using types.**\n\nSo what, you ask?\n\nKeep reading, I'm building up to it.\n\n## 1B: Types in Data Structures\n\nThe problem with encoding types in names is that the language probably doesn't care about your meticulously named variables (indeed, in JavaScript, it probably gets mercilessly minified beyond recognition). It will happily run your code and throw a runtime error if you forget to respect your own nametypehints. What if we made types formally checkable through data structures?\n\nThe most basic are constants. In Redux, it is [common to explicitly (and redundantly) set SCREAMING_CASE_CONSTANTS](https://decembersoft.com/posts/a-simple-naming-convention-for-action-creators-in-redux-js/):\n\n```js\nconst ADD_TODO = 'slice/ADD_TODO'\n\n// later in redux code:\nimport { ADD_TODO } from './redux/types'\nswitch (action.type) {\n  case ADD_TODO:\n  // do stuff based on the action\n  // ...\n}\n```\n\nThis is mostly done because you can't trust your fellow developer not to typo their strings.\n\nHowever even these strings offer too much trust, and we found it important enough to add a new language feature to guarantee uniqueness:\n\n```js\nconst ADD_TODO = Symbol('slice/ADD_TODO')\n```\n\nWe also fake our way toward enums this way:\n\n```js\nconst colors = {\n  BLUE: Symbol(1),\n  GREEN: Symbol(2),\n  RED: Symbol(3)\n}\n```\n\nBut simple values (strings, numbers, booleans) are actually easy to compare and treat accordingly.\n\nMore pressing is encoding types in complex values.\n\nThis usually happens when you have arrays of objects and the objects are different in some ways and similar in others:\n\n```js\nconst animals = [\n  { name: 'Fido', legs: 4, says: 'woof' },\n  { name: 'Kermit', legs: 2, marriedTo: 'Piggy' }\n]\n// will have bugs if an animal with both `says` and `marriedTo` exists\nanimals.forEach(animal => {\n  if (animal.says) {\n    // i guess it's a dog?\n  }\n  if (animal.marriedTo) {\n    // i guess it's a frog?\n  }\n})\n```\n\nBuggy checking and implicitly assumed types is often a cause for much pain. Better to type explicitly:\n\n```js\nconst animals = [\n  {\n    type: 'dog', // new!\n    name: 'Fido',\n    legs: 4,\n    says: 'woof'\n  },\n  {\n    type: 'frog', // new!\n    name: 'Kermit',\n    legs: 2,\n    marriedTo: 'Piggy'\n  }\n]\nanimals.forEach(animal => {\n  if (animal.type === 'dog') {\n    // must be a dog!\n  }\n  if (animal.type === 'frog') {\n    // must be a frog!\n  }\n})\n```\n\nThis is in fact what happens for Redux (and, interestingly enough, handy for other things like [Discriminated Unions](https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html)), but you will see this **everywhere** in [Gatsby](https://github.com/sw-yx/overreacted.io/blob/master/gatsby-config.js#L25-L50) and [Babel](https://babeljs.io/docs/en/plugins/#plugin-options) and [React](https://reactjs.org/docs/react-without-jsx.html) and I'm sure you know of cases I don't.\n\nTypes even exist in HTML: `<input type=\"file\">` and `<input type=\"checkbox\">` behave so differently! (and I already mentioned Types in CSS with [Block\\_\\_Element--Modifier](http://getbem.com/naming/))\n\n**Even in HTML/CSS, you're already using types.**\n\n## 1C: Types in APIs\n\nI'm almost done. Even outside your programming language, the interfaces between machines involve types.\n\nREST's big innovation was basically a primitive form of typing client-server requests: `GET`, `PUT`, `POST`, `DELETE`. Web conventions have introduced other type fields in requests, like the `accept-encoding` header, that you must adhere to to get what you want. However, RESTfulness is basically not enforced, and because it doesn't offer guarantees, downstream tooling cannot assume properly behaved endpoints.\n\nGraphQL takes that idea and dials it up to 11: Types are key to queries and mutations and fragments, but also on every field and every input variable, validated on both clientside and serverside by spec. With much stronger guarantees, it is able to ship [much better tooling](https://github.com/graphql/graphiql) as a community norm.\n\nI don't know the history of SOAP and XML and gRPC and other machine-machine communication protocols but I'm willing to bet there are strong parallels.\n\n## Part 2: What Does This Tell Us?\n\nThis was a very long, and yet inexhaustive examination of types permeating everything you do. Now that you've seen these patterns, you can probably think of more examples I'm forgetting right now. But at every turn, it seems the way toward more maintainable code, and better tooling is to add types in some way.\n\nI mentioned parts of this thesis in [How To Name Things](https://www.swyx.io/writing/how-to-name-things), but basically all of the naming schemas fall under an enlightened form of Hungarian notation, as described in Joel Spolsky's [Making Wrong Code Look Wrong](https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/).\n\nIf none of what I have described resonates with you, and isn't something you've already been doing, then types may not be for you.\n\nBut if it does, and you've been doing this in slipshod fashion, you may be interested in more structure around how you use types in your code, and in using better tooling that takes advantage of all the hard work you already put into types.\n\nYou may be working your way toward a type system, without even knowing it.\n\n## Part 3: Leading Questions\n\nSo knowing what we know now about using types in our code without a type system. I'll ask some hard questions.\n\n**Question 1: What do you currently do to enforce types without a type system?**\n\nAt an individual level, you engage in defensive coding and manual verification. Basically manually eyeballing your own code and reflexively adding checks and guards without knowing if they're really needed (or, worse, NOT doing it and figuring out after seeing run time exceptions).\n\nAt a team level, you spend multiples of developer-hours in code review, inviting bike shedding over names, which we all know is great fun.\n\nThese two processes are manual methods, and a very poor use of developer time. [Don't be the bad cop](https://hackernoon.com/dont-be-the-bad-cop-in-pull-request-reviews-let-software-do-that-job-1eb9e574c2d1) - this wrecks team dynamics. At scale, you are mathematically guaranteed to have lapses in code quality (therefore causing production bugs), either because everyone missed something, or there just wasn't enough time and you just had to ship something, or there wasn't a good enough policy in place yet.\n\nThe solution, of course, is to automate it. As Nick Schrock says, [Delegate to Tooling Whenever Possible](https://medium.com/@schrockn/on-code-reviews-b1c7c94d868c). Prettier and ESLint help to hold up your code quality - only to the extent to which the program can understand you based on an AST. It does not offer any help crossing function and file boundaries - if function `Foo` expects 4 arguments and you only pass it 3, no linter will yell at you and you'll have to defensively code inside `Foo`.\n\nSo there's only so much you can automate with a linter. What about the rest you can't automate?\n\nTherein lies the last option: Do Nothing.\n\nMost people do nothing to enforce their informally designed type systems.\n\n**Question 2: How much of these types are you writing yourself?**\n\nIt goes without saying that if all your type policies are created by you, then they must be written by you and enforced by you.\n\nThat's totally different from how we write code today. We lean heavily on open source - [97% of modern web app code is from npm](https://mobile.twitter.com/housecor/status/1078634947831914496). We import shared code, and then write the last mile parts that make our app special (aka business logic).\n\nIs there a way to share types?\n\n([yes](https://github.com/DefinitelyTyped/DefinitelyTyped/))\n\n**Question 3: What if your types were standardized?**\n\nResearch has shown that the #1 reason programmers adopt a language is the existing capabilities and functionality available for them to use. I will learn Python to use TensorFlow. I will learn Objective C to create native iOS experiences. Correspondingly, JS has been so successful because it runs everywhere, compounded by the wide availability of free open source software written _by other people_. With some standardized type system, we can [import types just as easily as we import open source software](https://github.com/DefinitelyTyped/DefinitelyTyped/) written by other people.\n\nJust like GraphQL vs REST, Standardized types in a language unlock much better tooling. I will offer 4 examples:\n\n**Example 1: Faster Feedback**\n\nWe might take months and days to learn from **runtime errors**, and these are exposed to users, so they are the worst possible outcome.\n\nWe write tests and apply lint rules and other checks to move these errors to **build time errors**, which shortens feedback cycles to minutes and hours. (As I wrote recently: [Types don't replace Tests!](https://css-tricks.com/types-or-tests-why-not-both/))\n\nType Systems can shorten this feedback by yet another order of magnitude, to seconds, checking during **write time**. (Linters can also do this. Both are conditional on a supportive IDE like VS Code) As side effect, you get autocomplete for free, because autocomplete and write time validation are two sides of the same coin.\n\n**Example 2: Better Error Messages**\n\n```js\nconst Foo = {\n  getData() {\n    return 'data'\n  }\n}\nFoo['getdata']() // Error: undefined is not a function\n```\n\nJavaScript is intentionally lazy evaluation by design. Instead of the dreaded and nondescript `undefined is not a function` during runtime, we can move this to write time. Here's the write time error message for the exact same code:\n\n```ts\nconst Foo = {\n  getData() {\n    return 'data'\n  }\n}\nFoo['getdata']() // Property 'getdata' does not exist on type '{ getData(): string; }'. Did you mean 'getData'?\n```\n\nWhy yes, TypeScript, I did.\n\n**Example 3: Edge Case Exhaustion**\n\n```ts\nlet fruit: string | undefined\nfruit.toLowerCase() // Error: Object is possibly 'undefined'.\n```\n\nOver and above the built in nullable checking (which takes care of issues like passing in 3 arguments when a function expects 4), a type system can make the most of your enums (aka union types). I struggled coming up with a good example but here is one:\n\n```ts\ntype Fruit = 'banana' | 'orange' | 'apple'\nfunction makeDessert(fruit: Fruit) {\n  // Error: Not all code paths return a value.\n  switch (fruit) {\n    case 'banana':\n      return 'Banana Shake'\n    case 'orange':\n      return 'Orange Juice'\n  }\n}\n```\n\n**Example 4: Fearless Refactoring**\n\nMany people mentioned this and I'll be honest that it took me a long while to come around to this. The thinking is: \"so what? I don't refactor that much. so that means TypeScript's benefit is smaller to me than to you because I'm better than you.\"\n\nThis is the wrong take.\n\nWhen we start off exploring a problem, we start off with a vague idea of the solution. As we progress, we learn more about the problem, or priorities change, and unless we've done it a million times we probably picked something wrong along the way, whether it be function API, data structure, or something larger scale.\n\n![chart](https://www.methodsandtools.com/archive/refact8.png)\n\nThe question is then to either stick with it until it breaks or to refactor the moment you can sense that you're going to outgrow whatever you used to have. I'll assume you accept that there are often benefits to refactoring. So why do we avoid refactoring?\n\n**The reason you put off that refactor is that it is costly, not because it isn't beneficial to you. Yet putting it off only increases future cost.**\n\nType System tooling helps to dramatically lower the cost of that refactor, so you can experience the benefits earlier. It lowers that cost via faster feedback, exhaustiveness checking, and better error messages.\n\n## Truth in Advertising\n\nThere is a cost to learning Type Systems you didn't write. This cost may offset any imagined benefit to automated type checking. This is why I put a great deal of effort into helping to lower that learning curve. However, be aware that it is a new language and will involve unfamiliar concepts, and also that even the tooling is an imperfect work in progress.\n\nBut it is good enough for [AirBnb](https://www.reddit.com/r/typescript/comments/aofcik/38_of_bugs_at_airbnb_could_have_been_prevented_by/) and [Google](http://neugierig.org/software/blog/2018/09/typescript-at-google.html) and [Atlassian](https://github.com/atlassian/react-beautiful-dnd/issues/982) and [Lyft](https://eng.lyft.com/typescript-at-lyft-64f0702346ea) and [Priceline](https://medium.com/priceline-labs/trying-out-typescript-part-1-15a5267215b9) and [Slack](https://slack.engineering/typescript-at-slack-a81307fa288d) and it may be for you.\n\n<!--\n\nStructure of this post:\n\n- Hungarian-lite\n  - isLoading\n  - \\_internal vars\n- Plurals\n  - posts\n  - postIndex\n- Naming Grammar\n  - *Container, *Component\n  - Atoms, Molecules, Organisms, Templates, Pages\n- Monads\n  - use\\*\n  - sync\\*\n  - maybe\\*\n- form effects\n  - {type: 'foo'}\n  - <input type=\"button\" />\n  - ENUMS and Symbols\n- APIs\n  - REST: GET PUT POST DELETE\n  - GraphQL: types all the way down\n- Big Brain Time\n  - Joel Spolsky's [Making Wrong Code Look Wrong](https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/)\n  - How to Name Things\n- Questions to ask:\n  - What do we do to enforce types without a type system?\n    - Linting\n    - Code Review\n    - Defensive coding\n    - Nothing\n  - How much of these types are you writing yourself? What if your types were standardized?\n    - better error messages\n    - autocomplete and write time errors > build time errors > run time errors\n    - Other people can write them for you\n    - edge case exhaustion\n\n-->\n"
    },
    {
      "slug": "tests-or-types",
      "data": {
        "technical": true,
        "title": "Tests or Types: Why Not Both?",
        "slug": "tests-or-types",
        "categories": [
          "Tech"
        ],
        "date": "2019-07-10T00:00:00.000Z",
        "canonical": "https://css-tricks.com/types-or-tests-why-not-both/"
      },
      "content": "\n_Published on CSS Tricks as [Types or Tests: Why Not Both?](https://css-tricks.com/types-or-tests-why-not-both/)_\n\nArticle wrongly credits Gary Bernhardt's Boundaries, which is also an excellent talk - I meant to credit [Ideology](https://www.destroyallsoftware.com/talks/ideology).\n"
    },
    {
      "slug": "typescript-generics",
      "data": {
        "technical": true,
        "title": "The introduction to TypeScript Generics you've been missing",
        "slug": "typescript-generics",
        "categories": [
          "Tech"
        ],
        "date": "2019-08-30T00:00:00.000Z",
        "published": false,
        "decription": "The explainer of TS Generics I want"
      },
      "content": "\n_by [@swyx](https://twitter.com/swyx), with direct attribution and acknowledgement of [@andrestaltz](https://twitter.com/andrestaltz)'s [introduction to Reactive Programming](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)_\n\n> ⚠️Note: this is a work in progress - I am not even a TypeScript expert, I am merely [Learning In Public](https://www.swyx.io/writing/learn-in-public/) and jotting down non obvious, useful notes.\n\nFirst thing to do is read [the official Generics guide from the TS Handbook](http://www.typescriptlang.org/docs/handbook/generics.html). I am not here to compete with the docs.\n\nBased on this, I assume you know:\n\n- where to place angle brackets\n  - especially in classes and interfaces\n- etc from the intro\n\n---\n\nStructure\n\n- Why you can't avoid Generics\n- Concepts\n  - Assignable ([Compatibility](https://www.typescriptlang.org/docs/handbook/type-compatibility.html#subtype-vs-assignment))\n- Constructor Generics\n  - `Promise<>`\n- Interface Modification Inbuilt Generics\n  - Partial\n  - Readonly\n  - Pick\n  - Omit\n- Union Type Inbuilt Generics\n  - Exclude (parallel to Omit)\n  - Extract\n  - NonNullable\n- Union Type AND Interface Modification Inbuilt Generics\n  - Record\n- Extractor Inbuilt Generics\n  - ReturnType\n  - InstanceType\n  - ThisType (ignore)\n  - Required\n- Know the Keywords\n  - readonly\n  - extends and implements\n  - keyof\n  - [Mapped Types](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html#mapped-types) -> partial\n- Resources You Might Miss\n  - TS Release notes https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html\n  - Basarat on Generics https://basarat.gitbooks.io/typescript/docs/types/generics.html\n  - 2ality https://2ality.com/2018/04/type-notation-typescript.html\n  - sharifsbeat https://dev.to/busypeoples/notes-on-typescript-pick-exclude-and-higher-order-components-40cp\n  - https://dev.to/busypeoples/-notes-on-typescript-react-and-generics-35c9\n  - testing types generics https://www.youtube.com/watch?v=nygcFEwOG8w&feature=share"
    },
    {
      "slug": "write-my-code-for-me",
      "data": {
        "technical": true,
        "title": "Write My Code For Me",
        "subtitle": "Cheating at Developer Experience",
        "slug": "write-my-code-for-me",
        "categories": [
          "Tech"
        ],
        "date": "2019-03-21T00:00:00.000Z"
      },
      "content": "\n_My thoughts to self while weighing adding `netlify functions:create` to Netlify Dev. [Originally a gist](https://gist.github.com/sw-yx/6f97b9d7f3efbfad4c8e5b8a14b5bd27)_\n\nI've recently been working on some CLI that involves printing out a bunch of boilerplate template code for developer convenience. I found that there were a few interesting DX angles to this and figured I should write down the rough problem areas and the stances I chose. Most of us are familiar with CLIs like https://yeoman.io/, this task is variously called \"scaffolding\" or \"templating\" or some such similar term, with varying degrees of intelligence in the task. I'll refer to it as \"templating\" in this essay.\n\n\n# Part 1: Should You?\n\n## Caramel, not just Sugar\n\nIf there's a Maslow's hierarchy of Developer Experience, templating has to be at the top (i.e. it is not core). It trails the \"core\" DX. Breaking changes in core will easily break anything built on top of it (though of course that shouldn't happen often). However, it is closer to the user, and both removes the activation energy of trying you out, and provides a tool for power users to be very productive. Templating is *concentrated* sugar, aka Caramel!.\n\nOverall My top reservation with the very concept of templating is maintainability:\n\n- Developer productivity only jumps at the single point where code that is scaffolded out, and then the developer has to own the code from there on out\n- From the maintainer perspective - The templates need to individually be maintained too; we have a catch-22 where the more nontrivial the template, the more useful it is, so we want to have those, but then the more nontrivial the template, the more work it will be to maintain.\n\nWhen it comes to developer experience there is a spectrum of convention vs configuration. (Note: by configuration here i also mean writing code, not just writing json files)\n\nOn the configuration side, we have a really random assortment of tools to help. At the base level we have documentation - READMEs, blogposts, doc sites, and if we're really fancy, the CLI guides you through the configuration so you don't have to RTFM (the best docs are the ones you don't have to write! and they don't have to read). Templates best help to patch up configuration (mostly in the form of fixing boilerplate code) and go from copy-and-paste to tap-tap-tap.\n\nToward the convention side of the spectrum, there are zero config options, as well as single-point-of-entry [toolkits](https://kentcdodds.com/blog/concerning-toolkits/) like `react-scripts`, `redux-starter-kit`, and `apollo-boost`, all of which are layers on top of more powerful underlying primitives that solve the 80% use case.\n\nConfiguration is fine. Configuration is powerful. But we should continue to look out for cases where relying on templating is making us lazy toward finding opportunities to make conventions better.\n\n> as an aside: there's often a question of \"syncing\" - syncing updates, updating a template that has been scaffolded out, and so on. This adds a lot of additional complexity and I prefer not to do it (and accordingly, not promise the user that I can do it).\n\n## Templates vs Packages\n\nThe two forms of \"write code for me that is immediately usable\" are templates and packages (here, \"packages\" mean npm packages). Here are some pros and cons to consider:\n\n- Packages can be individually released and imported and maintained. Templates (as far as I know) have to be maintained and released together. People have to be prompted to upgrade their CLIs to get the new templates, which is a pain point. \n- Packages can only be installed. Templates can execute other forms of arbitrary code before and after templating... including prompting the user for more info, so no docs are required\n- Packages can't be edited by users. Allowing for more usecases means growing the API surface area. Templates can be edited and can be repurposed by users for any usecase.\n\nYou can paper over this choice by essentially turning templates into your own proprietary package ecosystem (so you have a nice middle ground between templates and packages), but that means further investment in infrastructure. Meteor tried this, and it didn't work well. I don't know of an example that has worked well, but perhaps there are more examples in heaven and earth than exist in my imagination.\n\nUltimately the choice here is dependent on the surface area of your tool. If there -is- a concrete, useful, 80% usecase, make a package. If you are more of a platform where no one use case dominates, templates may be better.\n\n## Templates vs Documentation\n\nThe other competition against templates is documentation (READMEs, blogs, docsites, videos, gifs, etc). Pros and cons:\n\n- Docs also double as content marketing - they are SEO friendly. Templates can be complemented by blogposts, but in themselves aren't discoverable by google.\n- Docs require copy-and-paste. Templates don't.\n- Blogposts are dated, and developers know how to track down and account for API changes since the publish date, although it involves more work on their part. This means maintenance overhead is kept low. However templates and docs promise to be current, and therefore mean more maintenance on our part while there is less overhead on the developer's part.\n- Docs allow longer form conceptual explanation that can be more generally useful for educational purposes. Templates at best offer small inline comment opportunities or it starts to get obnoxious.\n- Templates are available and discoverable in-terminal, whereas the developer often has to break flow to look up docs (the negative impact of this is debatable).\n- Your userbase will not be homogenous. Some will straight up prefer docs, others will prefer templates, and you'll be tempted to offer both without a conscious strategy. Maybe just only do docs, keep it simple?\n\nI cant think of a right answer here except that templates are a nice to have at a certain scale.\n\n# Part 2: How to do it well?\n\n## Utility vs Discoverability\n\nOk, so we've decided to invest in, and maintain, templates. **How many should we have?**\n\n- On one hand, more templates make the templating feature more useful and marketable. It shows the range of use cases the developer can apply your tool for, and makes them available in literally the lowest friction manner possible - *we write the code for them and literally put it in their filesystem*. Great!\n- On the other, more templates make it hard to know what is or isn't available, especially when the possible space is infinite. Particularly in a CLI environment, discoverability is the primary issue, but a close second is just sheer overwhelm and the paradox of choice. Should each template be as distinct as possible from the other and we should only offer a \"minimum spanning tree\" of templates? Or do we allow slight variations (e.g. \"graphql template!\" + \"graphql template with auth!\" + \"graphql template with typescript!\" + \"graphql template with auth and typescript!\") to keep it useful? How to inform (and maintain) the combinatorial explosion of possibilities?\n\nThis seems a Hard Problem™. However, there are a host of things you can do to tip the scales toward more templates.\n\n- **Use fuzzy autocomplete/filtering**: Many CLI tools like [inquirer](https://www.npmjs.com/package/inquirer#list---type-list) default to just listing out available options. You can scroll up and down and that's it. However, you can add a plugin like [inquirer-autocomplete-prompt](https://www.npmjs.com/package/inquirer-autocomplete-prompt) combined with [fuzzy](https://github.com/mattyork/fuzzy) matching to offer an experience of narrowing down the list by typing whatever is on the user's mind. Sort by match score instead of alphabetical. The newer kid on the block, `enquirer`, [comes with this built in!](https://github.com/enquirer/enquirer#autocomplete-prompt)\n\n![autocomplete](https://raw.githubusercontent.com/mokkabonna/inquirer-autocomplete-prompt/HEAD/inquirer.gif)\n\n- **Adapt to usage**: Many CLI tools are stateless by default. You can unintrusively add \"memory\" to your tool by saving recent or frequent selections and putting them first. https://github.com/rupa/z is the single best CLI tool I have ever used - it just works, and adapts to *me*. I use it dozens of times a day, every day, without thinking. You, too, can add memory to your tool with something like https://npm.im/data-store or https://npm.im/configstore. At a larger scale, adding telemetry to your CLI gets you overall usage statistics, where you can adjust things on a more macro scale (more highly used stuff should be placed higher, less used stuff either has a description problem or should be retired).\n\n- **Nest variants**: Every top level template should have a primary feature that people would probably search for, and if you offer variants (like \"with typescript!\" or \"with auth!\") make it a second prompt. The cost of an extra prompt is nothing compared to the code you save your user :)\n\n- **Userland extensibility**: Allow users to input templates they own and host as long as they conform to a format you specify. This allows them to use your templating feature without you having to maintain a template for them.\n\n- **Follow up**: After your template has done its thing, you can also ask for issues and PRs to keep it up to date. Every time a template is used, you have provided some benefit to your user. This is a good point to ask for feedback, or to invite the user to tweet their love for your tool (and in the process educate other users on use cases). Reciprocity works.\n\n- **Do more than write code**: The cost of using (or learning to use) your templating feature can be offset if it saves using (or learning to use) other features by bundling them. For example, your template may have dependencies. Install them. The template's code may expect other setup code and commands to be run - just run it for them.\n\n\n## How \"Smart\" should we be?\n\nTemplates offer the opportunity to do more than code dumps. Tools like https://www.npmjs.com/package/copy-template-dir allow very basic mustache variable swapping - but can we do more than that? Should we?\n\nI don't have profound thoughts to share on this, but i think it is a worthwhile area to explore. For example, lets say our tool offers indepdendent capabilities A and B, and there are mutually exclusive usecases X and Y. We can offer:\n\n- `O(n!)`: just 6 templates: X + A, X + B, Y + A, Y + B, X + A + B, Y + A + B\n- `O(n)`: at the top level, offer a choice between X and Y, then prompt again to add A or B or both.\n\nThink about how this scales with your capabilities and usecases. and how some capabilities may not work well with some usecases, and how you'll accommodate for that. \n\nIf the second choice: How will you code that up? One core template per usecase that you then write more code to modify for each capability? Will that code be idiomatic or look weird? (as in, no developer would actually write that if they wrote your thing from scratch - `create-react-app` famously ejects into a monster webpack config that scares off all but the most determined.) What if the capabilities are not entirely modular and have some interrelationships? \n\nWhat opportunities am I not thinking about that could be done for templating? Is the \"write code for me\" framing limiting my imagination?\n\nI don't know the answer to this.\n\n- [Airbnb uses Yeoman and babel AST parsing to augment existing files](https://youtu.be/JsvElHDuqoA?t=1630)\n\n## Misc notes\n\n- Don't worry about CI. Templating isn't used in CI, so you can lean on user prompting as much as you like :)\n- Do you want to acommodate different languages (eg TS vs JS) and versions?\n"
    },
    {
      "slug": "10000-loose-fans",
      "data": {
        "technical": false,
        "title": "10,000 Loose Fans",
        "slug": "10000-loose-fans",
        "categories": [
          "Advice"
        ],
        "date": "2019-08-18T00:00:00.000Z",
        "banner": "./assets/swyxtwitteranalytics.png",
        "keywords": [
          "twitter"
        ]
      },
      "content": "\nI broke past 10,000 Twitter followers on Saturday. Obviously this is a completely arbitrary milestone and pretty minor in the hierarchy of needs. I'm not celebrating.\n\nA person that -only- values follower count is playing the game Twitter wants you to play, [as Eugene Wei would say](https://www.eugenewei.com/blog/2019/2/19/status-as-a-service), mining the currency they monetize for social status. I don't think I know how to play this game well, although I clearly do it better than some.\n\nBut Twitter is an important social network in Tech and in both my social and work circles. I thought I would take this milestone to do some retrospective for those of you who have opted in to follow along my journey (thank you!) and my future self.\n\nThis won't be a full retrospective; I first signed up for Twitter 9 years ago, but only started actively using it 2 years ago and things have changed a lot [since my early days](https://dev.to/swyx/scraping-my-twitter-social-graph-with-python-and-selenium--hn8). More on my Twitter Rules of Engagement in a future post.\n\n## What 10,000 Followers Looks Like: By Numbers\n\nFirst, some numbers.\n\n[SocialBlade](https://socialblade.com/twitter/user/swyx) tracks me gaining between 600-900 followers a month. I follow on average 35 accounts a month (I only occasionally prune silent accounts). I tweet about 40 times a day (including replies; low 16, high 121 in the past fortnight).\n\nHere's my Twitter Analytics halfway through August 2019:\n\n![./swyxtwitteranalytics.png](/assets/swyxtwitteranalytics.png)\n\nIt's better to get an idea of a full month, so looking at July:\n\n- Impressions: 3m\n- Mentions: 2,118\n- New Follows: 828\n- Profile visits: 16.7k\n- Tweets: 884\n- Engagement: ~1.4%\n- Link clicks/day: 335\n- RT's/day: 53\n- Likes/day: 473\n- Replies/day: 50\n\nThe Top Follower slot is usually taken by a bot, noticeable by sheer amounts of hashtags, but sometimes I get cool people like [John Maeda](https://twitter.com/johnmaeda) and, even rarer, companies like [Heroku](https://twitter.com/heroku).\n\nMy top Tweets are usually memes like [this](https://t.co/fDhFBoCy5F) or parodies like [this](https://mobile.twitter.com/swyx/status/1145694466499588102) or technical stuff like [this](https://mobile.twitter.com/swyx/status/1100809424963219456). Basically I don't have much of a pattern apart from something vaguely technical although I did have one recent notable exception outside my usual beat, which were literally just [pictures of Singapore](https://twitter.com/swyx/status/1137356384796794880).\n\n## What 10,000 Followers Looks Like: By People\n\nNumbers can be bought. Numbers can be gamed by shoveling low quality popcorn down people's throads. Numbers can be gained be channeling outrage and signaling social values. Numbers can arise by doing deep, fundamental work and by you simply posting updates on work that people rely on.\n\nFor better or worse, I don't do any of that. I value anecdotally experienced engagement from people I respect. This doesn't mean they have to follow me at all. It just matters that I have the ability and the credibility to reach out to someone when I need to and I pass the \"Is this rando worth my time\" test. (How to make it worth their time? [Learn in Public.](https://swyx.io/writing/learn-in-public/))\n\nI wasn't planning for this but I recently felt this sheer awe in a [recent tweet](https://mobile.twitter.com/swyx/status/1162200868592029697). I was thinking through a modal interaction I'd implemented before and see all over:\n\n![modaltweet.png](/assets/modaltweet.png)\n\nI simply tweeted that because it was something I was working through and didn't know. To this day I don't know what kind of response any individual tweet will get.\n\nHere are the kind of people that replied:\n\n- Chris Coyier (needs no intro)\n- Steve Schoger (Design God)\n- Ryan Florence (router and modal king)\n- 3 Former Facebook Employees (FB first implemented that in Snowlift)\n\nand many more with comments and alternative names and approaches, even tutorials on how to do it.\n\nAs awesome as that is, Twitter DM's are even more valuable. That is a level of intimacy on par with and sometimes higher than having someone's number to text back and forth. I got my current job through a Twitter DM, and continue to get an enquiry around once a month. Other backchannel conversations and the rare group DM are also very valuable. (Twitter DMs are inferior to other group chat solutions like text and Whatsapp in every way but one: they're native to the platform.)\n\nThis is the kind of thing I'm on Twitter for. A hive mind of people with way more knowledge and abilities than I will ever have, that can help me and that I can hopefully help someday.\n\n## Twitter is AMP for thoughts\n\nThe bitesize and free nature of Twitter belies its importance. [If the number one feature of a social network is the people already on it](https://stratechery.com/2018/facebook-lenses/), then Twitter has that on lock as far as developers are concerned (arguably [GitHub is more valuable](https://mobile.twitter.com/swyx/status/1122544240804888578) despite only being acquired for \\$7b!). I challenge you to find a single conference where speakers don't mention their twitter handles. I challenge you to find any other social network mentioned.\n\nYet business founders, even of technical businesses, regularly advise that email is more valuable. I believe they're right for certain types of content, like email marketing and long essays like this one you're reading right now.\n\nBut Twitter has value in its constraint. By limiting every tweet to 280 characters, they force some clarity and economy and in turn make the infinite-scroll-feed more valuable and palatable. (By the way: there are very easy hacks to get disproportionate attention for your tweets I should probably write about someday. But it definitely doesn't involve a million hashtags.) Fail to encapsulate important nuance and face wrath from the mob.\n\nBy \"selling out\" to Twitter's requirements, you help add value to Twitter, and Twitter in turn gets you the distribution you want to other people, and by their interaction, adds value to you. Your Twitter followers are fans of yours, but only loosely. Their fanhood is (implicitly) conditional upon and improved by you following The Format and your reward for behaving is getting more notice faster.\n\nTwitter is AMP for thoughts. Like the real AMP, it is a deal with the devil to do things that are probably good for you anyway.\n\n## Loose Fans and What I'm Doing About It\n\nKevin Kelly famously wrote about how far you can go with [1000 True Fans](https://kk.org/thetechnium/1000-true-fans/). It's about \"true\" fandom, but also about how you can make a living serving the long tail, which is very true.\n\nHowever it is not true for Twitter. You grow in Twitter by participating in tribes, and eventually (maybe) leading and growing your own, the bigger the better.\n\nTwitter followers are \"loose\" fans. They haven't paid for anything from you, they haven't opted in for \"your whole self\" or pictures of what you had for Sunday brunch, they have simply opted to follow you to improve their main feed or keep tabs on something you're doing that is relevant to their interests. (There are also ways to modify this, via lists and muting, that I should write about in future.) It's very hard to call them to action mainly because you'll never be sure if they even see it. Them's the shakes.\n\nMany aren't even really \"fans\". They may be there just to try to prove they're smarter than you or to endlessly nag or stalk you. This is especially obvious at higher follower counts. This is part of why I don't relish the thought of 10xing followers, because although it will probably open up more opportunities, it will take away a lot of what I enjoy about my current Twitter experience.\n\nThe two ways I am dealing with this now are by starting to put work into my email list for this blog you are reading, and also by making plans for my own Twitter client. I intend this to be a lifelong project.\n"
    },
    {
      "slug": "adverse-status-updates-trust",
      "data": {
        "technical": false,
        "title": "Adverse Status Updates and Trust",
        "slug": "adverse-status-updates-trust",
        "categories": [
          "Reflections"
        ],
        "date": "2019-09-23T00:00:00.000Z"
      },
      "content": "\nI noticed an asymmetry between adverse status updates and trust that I figured it would be worth a quick comment on.\n\nI think it's fair to say we provide status updates for two big reasons: build trust, and to enable coordination. (If done synchronously, it's [like a mutex](https://twitter.com/search?q=meetings%20mutexes&src=typed_query), but async updates have maybe ~80% of the value)\n\nWhen providing adverse status updates, there is an incentive to filter out small issues. E.g. in a team update scenario, if you had a small setback that you expect to get resolved right away (or even one that has already been resolved), you might feel like it isn't worth reporting and so skip over it. If you have a tight schedule, or are rushing through traffic, you might not tell your partner that you might be late because it might turn out to be nothing and you might still make it (and you don't want to stress them out). A small outage of a few minutes may not be worth messing up [a pristine status page](https://twitter.com/QuinnyPig/status/1173370708316975104). **\"You can skip the small things, as long as you report the big things\".**\n\nThis is well intentioned, but probably a bad idea, because trust works the opposite way.\n\nTrust works from a basis of proof points. Obviously, the more proof points that you are trustworthy, the better. But there is another dynamic - size of proof points. And it works cumulatively. The thinking goes: if they won't report this small thing, how much do I trust them about bigger things?\n\nAnswer: zero.\n\nWhen you say nothing is going on, people stop believing you. [Absence of evidence isn't evidence of absence](<https://en.wikipedia.org/wiki/Burden_of_proof_(philosophy)#Proving_a_negative>) and all that.\n\nObviously this isn't fair to the reporter, who has made a mental commitment to definitely report the big things. But the reporter has the benefit of full knowledge of the sum total of their actions. The other party doesn't. They have a million things going on, and they [disproportionately remember the bad stuff](https://en.wikipedia.org/wiki/Negativity_bias) when they interact with you. They don't know everything you do, but they do see when you miss the little things.\n\nAnd it's not so little to them.\n"
    },
    {
      "slug": "betwixt-reason-and-result",
      "data": {
        "technical": false,
        "title": "Betwixt Reason and Result",
        "slug": "betwixt-reason-and-result",
        "categories": [
          "Advice"
        ],
        "date": "2019-06-29T00:00:00.000Z"
      },
      "content": "\nI'm writing to you from a cheap hostel in downtown Toronto ([Hostelling International](https://reservations.hostellingtoronto.com/iqreservations/asp/IQHome.asp), highly recommend for solo travel, I have stayed in SF, LA, NY, PHL, TO, NZ and more I probably forget) where a cute anecdote just happened that illustrates an important principle.\n\nThis hostel has a dive bar in the basement. If you're the social drinking type it's pretty cool, except tonight they have a really bad band playing. Like some dude wailing away on the mic trying to be all metal, but halfheartedly. His band is doing _something_, but unfortunately his mic is tuned up so high you can't hear them. It's loud and it's bad. This would be fine, except... in the study area where I am typing this, where all the young kids are busy working on their laptops and such... this hostel has also chosen to put the bar's music on blast on the wall TV.\n\nIt's my second evening here. It was the same deal last night too. Clearly nobody here is enjoying the \"music\". They tolerate it. Most of us have headphones in. One girl even has her fingers in her ears as she reads a magazine. I tolerate it too, for hours.\n\nEventually I have enough, ask around if anyone minds, get a chair, stand on it to reach up to the TV, and turn it off.\n\nBlissful silence.\n\nThen: smiles, thumbs up, and one girl even says \"oh thank god\". And we get back to our activities, this time sans faux-metal caterwauling.\n\nNow: **I don't know if I was allowed to do that.** The TV was hostel property. Someone clearly turned it on and left it on **for a reason**. But at the same time it was clear nobody actually in the study area was enjoying it, and I even asked before I did it. And after I did it, everybody was visibly happier. It took 30 seconds **for the result** of hours of slight improvement in quality of life.\n\n## Making the change you want to see in the world\n\nThis is a small, meaningless anecdote, and I'm not holding myself out to be some paragon of independent thought, but I find it a nice microcosm of many similar, far more high stakes situations in real life. Why didn't anyone do what I did? Was it because there was no explicit permission? Was it that everyone at the hostel was transitory? Was it a normative issue; nobody else is doing anything about it, so I shouldn't?\n\nI think these are good academic questions, but the wrong ones as far as personal philosophy is concerned. _It doesn't matter what others thought_. It matters that **I** was personally being inconvenienced by this thing, and that I could take a simple action to address it. So I did. The fact that it was a reversible action (a la [Collison](https://grahammann.net/blog/patrick-collison-on-decision-making) and [Bezos](https://www.cnbc.com/2018/11/19/jeff-bezos-simple-strategy-for-answering-amazons-hardest-questions--.html)) also made it easier to ask for forgiveness rather than permission.\n\nI often say that I don't take my own advice anywhere near as much as I should, and this is especially true here. I have had a lot of conditioning to accept things as they are and to work within the system. My life has definitely suffered because I failed to question defaults. Even among my peers I'm a relative deviant and outlier, but even I know that I don't push the envelope **anywhere close** to what I have seen smarter and bolder friends do. To be clear, I'm not talking about doing anything immoral or illegal or just plain rude, I'm just saying we could all do a little better for ourselves and for our environment by exploring **that vast gray area between the status quo and the clearly not allowed.**\n\n## The Importance of Being Unreasonable\n\nEveryone should know the George Bernard Shaw quote:\n\n> “The reasonable man adapts himself to the world: the unreasonable one persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.”\n\nA little gendered, but you get the drift. In fact my objection to it has more to do with the negative connotations of \"unreasonable\" - that you cannot be reasoned with, and generally that you can be an ass to someone calmly trying to tell you why you can't do a thing. I am not OK with that.\n\nFraming is important to me, so I looked around for a more positive framing for this idea. I like [this phrasing by George Mack](https://twitter.com/george__mack/status/1068238568777232384):\n\n> 4/ High Agency is a sense that the story given to you by other people about what you can/cannot do is just that - a story. And that you have control over the story. A High Agency person looks to bend reality to their will. They either find a way, or they make a way.\n\n> 5/ Low agency person acepts the story that is given to them. They never question it. They are passive. They outsource all of their decision making to other people.\n\nOf course, this is a cartoonish dichotomy of people between \"supermen\" and \"sheep\". But it can be a useful mental model (\"[all models are wrong, but some are useful](https://en.wikipedia.org/wiki/All_models_are_wrong)\"). I recommend George's whole twitter thread for even more perspectives on agency. In particular, Paul Graham describes this quality as the difference between being [Relentlessly Resourceful](http://www.paulgraham.com/relres.html) and \"hapless\", which is a nicely positive framing of this.\n\nUltimately, though, I still come back to this idea of \"unreasonable\", but from a more literal perspective. Here's [Steve Jobs and the Janitor story](https://medium.com/swlh/reasons-dont-matter-a-lesson-from-steve-jobs-e9f31b9ecff0#4222):\n\n> Steve used to give employees a little speech when they were promoted to Vice President at Apple… Lashinsky calls it the “Difference Between the Janitor and the Vice President.” Jobs tells the VP that if the garbage in his office is not being emptied regularly for some reason, he would ask the janitor what the problem is. The janitor could reasonably respond by saying, “Well, the lock on the door was changed, and I couldn’t get a key.” It’s an irritation for Jobs, but it’s an understandable excuse for why the janitor couldn’t do his job. As a janitor, he’s allowed to have excuses. “When you’re the janitor, reasons matter,” Jobs tells newly minted VPs, according to Lashinsky. “Somewhere between the janitor and the CEO, reasons stop mattering,” says Jobs, adding, that Rubicon is “crossed when you become a VP.”\n\nTo be \"unreasonable\" is to literally not have reasons factor in to your process for not getting things done. The buck stops with you, figure it out. This is the principal-agent problem: when you were merely an agent, as long as you \"did your job\", you were fine. Ironically the process of becoming \"high agency\" makes you into more of a principal than an agent. You may find this comical but all good senior leadership lives on being able to delegate execution.\n\nBad leadership can be \"unreasonable\" too; an unprincipled \"do whatever it takes\" attitude often leads to strategy churn, cutting corners and sometimes even jail.\n\n## The vast gray area\n\nNow, I instinctively dislike a pure results-driven approach: after all, shouldn't we be focusing on [Systems over Goals](https://blog.dilbert.com/2013/11/18/goals-vs-systems/) and obsess over [process over outcomes](https://a16z.com/2019/06/28/entrepreneurs-then-now-trends-decades-a16z-anniversary-ben-marc-stewart/)? How to reconcile the desire to be \"reasonable\" vs ruthlessly getting results by any means necessary?\n\nI will argue that \"high agency\" can occupy the liminal space between the two. Take another look at the graphic from George Mack's tweet:\n\n![https://pbs.twimg.com/media/DtMZnBrWsAA97f6.jpg](https://pbs.twimg.com/media/DtMZnBrWsAA97f6.jpg)\n\nWas the person allowed to build that raft? Unclear, but probably yes. Would it help save his life? Unclear, but at least he has a shot. Would 99% of people have just sat around waiting for help to arrive or things to improve? Absolutely.\n\n_The status quo is usually overly conservative._ It has the benefit of being tried and tested and allowed, but it is slow to adapt to changing rules, and frankly not enough alternatives are usually tested before everyone settled on this status quo. I liken this to [the local vs global optima](https://en.wikipedia.org/wiki/Local_optimum) concept in Mathematics and Machine Learning: we know what we have right now works, but we don't know if there's something better unless we go look. Too few people do.\n\nWhat prevents us from exploring the space of possibilities? There are many reasons, but I think our reasonableness is a big one. A reasonably smart person like you or I can reason our way out of doing _anything_. That's good for academic and socratic debate, but bad for actually taking any action. And of course, there's the trump card: \"If something better could've been done, it would already have been done\". This is remarkably lazy thinking and characteristic of reasonable people.\n\nThe popular joke that comes to mind in this genre is [the Economist refusing to believe there can be \\$20 on the ground because if it did it would already have been picked up.](https://www.etf.com/sections/features/123.html). It enforces a false dichotomy that either the market is totally efficient and the $20 doesn't exist, or the $20 exists and the market never efficient. But both can be true. Someone's got to be first to pick up the \\$20.\n\n**YOU** can be that first person to do something. And you should.\n"
    },
    {
      "slug": "bhags",
      "data": {
        "technical": false,
        "title": "BHAGs",
        "subtitle": "On having Big Hairy Audacious Goals",
        "slug": "bhags",
        "categories": [
          "Reflections"
        ],
        "date": "2019-12-11T00:00:00.000Z"
      },
      "content": "\n_Essay status: freshly baked, may still add minor points_\n\nRecently, [I asked tweeple](https://mobile.twitter.com/swyx/status/1158902677289472001):\n\n> Need some inspiration. What is your Big, Hairy, Audacious Goal?\n\nAnd people kindly indulged:\n\n- \"Make 5 millionaires\" ([Joel Hooks](https://mobile.twitter.com/jhooks/status/1158920626272268289))\n- \"_build_ my own house\" ([Wei Gao](https://mobile.twitter.com/wgao19/status/1158922061353406464))\n- \"Have my code executed a trillion times\" ([Mike Sherov](https://mobile.twitter.com/mikesherov/status/1158906016647528449))\n- \"A coding school by day, a dance floor by night\" ([Dan](https://twitter.com/dan_abramov/status/1158926242126729218?s=20))\n- \"I want to be on the TC39 committee\" ([Laurie](https://twitter.com/laurieontech/status/1158925022255341568?s=20))\n- \"Low-code, visually-developed, robust AI-powered app development tools.\" ([David K.](https://twitter.com/DavidKPiano/status/1158937110948323328?s=20))\n\nThere were also people who didn't like BHAGs:\n\n- [\"pass\"](https://mobile.twitter.com/suchipi/status/1158927521544646661)\n- [\"To learn how to be happy not having one.\"](https://twitter.com/sarah_federman/status/1158956789095813120?s=20)\n\n## What BHAGs mean to me\n\nFor the uninitiated, BHAGs (I pronounce them \"Bee-Hags\") were coined by [Jim Collins in Built to Last](https://www.jimcollins.com/article_topics/articles/BHAG.html). Click thru for the concept in his own words. In a sense this is original sin - yet another management obsession borne out of ignoring selection bias for the sake of success porn.\n\nHowever I choose to view BHAGs as something broader than a management goalsetting exercise. You don't have to run a company to have a BHAG, and plenty of companies are run successfully without one. You don't even have to have a BHAG. But having one helps put your current goals in context.\n\nFor a brief period, being \"mission driven\" was in vogue in Silicon Valley. BHAGs occupy the same mental space as having a mission, in my mind, except that they are bigger, hairier, audacious-er, and more specific.\n\nBHAGs are a reaction against incrementalism. In a world of neverending trivial pursuit of low hanging fruit, they are a breath of mountain air. BHAGs aren't [SMART](https://bcghendersoninstitute.com/when-smart-is-not-so-smart-how-to-create-the-right-kind-of-goals-for-each-situation-4fbe903fd62f) - they're SMT, at best.\n\nI think it's important, but not essential, to have some specificity to the goal. There ought to be some point at which it is over, no matter how ridiculously far out it may seem. That way, you might get some closure on it, and savor the feeling of a Job Well Done. But you can also track progress, and work backwards on the math to get to where you want to go (see [BHAGs and Systems](#bhags-and-systems) below).\n\n## Audacious (and Worthy)\n\nThe Audaciousness component of a BHAG is inspiring. Ideally your goal should be so audacious as to evoke laughter as to how ridiculous it is. There's a few ways to get there - doing something for the first time, or doing some big thing in a really short amount of time.\n\nHow laughable would it be if [someone got up on stage and said this](https://www.inc.com/greg-satell/how-institute-for-healthcare-improvement-brought-quality-movement-to-healthcare.html):\n\n> I think we should save 100,000 lives.\n\nAnd then they followed it up with:\n\n> And I think we should do that by June 14, 2006--18 months from today.\n\nIt's ridiculous! There's no plan involved! How do you measure multicausal impacts of things that don't happen?\n\nBut it's memorable. Worthwhile. Directionally correct.\n\nImpacting lots of people is often more impressive than just impacting yourself - but don't do it for others (you'll never make them happy forever), keep true to what you really want.\n\nThere's some relationship with Audacity and Reasonableness, in [the George Bernard Shaw sense of the word](https://www.goodreads.com/quotes/536961-the-reasonable-man-adapts-himself-to-the-world-the-unreasonable). An absurdly reasonable person can reason away not only everything currently wrong with the world, but also all our expectations of what we can do with the future. It takes some amount of **unreasonable audacity** to imply: \"our own reasonable expectations are wrong, and we can do better\".\n\nAlso implied is that this goal should be worthwhile in some way. You could set out to build the Universe's Biggest Ball of Yarn or to set the Guiness World Record for Underwater Basket Weaving, but nobody's going to be very inspired by that.\n\nBut, tell people you want to [make Humans a Multi-Planetary Species](https://www.liebertpub.com/doi/full/10.1089/space.2017.29009.emu) or to [own the Jets](https://www.nytimes.com/2018/12/28/sports/gary-vaynerchuk-jets-owner.html) or to [run a two hour marathon](https://www.youtube.com/watch?v=14xZ8iiFPYc)or to [make a city lose 1 million pounds of fat](https://mosaicscience.com/story/fat-city) or to [eliminate Polio](https://en.wikipedia.org/wiki/Jonas_Salk#Polio_research), people will laugh, and then they do a very curious thing.\n\n_They start trying to help_. They tell their friends who can help. They volunteer ideas. They check in on you. They celebrate your progress with no jealousy, mourn setbacks with empathy.\n\nThat's something you don't get with incrementalism. When you're working on the 35th Uber for X, nobody really cares. If you're lucky, they actively try to take you down or tell you why it won't work. There's a reason: it's zero sum.\n\nWhen you work on something audacious and worthy, you're doing no one (or very few people) are doing anyway - you present no threat. In fact, like [breaking the Bannister barrier](https://hbr.org/2018/03/what-breaking-the-4-minute-mile-taught-us-about-the-limits-of-conventional-thinking), you're proving it can be done, giving people an expanded sense of their own human capability.\n\nBy going for Audacity, you bring Hope.\n\n## Hairiness\n\nI think the understated part of a BHAG is actually the \"Hairiness\" aspect. A \"hairy\" problem isn't easy - there are a lot of devils in details, tons of miniproblems within the bigger problem. Right in JFK's \"Moon Speech\", he [directly acknowledges all this hair](https://er.jsc.nasa.gov/seh/ricetalk.htm):\n\n> we shall send to the moon, 240,000 miles away from the control station in Houston, a giant rocket more than 300 feet tall, the length of this football field, made of new metal alloys, **some of which have not yet been invented**, capable of standing heat and stresses **several times more than have ever been experienced**, fitted together with a precision better than the finest watch, carrying all the equipment needed for propulsion, guidance, control, communications, food and survival, on an untried mission, to an unknown celestial body, and then return it safely to earth, re-entering the atmosphere at speeds of over 25,000 miles per hour, causing heat about half that of the temperature of the sun--almost as hot as it is here today--and do all this, and do it right, and do it first before this decade is out\n\nThe Audacity is almost made _more_ worthwhile (or ridiculous) by all that hair. If our goal was to set out to solve those hairy things by themselves, sure, that's fine, but making a better alloy for a sake of it isn't particularly exciting. But if this alloy _helps enable moon flight_, then you can suddenly get much smarter people working on the exact same thing.\n\n## BHAGs and Systems\n\nAren't [Systems supposed to matter more than Goals](https://www.scottadamssays.com/2013/11/18/goals-vs-systems/)? If you set a ridiculous goal and have no plan to reach it, [that's a wish](https://quotationcelebration.wordpress.com/2017/11/17/a-goal-without-a-plan-is-just-a-wish-antoine-de-saint-exupery/).\n\nI guess I'd just mildly point out that systems and goals aren't mutually exclusive. If systems help you move further and more consistently, goals at least help you set direction. It's kinda ridiculous to argue that either have zero importance. Hairy goals help establish little checkpoints and goalposts for building the systems to get there.\n\n## Example BHAGs\n\nJust a list of nice things I see from people I know:\n\n- https://marcgrabanski.com/turning-35\n"
    },
    {
      "slug": "book-poll-2019",
      "data": {
        "technical": false,
        "title": "Book Poll 2019",
        "slug": "book-poll-2019",
        "categories": [
          "Reflections"
        ],
        "date": "2019-09-02T00:00:00.000Z"
      },
      "content": "\nI've been feeling like I've skewed too much on empty calories recently. So I ran [this poll](https://twitter.com/swyx/status/1168182079613485056):\n\n> Number of books you’ve read in the past year (fiction and non fiction):\n\nOf 962 respondents, 25% didn't read any books, 35% read 1-3, 24% read 4-9, 16% were > 10.\n\nI'm a 1-3 kind of guy and would love to up it. Many folks obliged with their goodreads lists:\n\n- Orta: https://github.com/orta/recommendations/blob/master/books.md\n- JLengstorf: https://www.goodreads.com/user/show/40101937-jason-lengstorf\n- DJSheldrick: https://www.notion.so/Books-09f7797e9014412a85b072ae9d472bd2\n- Wei: https://twitter.com/wgao19/status/1168254230584381440\n- Nader: https://www.goodreads.com/user/show/18844928-nader-dabit\n- Pshrmn: https://github.com/pshrmn/reading-list/\n- Janey: https://www.goodreads.com/user/show/61171365-janey-mu-oz\n- AJ: https://twitter.com/aj_kerrigan/status/1168249159243186176\n- Shomik: https://www.goodreads.com/review/list/61902520-shomik-ghosh?order=d&shelf=read&sort=date_read\n- Michiel: https://www.notion.so/michielnuyts/7283596d15a449eabc6c8929a6e59b34?v=0a7e7ad112f043209aa45934d307949f\n- Xiaoru: https://www.goodreads.com/user/show/95323167-xiaoru-li\n\nNear Term Book Shopping List:\n\n- Algorithms to Live By\n- [HPMOR](http://hpmor.com/)\n- After On\n- Why We Sleep\n- [Nudge](https://www.amazon.com/Nudge-Improving-Decisions-Health-Happiness/dp/014311526X)\n"
    },
    {
      "slug": "branding-bundles",
      "data": {
        "technical": false,
        "title": "Branding Bundles",
        "slug": "branding-bundles",
        "subtitle": "Effective Marketing of Incremental Progress",
        "description": "The best way to communicate a group of benefits is to slap a label on it.",
        "categories": [
          "Marketing"
        ],
        "date": "2020-02-16T00:00:00.000Z"
      },
      "content": "\n## Preface on Glitches\n\nI'm always on the lookout for \"[Glitches in the Matrix](https://www.youtube.com/watch?v=icID__07xBI)\" - breakages in how you think the world works. [Eric Weinstein calls it Truman Show Breaks](https://www.youtube.com/watch?v=nM9f0W2KD5s). A less attuned person might brush it off as a random fluke, but very often it demonstrates serious flaws in your mental model of how the world works, particularly the gap between what people say and what they actually end up doing. \n\nFor example, many people brushed off the upsets of Toyota vs GM, Intel vs Cyrix, HP vs DEC as fluke after fluke of management missteps, but it took Clay Christensen to reframe these as management acting as they \"should\" ([great recent discussion on the Exponent podcast](https://exponent.fm/episode-180-its-been-a-week/)). Other glitches? I don't have a list but [the famous stripper scene in The Big Short](https://www.youtube.com/watch?v=MesrrYyuoa4) is another. [John Backus also points to the 2000s warez scene](https://twitter.com/backus/status/1006391268216205312) as a break in typical human behavior models.\n\nI guess I should do a bigger blogpost on Glitches in future but that's the general idea.\n\n## CSS4\n\nI experienced a \"Glitch in the Matrix\" this week when I saw that [Jen Simmons was now advocating for CSS4](https://github.com/w3c/csswg-drafts/issues/4770). This just 2 years after [swearing up and down on her channel that there would never ever be a CSS4](https://www.youtube.com/watch?v=Jtmkk6odggs). And all of a sudden it seems like the [Who's Who of CSS are mostly aligned on having a CSS4](https://css-tricks.com/css4/).\n\nOh, of course, those of us in the know will nod and wink that there won't *really* be a CSS4, because independent modules are a thing. However, to the wider world, it will just seem like a weird about-face, but they'll get over it.\n\nI think CSS4 is a great idea and especially applaud anyone who can change their minds for the greater good.\n\n## Get Out Of Your Head\n\nI think the lesson here is that living standards don't work for the late majority. Nobody other than your in-crowd is keeping up on the intricacies and progress of every little spec, because they have better things to do. It's great for *the people who work on the spec*, but a complete mess when it comes to \"casuals\".\n\n[PPK](https://www.quirksmode.org/blog/archives/2020/01/css4_is_here.html) framed it most convincingly for me as segmenting users between the engaged \"head\", interested \"torso\", and super long \"tail\" - although I find [Ilya's original framing](https://www.youtube.com/watch?v=vtIfVPtN6io&list=PLjnstNlepBvMqV4uPl3coTTTjPXgh-OMj&index=9&t=0s) phrased with a little more humility. \n\nI liken this effect to doing updates at standups and at company allhands. \n\n- At a standup, everyone there cares and has the context to know about every little bump and victory in what you're working on.\n- At an all-hands, nobody has time for your little problems. They just want to know when you're done and what the high level takeaways are.\n\nIf you care about impact rather than preaching to your own choir, you should care about getting best practices out of your \"head\" and into the \"torso\" and \"tail\".\n\n## What are Branding Bundles?\n\nBranding bundles communicate readiness for broader adoption. They give some thematic coherence to a bunch of smaller features that, on their own, may not have as much impact. Perhaps equally importantly, they give a single hook for \"torso\" and \"tail\" people to learn up, prioritize, and check off the list.\n\nThis behavior of \"checking boxes\" might evoke some derision from \"head\" people, the people who know how much more there is to go. But it helps to define an acceptable upper bound in the investment needed from the business, and helps developers to build business cases based on success stories from earlier adopters (again, based on the same branding bundle).\n\nIn web development we try *really hard* to not break the web. However this not-breaking of things runs directly into the other maxim of \"if it ain't broken, don't fix it\". So when we make a commitment to incremental, non-breaking change, it can be hard to communicate the business value of implementing the results of those changes. Even in the \"head\", it can feel like things are always in flux. Branding Bundles help create a feeling of forward momentum for everyone.\n\nYou don't have to contribute to the letter soup of acronyms and buzzwords to create a bundle. The [React 15->16 rewrite](https://engineering.fb.com/web/react-16-a-look-inside-an-api-compatible-rewrite-of-our-frontend-ui-library/) was backward compatible, so technically did not warrant a major version bump, but because there was a semver bump I guarantee masses of engineering teams invested in the upgrade. On a smaller scale, I was recently able to make the case for upgrading a library we had, by noting that we were on v2 and the library was currently at v9. People want to keep up with the Joneses.\n\n> Side note: This may sound silly, but a logo can be very important to branding bundles. People slap that on their slides and sites, and accordingly it creates social proof. Give your bundle a nice logo if you want it to go far.\n\n## Other Branding Bundles\n\nCSS3 itself was a fairly successful branding bundle.\n\n[PWAs](https://developers.google.com/web/progressive-web-apps) are a little vaguer bundle, with a \"baseline\" and an \"exemplary\" standard. But the marketing is working.\n\n[JAMstack](https://twitter.com/philhawksworth/status/1226947263982948352) is intended in that vein too. [I frame it](https://www.swyx.io/speaking/jamstack-victory/) as, yes, a return to static sites, but also the confluence of 5 trends: Git Centric Workflow, Build Tools, next generation SSGs, the API economy (third party APIs), and Serverless (and 1st party APIs). (*There's a deeper discussion here, and a lot of buts dependent on context, but I'm not going to go into that here*)\n\nI think we can also study Branding Bundles in other aspects of life as well. I think FICO score is a nice bundle of financial health metrics, even if easily gamed. [Intel Inside](https://en.wikipedia.org/wiki/Intel#Intel_Inside) was one of the most successful bundles of all time. You could view [SOC2](https://www.imperva.com/learn/data-security/soc-2-compliance/) and [HIPAA](https://www.dhcs.ca.gov/formsandpubs/laws/hipaa/Pages/1.00WhatisHIPAA.aspx) compliance as a regulatorily imposed branding bundle. Companies like Stripe run their own [Partner Programs](https://stripe.com/docs/partners) that give some assurance that acceptable standards have been met."
    },
    {
      "slug": "cfp-advice",
      "data": {
        "technical": false,
        "title": "CFP Advice",
        "slug": "cfp-advice",
        "categories": [
          "Advice"
        ],
        "date": "2020-01-18T00:00:00.000Z",
        "description": "Some thoughts on writing your first few CFPs"
      },
      "content": "\nI'll assume you know [what a CFP is](https://speaking.io/plan/writing-a-cfp/) and want to get one accepted (so I dont have to justify [the value of learning in public](https://www.swyx.io/speaking/learn-in-public/)) and are just here for my advice.\n\n## Table of Contents\n\n## Who Am I to Advise You?\n\nI'm not a veteran, world class speaker. I don't maintain any widely used library or framework. I don't work at a FAANG. I started my first dev job in Jan 2018. My first meetup talk was in [Dec 2017](https://www.swyx.io/speaking/contributing-to-react/). My first conference talk was in [Aug 2018](https://www.swyx.io/speaking/react-not-reactive/). In the year-and-a-half since then I have spoken at 20+ events from [~250 person local community conferences](https://www.youtube.com/watch?v=DD6KTAGrj3E) to [~4k person bigger ones](https://www.swyx.io/speaking/jamstack-skeptic-allthingsopen/), internationally from [the UK](https://www.swyx.io/speaking/react-from-scratch/) to [Sweden](https://www.swyx.io/talks/star-apps/) to [India](https://www.swyx.io/speaking/serverless-graphql/) and two JSConfs in [Singapore](https://www.swyx.io/speaking/react-hooks/) and [Hawaii](https://www.swyx.io/speaking/babel-macros/). \n\nI don't say this to flex, merely to establish what I've done and also what I've not yet done (e.g. been a keynote speaker or emcee or be invited to some more \"prestigious\" conferences like React Conf, Abstract, StrangeLoop, Deconstruct, Smashing, or An Event Apart). I know I'm solidly B or C list. I'm starting to get conf invites, which give me more freedom from the CFP process, but I mostly still have to go through it. If you're a beginner, maybe that makes my advice more relatable to you. Maybe not. Your call, I can't change who I am.\n\n## Watch a lot of talks\n\nSpeaking and CFPs and the world of conferences have their own special language. And like any language, you learn best by immersion. \n\nMy YouTube Watch List is 400+ videos long. When I have lunch or am bored, I pull up a video and watch a talk. Most conferences directly copy + paste titles and talk abstracts into the videos, so start paying attention to those, since you're about to start writing them.\n\n(It also trains the YouTube algorithm to start recommending talks rather than entertainment)\n\nYou can find great talks at [Sara Viera's Awesome Talks site](https://awesometalks.party/).\n\n## Speak at a Meetup\n\nIf you haven't spoken at a meetup yet, I **strongly** recommend you do so a couple times before you speak at a conference. This is your first best trial run to get your speaking nerves out of the way, iron out the presentation technologies you want to use and also to trial your content on people who aren't your dog. On the flip side, meetup organizers are generally always looking for speakers, because meetup attendees are a shy, lazy bunch :) so you will be doing them a favor. Some meetup organizers like [GitNation](https://gitnation.org/) actively use meetups to seed future conference speakers.\n\n## Pick a Conference\n\nOnce you know the conference, you roughly know the audience. First time speakers often have a goal to speak, but forget that as a speaker, you're there to serve the audience and the goals of the conference organizers. So the better you understand the conference and the audience, the higher your odds.\n\nYou can find conferences via community listings:\n\n- https://reactjs.org/community/conferences.html\n- https://events.vuejs.org/conferences/\n- https://jsconf.com/\n- https://conferences.css-tricks.com/\n- https://twitter.com/moztechcfps\n- https://twitter.com/cfp_land\n- https://twitter.com/callingallpaper\n- https://confs.tech/\n\nIf you're new to conferences, \"the game\" can be rather opaque, so here are some basic, general facts (each conf will have exceptions!): \n\n- **Conference organizers want to sell tickets, have a great content mix, and sell next year's tickets, in roughly that order**. Speaker selection is a major part of how these goals are achieved.\n- Fortunately, you don't have to put butts in seats. Organizers will invite more famous speakers to do that. This is important: **don't do what they do**. Not yet. They're playing a different game, and the exact specifics of the talk/abstract matters less. You haven't earned that yet.\n- Your job is therefore to be a part of their content mix. This mix will be determined by the target audience of the conference. The more established the conference is, the more important good mix is a priority since ticket sales are assured.\n- Community conferences are often framework or language focused. For example, JSConf takes a VERY wide variety of topics - you don't even have to use JS or program for the web. It will always have room for [the embedded JS talk](https://www.youtube.com/watch?v=3HLRwcVqgFE) or [the creative coding talk](https://www.youtube.com/watch?v=v2Au9Rlj6XM) or [the other creative coding talk](https://www.youtube.com/watch?v=nC5q5JxLjnY) or [the other other creative coding talk](https://www.youtube.com/watch?v=GqsdiMc49yM).\n- Company sponsored conferences are often around a certain architecture, even if you don't use the particular company. For example, Netlify (where I work) sponsors JAMstackConf and invites speakers who don't necessarily use or talk about Netlify. Scope is a little narrower and more \"vertical\" than \"horizontal\" if that makes sense to you.\n- A conference's speaker slots are limited. A rule of thumb is 8-12 speakers per day, per track (you can get more lightning talk speakers at the cost of some full talk speakers). So a 3 day single track conference has a max of 36 talks. The applicant pool for a conference ranges from an average 200 to something like 800-1200 for a JSConf. (some conferences are invite-only). So your odds go down or up depending on these variables. A rejection doesn't sting as much once you see how incredibly selective it is. It's basically as nondeterministic as applying for colleges.\n- However since we already established the importance of mix, there are subgames to be played here. Even if 70% of CFP applicants use React, JSConf doesn't want to suddenly have 70% of talks be about React. So CFPs get put in buckets, whether explicitly or subconsciously. React CFPs will be compared on their merits with other React CFPs. And there will be some less competitive categories. Again, this may not be an explicit policy, but it happens regardless. Because \"good mix\" - in the subjective view of reviewers - is so important.\n- Most conferences (again, with clear exceptions) will take big names over unknowns per domain. For example, if both Sarah Drasner and I were to submit a CFP on Vue or Design or SVG animations, they would be stupid not to take her over me. However if this happened in every single talk, there would never be any new faces on stage, no pipeline for the next generation of speakers. Given equal levels of unknown, employers also get taken into account. This is why \"blind\" CFP review is important for some level of equity, serendipity, and renewal. In my experience, most CFP's are NOT blind. Mainly because putting butts in seats is more important for most conferences. \n\nSo as a first time speaker, your best opportunities are to apply to multi-track, multi-day conferences that have committed to a \"blind\" CFP review process, around a framework or language or architecture you know well, trading off topics you know vs their relative competitiveness. \n\nYou should also especially seek out conferences that put out **high quality videos of every talk**. This has two purposes. Part of **your first talk's job is to be a calling card for your next talk**. Secondly, you can tell the exact nature and tone of previous talks that have been accepted for that specific conference.\n\n## Pick a Topic\n\nGiven you now know your target audience, there are two things to sort out before you really even start writing your title or abstract.\n\nFirst, you have to **find a topic**. This is, at its simplest, finding the intersection between the things you're *very* interested in and the things that everyone else is interested in. The simple reason for this disparity in interest is that you're gonna be spending a bunch more time on this topic than the audience is, but you still need an audience to show up (and, more to the point, for CFP reviewers to rate you highly).\n\nThis intersection might either seem daunting or too broad to be useful.\n\n- **If you find it daunting**: you don't need to have a ton of production experience in the topic to give a talk on it. You don't need to be the creator of the framework or library. You don't need to understand its internals. As long as you've probably spent more time on your particular topic than your audience, they'll have something to learn from you. To some extent, you can even \"mortgage your future\" a bit - propose a talk on something you want to learn, before you've learned it, and use the talk acceptance as an artificial deadline. I don't recommend always doing this, but I've seen it work well :)\n- **If you find it too broad to be useful**: understand that in aggregate, the interests of large groups of people are very predictable. They always want to know what the future holds. They always want a comprehensive introduction to something popular. They always want real life \"war stories\" of things they'll probably have to do in future, from people who've successfully been through it. Developers always want [easy ways to add design touches](https://github.com/sw-yx/spark-joy/) without being a designer. Vice versa designers. If you need ideas, play buzzword bingo. Accessibility, Automation, AI, Design Systems, No Code, GraphQL, Serverless, Service Discovery, Infrastructure as Code. Everyone has **the same insecurities** and in a way you are there to tap into, and satisfy, their insecurities. The base insecurity is Fear of Missing Out. Everything else is a derivative of that. More to the point, conferences with a similar target audience will likely have the same mix (and, more often than is probably healthy, the same speakers!). **Conference organizers look to other conferences for inspiration, and so should you.** (To be EXTRA CLEAR here: this is only if you need it - it is perfectly fine to do a talk about nonhyped technologies that aren't buzzwords too. But humans do like buzzwords. 🤷🏽‍♂️) \n\nA reliable way of gauging the interest of others is to look at community watering holes. What topics keep coming up on Hacker News, Twitter, or Reddit? You can niche down from megacommunities to industry ones - for web development this would be sites like Dev.to, CSS Tricks, and Smashing Magazine. [What are the most active github repos](https://github.com/mikeal/daily)? What are [megatrends on package downloads](https://npmcharts.com/)? What are framework and library core team members putting out? [What are company leaders (whether it is ones you work at or just notable ones in the news) doing that is interesting](https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/)? But be aware that sometimes people don't know what they want until they see it.\n\nYou can also gauge relative interest and your own interest by creating more. As [I noted recently](https://twitter.com/swyx/status/1198202505227685888) - \"**Blog more**. See which blogposts get abnormal traction.\" Twitter, HN and Reddit are wonderful feedback mechanisms to gauge interest. **The MVP of a talk is a blogpost.** If you aren't a great writer, that's fine, you can also create demos. [Diana Smith has made a career of CSS art](https://www.vice.com/en_us/article/9kgx7p/painting-made-with-code-html-pure-css-browser-art-diana-smith) and I've never read a blogpost of hers. You bet your ass she'll be accepted to speak anywhere (I'm actually pretty sure she has spoken, I just can't find it right now). Your YouTube watch history and GitHub timeline are also great indicators of revealed interests.\n\nA special note on nontechnical talks: I love them. Advice on Career Management, [Impostor Syndrome](https://www.youtube.com/watch?v=Yk53eWIu7Nw), Salary Negotiation, [Working Remote](https://www.youtube.com/watch?v=61ji5L3GMeI), [Learning in Public](https://github.com/sw-yx/spark-joy/)? They are great, and last longer than any technology you choose. Conferences should have more of them. They don't. I haven't had much luck with the few that I've submitted. The reality is that the ultimate customers of conferences are the bosses of the people attending conferences. They want to see some \"I can use this at work\" return on investment on sending their employees. Most bosses find sending people to technically-heavy conferences easier to justify, hence there is more demand for technical talks. Less cynically, the timeframes for measuring and getting return on investment (1-2yrs) dictate what you invest in.\n\nIf you work at a mission-driven company, for example a [non profit or a government entity](https://www.youtube.com/watch?v=S1E6C8O7fk0) or [school system](https://www.youtube.com/watch?v=2p4YunDAzsk) or [museum](https://www.youtube.com/watch?v=AGtDAO_a9Mk), definitely see how you can incorporate your social impact into your talk. Developers are always looking for more inspiration on how their tech reaches out to the \"real world\", because most of us spend all day working on SaaS apps and marketing pages :)\n\n## Pick a Genre\n\nOnce you know your topic, there are several different \"genre\"s of talk, that will dictate your CFP title and abstract. Of course, you can choose not to stick to a genre, or to subvert a well known genre, but within the confines of a CFP it can often be easier to just stay inside a genre. I don't have a full list of genres, since I haven't been collecting them, so here is a nonexhaustive list:\n\n- **The War Story**: This is a great first talk genre for someone with some work experience. You simply tell a story of something you went through at work, including setbacks, lessons learned, and ESPECIALLY any quantitative benefits gained. You don't have to be the world expert in anything except your specific situation. It usually helps if you work somewhere notable like [AirBnb](https://www.youtube.com/watch?v=P-J9Eg7hJwE0) but a lesser known name is fine if you advertise the interesting elements of the story like [Millie Macdonald did](https://www.youtube.com/watch?v=K4cHUDDBwyM).\n- **Library/Framework/Product Launch**: Conference organizers like to be at the start of something big. To do this genre of talk well, you have to tackle an important problem, and sell the idea that you have developed a good solution for it. You don't have to have made it yet, tho of course it helps. Examples: [Dan Abramov](https://www.youtube.com/watch?v=xsSnOQynTHs), [Ryan Dahl](https://www.youtube.com/watch?v=EeYvFl7li9E)\n- **How to X**: How to do [Error Handling in GraphQL](https://www.youtube.com/watch?v=A5-H6MtTvqk). How to do [Input Masking in Vue](https://www.youtube.com/watch?v=FDqKAlrUm0k). How to make [Static Sites Dynamic](https://vimeo.com/174172567). How to [Be a Web A/V Artist](https://www.youtube.com/watch?v=Lby6fk5gC4k). [14 Ways to Bounce a Ball](https://awesometalks.party/video/cjqxy36f70xbp0147o7q2zj5x). You get the gist!\n- **Introduction to X**: This is easy Meetup fodder, but is more difficult to get traction at conferences, usually because conference organizers don't want to be perceived as having talks which could just as easily have been on the docs or on README instead. So a good Introduction to X talk will also have to be creatively framed and titled. One of these I've seen recently is Louisa Barret's Intro to Color Theory, except it wasn't named that. It was titled [The Teenage Mutant Ninja Turtle Guide to Color Theory](https://www.youtube.com/watch?v=NdKAUXAvt8E). You can even add a single word like [A Whirlwind Introduction To TypeScript](https://awesometalks.party/video/cjqwi7sn2123t0199yvtfosfa). See how this works?\n- **What's New in X**: Straight survey of what's new. This is also often framed as \"State of X\". You often have to be rather established to do this kind of talk, like [Mark Erikson](https://www.youtube.com/watch?v=zWsXFn5-xDU) or [Ben Ilegbodu](http://www.benmvp.com/slides/2019/reactathon/react-eco.html), or [Sarah Drasner](https://www.youtube.com/watch?v=COAVmST41Q0) or [Evan You](https://www.youtube.com/watch?v=7_ZzayG45Mk&list=PUa1zuotKU4Weuw_fLRnPv0A&index=28). But even if you're not super established, you can also bring data like [Sacha Greif](https://www.youtube.com/watch?v=FZw1j_tTSag) or just straight up explain things entertainingly like [Tara Manicsic](https://www.youtube.com/watch?v=1_hHxra0Lf4).\n- **Fundamentals**: This is a GREAT genre for beginners (not that it is exclusive to beginners). CS Fundamentals like [Algorithms](https://www.youtube.com/watch?v=panKf9hzUfQ), [Data Structures](https://www.youtube.com/watch?v=Wo0qiGPSV-s), [State Machines](https://www.youtube.com/watch?v=tpNmPKjPSFQ), and [Coroutines](https://www.youtube.com/watch?v=1_hHxra0Lf4) are always loved because they reinterpret boring, dry things that everyone \"should\" know, in a more familiar, up to date context. But I name this genre more broadly because you can also think of other fundamentals to teach, like [the JS Event Loop](https://www.youtube.com/watch?v=8aGhZQkoFbQ), [Visual Design](https://www.youtube.com/watch?v=hlI6xGfBjkQ) or [Game Programming Techniques](https://www.youtube.com/watch?v=QX0eauXBKwc).\n- **Live Coding**: This is an intimidating genre to many, because a mistake can derail a talk without a satisfying conclusion. However, the \"live wire act\" fascinates audiences (same reason we enjoy watching circus performers doing death defying stunts we are totally aware have been extremely well rehearsed, but there is still a risk of catastrophy). Being able to watch working code in formation over time gives extreme confidence in the tool or language or concept being demonstrated. Two less appreciated benefits are the familiarity of [IDE as presentation tool](https://staltz.com/your-ide-as-a-presentation-tool.html) and the natural guard against rushing (first time speakers, like me, make the mistake of talking too fast to hide nervousness and risk losing audiences). [My best talk is a livecode talk](https://www.swyx.io/speaking/react-hooks/) and I think interest in this genre is on the rise. SmashingConf is now [organizing 100% livecode conferences](https://bradfrost.com/blog/post/lets-make-a-design-system-live-coding-at-smashing-conf/), and [React Live](https://reactlive.nl/) is also 100% live code.\n- **Heresy Talks**: Definitely not for the faint of heart. To do a Heresy talk, you have to go to a conference where >80% of people love Technology X and tell them why Technology X isn’t good enough (yet) or question the tropes fans tell to oversell it. See Corey Quinn's [Heresy in the Church of Docker](https://www.youtube.com/watch?v=RB6MvSEaMKI&feature=emb_title) or Robert Zhu's [The Case Against GraphQL](https://www.youtube.com/watch?v=djKPtyXhaNE). The pro is, attention is guaranteed with all your slandering. The con is, you better be confident in your claims or be prepared to be torn apart.\n- **Intersection Talks**: This is definitely downstream of picking your topic, but usually people with interests in X and interests in Y are underserved with talks about X + Y. There are an infinite number of topic intersections, too many to name, but just talk about the obvious tips and tricks and notes that come to mind when you consider intersections.\n- **The Perf Talk**: This is a great genre for speed demons. Pick a common usecase, start of with a very inefficient, very high number, and whittle it down with trick after trick. Here are examples from [Jake and Surma](https://www.youtube.com/watch?v=fWc3Zu6A3Ws) and [Sasha Aickin](https://www.youtube.com/watch?v=PnpfGy7q96U).\n\n## Pick a Title\n\nYour title is twice as important as your abstract. CFP reviewers will look at both your title and your abstract. Conference attendees mostly only look at your title. Especially in multi-track conferences, most conferences only have room to print out your talk title, and that will often be the deciding factor between whether your talk has crickets or is standing-room-only (I know this from experience).\n\nBut no pressure: you can still tweak titles after getting accepted.\n\nTo the extent that your genre dictates your title, just go with that. (I'll put all genre title examples above in the Genre section)\n\nIf you can come up with a memorable name that encapsulates your core pitch, like [Never Write Another HoC](https://www.youtube.com/watch?v=BcVAq3YFiuc), do that. If your talk is good, its title will be quoted back to you with surprising frequency, so make it something you can live with.\n\nExamples: \n\n- [Never Write Another HoC](https://www.youtube.com/watch?v=BcVAq3YFiuc)\n- [The Hard Parts of Open Source](https://www.youtube.com/watch?v=o_4EX4dPppA)\n- [What Is Success?](https://www.youtube.com/watch?v=uGlzRt-FYto)\n- [Simple Made Easy](https://www.youtube.com/watch?v=34_L7t7fD_U)\n- [Even Naming This Talk is Hard](https://www.youtube.com/watch?v=JuI6NUbEzDw&feature=emb_title)\n\nGetting creative and eyecatching is helpful. Remember that CFP reviewers will mostly be scanning through hundreds of CFPs, usually in a Google sheet or table. Short titles stand out. Special buzzword keywords stand out. Again, scan through old published conference schedules to get an idea of what works.\n\nIf none of the above fit, don't push it. Just take the most boring, practical title you can do that touches on the main technologies you'll be demonstrating. Sometimes plain and simple is best!\n\nExamples: \n\n- *to be completed*\n\n## Write an Abstract\n\nWith your genre and title chosen, your abstract will practically write itself. You sketch an outline of the talk you want to do. If it helps, you can try to bullet point out all the things you want to do in your talk, then group and sort your points, and then use that as brainstorm fodder for your abstract. Don't give away the whole talk, but show just enough to pique interest.\n\nMost conferences only ask for abstracts, but some will leave room for more context from you on why you are the best person to present this topic (it's usually optional, but USE IT!!!).\n\nThe first paragraph of your abstract is most important, since it is what will be printed and on the YouTube description. Most abstracts are just one paragraph. Of that paragraph, the first sentence draws the attention. The last sentence seals the deal. As with all writing, Gary Provost's timeless advice on writing applies:\n\n> This sentence has five words. Here are five more words. Five-word sentences are fine. But several together become monotonous. Listen to what is happening. The writing is getting boring. The sound of it drones. It’s like a stuck record. The ear demands some variety. Now listen. I vary the sentence length, and I create music. Music. The writing sings. It has a pleasant rhythm, a lilt, a harmony. I use short sentences. And I use sentences of medium length. And sometimes, when I am certain the reader is rested, I will engage him with a sentence of considerable length, a sentence that burns with energy and builds with all the impetus of a crescendo, the roll of the drums, the crash of the cymbals–sounds that say listen to this, it is important.\n\nDo that, for your talk. Use less words if you can. Most of my abstracts are under 100 words.\n\nAbstracts are great places to stick eyecatching datapoints. Did you know TypeScript is at 65% adoption of JavaScript users? or that 51% of developers use VSCode? Or that \"we recently refactored 100K lines of JavaScript to TypeScript\"? Or that I [slashed my webpack build times by 20% with this one weird trick](https://twitter.com/swyx/status/1218173290579136512)? We are suckers for numbers.\n\nMost abstract submissions allow markdown for emphasis and simple styling. **Use it. Sparingly.**\n\nJust like your talk title, you'll rarely be held exactly to it. Nobody is watching your talk holding you to your abstract at knifepoint. You reserve the right to change things, hopefully not too drastically or too last minute. You won't use this right often, but its there if you need it.\n\nRun your abstract by a few developer friends, with no context. If they don't get it, that's a problem. You likely have a better idea of what your talk is than you've actually written down. Rip it up, try again. Be more obvious, less abstract. **Appeal to what people will get out of your talk rather than the specifics of how to get there** (which is the reason why people should come to your talk!).\n\n## Building a CFP Process\n\nOk, so you've written one CFP. Congrats! You're not done.\n\n*You can see this [12 Minute Video of How I Write CFPs](https://www.youtube.com/watch?v=gCroOiPRfw0) explaining my process below*\n\nAs you've probably heard, due to the selectivity and randomness, CFP submission is a numbers game. So it's more important that you build a sustainable CFP process than have any particular CFP get accepted. You'll be submitting **between 2-5 CFP's per conference**, and there are probably dozens of conferences each year that you are a good fit for. \n\nSo to avoid accidentally becoming a full time CFP writer, you'll just want to have a bank of topics and title and abstract samples that you can reuse. I tend to run with 5-10 of these, of varying readiness to present (remember, you dont have to be a world expert in some of these topics to talk about it). Tweak each submission to the conference's target audience as appropriate, like you would a cover letter in a mass job search. In a way, you're kind of looking for a job, a very short term gig.\n\nGet a good photo, use the same photo everywhere. People recognize faces faster than names.\n\nWrite a short bio, you'll be asked for it over and over again. Don't write down your life story, just a simple statement of what you do, what you identify as and what you're generally interested in. As your speaking career grows you'll want to have a short, medium, and long bio on your site for organizers to just copy paste without asking.\n\nAs you start getting acceptances and recorded talks, keep a list of your best talks. You'll be asked for those in future CFPs. Make them easily discoverable and sharable, and people will start inviting you without CFP.\n\n## Example CFPs and Peer Review\n\nOf course I have already given my advice that you should watch a bunch of talks and pay attention to titles and descriptions. But it really helps to have some example accepted CFPs so I will list what I have here:\n\n- [You can find every single title and abstract for accepted, pending and rejected (dead) talks on my site](\nhttps://github.com/sw-yx/swyxdotio/tree/master/content/))\n- [My first CFP (accepted for React Rally)](https://twitter.com/swyx/status/1112513571315830784)\n- [My first JSConf CFP (accepted for JSConf Hawaii)](https://twitter.com/swyx/status/1178059565805555713)\n- [React Rally Bad Example Proposal](https://speak.reactrally.com/events/react-rally-2019)\n- [David Khourshid's React Rally CFP](https://docs.google.com/document/d/1uT4aimBXzLmSH7rOxnOYGX1iyHw76mKrs5jnwq3TWrg/edit?usp=sharing)\n- [Devon Lindsey's React Rally CFP](https://docs.google.com/document/d/1qm33pkoy1T2gUiQm9SfEjKU8tXXPPLMaoKNM5U23LOY/edit?usp=sharing)\n- [Motherlode of CFP Examples from Will Larson](https://lethain.com/cfp-examples/) also check [Tweet Thread](https://mobile.twitter.com/lethain/status/1221128652194103296)\n- (others?)\n\nPeople who have said they don't mind reviewing first timer CFPs:\n\n- https://twitter.com/shannon_crabill/status/1085343833079062528\n- [me!](https://twitter.com/swyx)\n- (you?)\n\n## Other Advice\n\n[Peggy Rayzis:](https://twitter.com/peggyrayzis/status/1220034800830091265)\n\n> It's CFP season! Here's the abstract template I use for crafting effective proposals:\n>\n> 1. State the problem\n> 2. State your solution\n> 3. What the audience will learn from your talk (optional: how you plan to teach it)\n>\n> 3-5 sentences max.\n>\n> I read hundreds of proposals for GraphQL Summit. For the first pass, I spend <30 seconds on each one.\n>\n> Get to the point quickly. Otherwise, you risk losing my attention, which usually is a rejection.\n\nPhil Nash - [how to find CFPs](https://philna.sh/blog/2020/01/29/how-to-find-cfps-for-developer-conferences)\n\n## Next Steps & Recommended Reads\n\nPhew, that was a long ass post. Hope it helps! Ping me if you get accepted, I will be cheering for you :)\n\nI'm of course not the only source of advice on this stage. Here are other advice pieces I have come across:\n\n- Dan Abramov: [Preparing for a Tech Talk](https://overreacted.io/preparing-for-tech-talk-part-1-motivation/)\n- [CFPLand Guide to Speaking](https://www.cfpland.com/guides/speaking/)\n- [How to get into Speaking with Karl Hughes of CFPLand](https://www.codewithjason.com/rails-with-jason-podcast/karl-hughes/)\n- (you?)\n\nI will also be following up this post with my thoughts on speaking advice - giving the actual talk!"
    },
    {
      "slug": "cuttlefish",
      "data": {
        "technical": false,
        "title": "Cool Facts about Cuttlefish",
        "slug": "cuttlefish",
        "categories": [
          "Rants"
        ],
        "date": "2019-01-15T00:00:00.000Z",
        "keywords": [
          "cuttlefish"
        ]
      },
      "content": "\n![https://sw-yx.tinytake.com/media/93bf88?filename=1547580830746_15-01-2019-11-33-49.png&sub_type=thumbnail_preview&type=attachment&width=698&height=241&&salt=MzIzMTM5MV85NjgyODI0](https://sw-yx.tinytake.com/media/93bf88?filename=1547580830746_15-01-2019-11-33-49.png&sub_type=thumbnail_preview&type=attachment&width=698&height=241&&salt=MzIzMTM5MV85NjgyODI0)\n\n## Weird\n\nCuttlefish aren't even fish. They just tricked us.\n\nThere are 3 major species of Cephalopod: Squid, Octopuses, and Cuttlefish. 2 out of 3 have emojis: 🦑🐙. This is an injustice because Cuttlefish are way cooler than the other two.\n\nCuttlefish have W-shaped pupils. ![https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Cuttlefish_eye.jpg/500px-Cuttlefish_eye.jpg](https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Cuttlefish_eye.jpg/500px-Cuttlefish_eye.jpg) which stretch more than 180 degrees so they can see in front and behind at the same time.\n\nCuttlefish float like submarines, using a cuttlebone. Cuttlebones have both gas-filled forward chambers and water-filled rear chambers. So cuttlefish can change their own density.\n\n## Reproduction\n\nMale cuttlefish compete for female cuttlefish attention by size. There are 5-10 males for every female so this is a big fight. Large males will block access to smaller males. Fortunately, cuttlefish can camouflage. Females have a mottled pattern while Males have a striped pattern. So a small male can get past a large male by changing its colors to look like a female.\n([Source](https://www.youtube.com/watch?v=kMG2NOojGgs))\n\nAlso cuttlefish mate by mushing their faces together. ![https://cuttlefishsepiida.weebly.com/uploads/1/7/9/9/17998945/5564017.jpg?376](https://cuttlefishsepiida.weebly.com/uploads/1/7/9/9/17998945/5564017.jpg?376)\nThe male uses a special tentacle to put sperm in a special part of the female's mouth to keep until she is ready to lay her eggs.\n\n## Colors\n\nCuttlefish are color blind (they only have a single photoreceptor), but yet they can camouflage. In the dark. ([Source](https://www.leisurepro.com/blog/explore-the-blue/mysteries-cuttlefish-camouflage/))\n\nIt makes sense if you have a brain the size of a cuttlefish. ![https://www.kheper.net/topics/intelligence/cephal_fish_growth.gif](https://www.kheper.net/topics/intelligence/cephal_fish_growth.gif) (The largest of any invertebrates)\n\nCuttlefish are much better color changers than chameleons. In fact they can change colors so fast they can shimmer and hypnotize their prey. ![https://media.giphy.com/media/8D4NaGxz45j32/giphy.gif](https://media.giphy.com/media/8D4NaGxz45j32/giphy.gif).\n\n[Sepia](<https://en.wikipedia.org/wiki/Sepia_(color)>) is named for the reddish-brown ink of Cuttlefish (the common cuttlefish's Scientific name is _Sepia officinalis_). They can eject it in two ways - the normal smoke screen to hide itself, but also they can wrap the ink in mucous to create a shadow duplicate roughly the size of itself, called a \"pseudomorph\", to act as a decoy.\n\n## Blood\n\nCuttlefish have green-blue blood, because they have hemocyanin instead of hemoglobin. ([Source](https://www.pbs.org/wgbh/nova/camo/anat-nf.html))\n\nCuttlefish have three hearts. ❤️❤️❤️.\n\n## Variants\n\nThere are 120 different species of cuttlefish.\n\nThe flamboyant cuttlefish can't swim or float, because its cuttlebone is too small. It just walks on the seafloor. It also doesn't bother camouflaging itself. It is just _fabulous_. (also its venomous)\n\n![https://i.pinimg.com/originals/15/cf/9a/15cf9ac4dbe220ae451ff4051b0022c3.jpg](https://i.pinimg.com/originals/15/cf/9a/15cf9ac4dbe220ae451ff4051b0022c3.jpg)\n![https://4.bp.blogspot.com/-G0QpdxT0ZWE/VHUTaCzme8I/AAAAAAAAIyk/boB8mmF0vYY/s1600/FlamboyantCuttlefish.jpg](https://4.bp.blogspot.com/-G0QpdxT0ZWE/VHUTaCzme8I/AAAAAAAAIyk/boB8mmF0vYY/s1600/FlamboyantCuttlefish.jpg)\n"
    },
    {
      "slug": "donating-to-freecodecamp",
      "data": {
        "technical": false,
        "title": "Donating $10k to FreeCodeCamp",
        "slug": "donating-to-freecodecamp",
        "description": "I benefited from FreeCodeCamp and would like to give back",
        "categories": [
          "Tech"
        ],
        "date": "2019-10-20T00:00:00.000Z"
      },
      "content": "\n## Why I don't usually donate\n\nI'm not a big donor to nonprofit organizations. I spent some early years seeing how they work from the inside and came away with a deep distaste for their general lack of accountability. Often it is spent on fundraising and personal perks. Nonprofits do not have a monopoly on doing good; for-profits not only create jobs, pay taxes and fill a need for customers, but also have market forces (imperfectly) driving them to stay efficient.\n\nI'm frankly just not a big donor, period. 2-3 disastrous financial decisions from me and my parents during college years left my family around $500k in debt at peak. I'm the primary earner now that both are involuntarily retired. pretty much every thing i have saved in the 10 years since is going towards paying that shit down.\n\nBut I also care a lot about impact - is my dollar going to someone that really needs it - and the relationship I have to the cause.\n\n## Why donate to FCC\n\nOn these two counts, FreeCodeCamp comes up tops. Quincy and team have proven themselves to do a lot with very little. But recent outages have forced Quincy to [draw attention to their $300k budget](https://www.freecodecamp.org/news/freecodecamp-servers-update-october-2019/). To be clear, they also get a lot of free services from companies. But they could definitely use more cash. Quincy is also very scrupulous around how he does fundraising - no ads, no nags - which I strongly identify with and want to reward.\n\nI also care a lot about keeping quality coding education free. When I decided to explore learning to code, I wasn't sure if I was cut out for it. So I kept my day job, and [just did something on freecodecamp every day for 6 months](https://www.freecodecamp.org/forum/t/no-zero-days-my-roadmap-from-javascript-noob-to-full-stack-developer-in-12-months/164514). It was a struggle, but completing FCC was what gave me the confidence that this was actually something I could do and was worth quitting my job and investing actual money in. My story isn't even special - at least I had a job to keep me going. Others have less.\n\nI will also mention that I tried to give back to FCC through volunteering my time and code. I built [the Redux example for their new course](https://github.com/freeCodeCamp/CurriculumExpansion/issues/116). But it was slow going and I didnt find it all that interesting to work on, if I'm being honest. I reckon my money goes further than my personal time here.\n\n## Why I want to donate now\n\nI got a $20k raise this year thanks to Sarah fighting for me (I took a sizable pay cut in coming to Netlify, but also my \"market value\" likely has risen in the past year). In line with [Effective Altruism](https://en.wikipedia.org/wiki/Effective_altruism), I have been looking for effective ways to spread this good fortune. I sent some money to ConcatenateConf, but I also had plenty of bad ideas - sponsoring people to JAMstackconf, buying Eggheadio memberships for random people. Doing this kind of thing triggers the economist in me. It is a fair question whether concentrated charity to a lucky few is more effective than diffused charity to a general cause.\n\nSupporting FCC isn't just about [the learning platform](https://learn.freecodecamp.org/). It's also [the publication](https://www.freecodecamp.org/news/) and the [Youtube Channel](https://youtube.com/freecodecamp). This has a massive audience in India:\n\n![https://pbs.twimg.com/media/EE7M1kIWkAIhGV6?format=jpg&name=medium](https://pbs.twimg.com/media/EE7M1kIWkAIhGV6?format=jpg&name=medium)\n\nand Nigeria:\n\n![https://pbs.twimg.com/media/Dz1l9SaWkAEx7wz?format=jpg&name=4096x4096](https://pbs.twimg.com/media/Dz1l9SaWkAEx7wz?format=jpg&name=4096x4096)\n\nwhile of course also helping people in the US. Mostly I also like the idea that the students don't just get random oneoff gifts, they have to work to realize the maximum potential of FreeCodeCamp.\n\nBy allocating $10k to FreeCodeCamp I'm effectively treating FCC as a bootcamp with deferred payment. For reference, I paid $17k to go to [Full Stack Academy](https://www.fullstackacademy.com/). They had stronger in person tuition, and also got me my first job, so it feels about right. I also like the idea that FCC just needs to produce 30 of me a year, out of a pipeline of millions (google says 350k students/month), to meet its annual budget.\n\n## [DONATE HERE](https://paypal.me/freecodecamp)\n\n![https://pbs.twimg.com/media/EHaeZOIWkAE9lRP?format=jpg&name=medium](https://pbs.twimg.com/media/EHaeZOIWkAE9lRP?format=jpg&name=medium)\n"
    },
    {
      "slug": "ensembles-vs-committees",
      "data": {
        "technical": false,
        "title": "Ensembles vs Committees",
        "slug": "ensembles-vs-committees",
        "description": "A useful dichotomy for team dynamics.",
        "subtitle": "A useful dichotomy for team dynamics.",
        "categories": [
          "General"
        ],
        "begun": "2018-11-24T00:00:00.000Z",
        "date": "2019-10-26T00:00:00.000Z"
      },
      "content": "\nSome groups wear down each other's rough edges; other groups form a gestalt combination of strengths.\n\nI call these Committee vs Ensemble dynamics.\n\nWhat sets them apart?\n\nIs one always good and the other always bad?\n\n## Definitions\n\n**Committees** are great for \"risk reduction\": covering blind spots, getting buy-in from stakeholders. But they also risk culling originality and velocity. So upside risk is traded for lower downside risk. Committees produce the **intersection** of what all members agree on.\n\n\"Lows\" preside: You hear words like \"Low hanging fruit\" a lot, you target work to the Lowest Common Denominator to avoid offending anyone, everyone is working at Low intensity.\n\n**Ensembles** are great for creative energy: \"yes, and\" reinforcement, maximizing unique talents. But they also risk inconsistency, failure/outright bad ideas, and groupthink. So both upside and downside risk are higher. Ensembles produce the **union** of all member output.\n\n\"Highs\" preside: The team feels High energy, everyone is running at high utilization of their capacity and of their resources, and high emotions present, sometimes resulting in huge and problematic fights.\n\nIf it isn't clear: I am trying to be neutral here but I do have a bias toward Ensembles. I also recognize that just as you should pick the right tool for the job (caveat: see [In Defense of Hammers](https://swyx.io/writing/hammers)), you should form the right group for the job.\n\nYou don't make Saturday Night Live by Committee. Nor should you make law by Ensemble.\n\n## How to spot a Committee?\n\nEveryone has a veto. Opinions become checklists, routines, TPS reports. The status quo, and path of least resistance, is inaction, which often happens and goes by without acknowledgement. The group keeps growing because the qualification for membership is \"having a stake\".\n\nTo combat this: Set deadlines, participation requirements, default [Ulysses pact](https://en.wikipedia.org/wiki/Ulysses_pact) actions.\n\n## How to spot an Ensemble?\n\n(Almost) No veto. Everyone is trying to one-up each other in their own way. The status quo is friendly competition or people dropping out because they can't commit. Bad ideas get out into the wild and fail/backfire.\n\nTo combat this: Benevolent dictator, whose power is kept in check by the freedom of participants to walk away.\n\n_originally https://twitter.com/swyx/status/1066486842495782912_\n"
    },
    {
      "slug": "eponymous-laws",
      "data": {
        "technical": false,
        "title": "Eponymous Laws",
        "slug": "eponymous-laws",
        "description": "Interesting Two Word ideas with names of people on them",
        "categories": [
          "Philosophy"
        ],
        "begun": "2019-01-22T00:00:00.000Z",
        "date": "2020-01-27T00:00:00.000Z",
        "author": "swyx"
      },
      "content": "\nI keep an eye out of interesting \"laws\" that have names attached to them. They are a special case of [Two Word Ideas](https://www.swyx.io/writing/two-words), where a neat trick has been achieved by cramming an idea or meaning into a name and a law. Usually this also means there is a broader story or richer intellectual history worth diving into.\n\nSometimes they are just plain funny, sometimes they are so true it hurts.\n\n## Table of Contents\n\n## Software\n\n- [Zawinski's Law](https://en.wikipedia.org/wiki/Jamie_Zawinski#Principles): _Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can._\n  - I tend to interpret this broadly as software having [intrinsic desires](https://twitter.com/swyx/status/1026614064674484224). The proximate cause is customers and PMs having the same needs and imaginations, but abstractly it can look like software is a living thing that has a mind of its own:\n  - Every collaboration app wants to be email\n  - Every data analysis app wants to be Excel\n  - Every marketplace wants to be two-sided\n  - Every platform wants be an \"operating system\" - like [Wordpress](https://rework.fm/open-source-and-power-with-matt-mullenweg/)\n  - Every social app wants chat https://medium.com/@tk512/zawinskis-law-a-modern-take-8da3cf89152b\n  - Every UGC app wants stories https://theverge.com/2018/11/29/18117670/youtube-stories-creators-subscribers-instagram-philip-defranco\n  - Every B2B app wants a dashboard https://twitter.com/swyx/status/1205921170106638336\n  - Every site wants a CMS (esp agencies)\n- [Polanyi's Paradox](https://en.wikipedia.org/wiki/Polanyi%E2%80%99s_paradox) - \"We can know more than we can tell\"\n  - applicable in AI - we find it hard to describe common sense\n  - design - clients that don't know what they want but definitely don't want what you show them\n  - related to [Moravec's Paradox](https://en.wikipedia.org/wiki/Moravec%27s_paradox): \"It's easy to give computers adult level intelligence, but hard to give them child level perception and motor skills.\"\n    - \"To Err is Human; To Really Foul Things Up Requires a Computer\" - Bill Vaughan\n- [Postel's Law](https://en.wikipedia.org/wiki/Robustness_principle) aka Robustness principle: \"be conservative in what you do, liberal in what you accept\"\n- [Parkinson's Law](https://en.wikipedia.org/wiki/Parkinson%27s_law) is well known, but has several interesting corollaries: the Stock-Sanford Corollary states that \"If you wait until the last minute, it only takes a minute to do.\"\n- [Cargill's Law](https://thenewstack.io/code-n00b-ol-ninety-ninety/): “The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.”\n- [Hyrum's Law](https://www.hyrumslaw.com/): \"With a sufficient number of users of an API, it does not matter what you promise in the contract - all observable behaviors of your system will be depended on by somebody.\" - [Even bugs will be relied on!](https://twitter.com/acemarke/status/1261761355712954368?s=20).\n  - [Relevant XKCD](https://xkcd.com/1172/)\n  - example - Python Ordered Dicts!\n  - https://shoptalkshow.com/407/\n    - ~28 mins in: `window.event` was a nonstandard api but every browser except firefox implemented it. Then firefox implemented it, and JIRA broke.\n    - 30 mins in: JS Objects aren't supposed to have stable order. But every browser basically implemented them with stable order. Now browser that wants to do a performance optimization wants to use unstable order, but cannot, because apps now rely on it\n- [Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter) - a given object should assume as little as possible about anything else - its neighbors and subcomponents\n  - how to square this against \"be liberal in what you accept, conservative in what you output\"?\n  - what happens to Unix Philosophy when you defensively code everything?\n\nSome people combine laws:\n\n- Zawinski-Greenspun-Atwood-Murphy's Law - [\"Anything that _can_ expand to read email with lisp in javascript, _will_ go wrong.\"](https://twitter.com/secretGeek/status/1116217143933063169)\n- Pareto-Hofstadter-Parkinson's Law: [\"80% of the work expands so as to fill the time available for its completion and still take 20% longer than expected.\"](https://twitter.com/swyx/status/1231292352544808960)\n\nMore lists:\n\n- https://haacked.com/archive/2007/07/17/the-eponymous-laws-of-software-development.aspx/\n- https://www.timsommer.be/famous-laws-of-software-development/\n\n## Hardware\n\n- [Moore's Law vs Wright's Law](https://www.forbes.com/sites/jimhandy/2013/03/25/moores-law-vs-wrights-law/#162188f277d2): _each percent increase in cumulative production in a given industry results in a fixed percentage improvement in production efficiency_\n- [Dennard Scaling](https://en.wikipedia.org/wiki/Dennard_scaling): as transistors get smaller, their power density stays constant, so that the power use stays in proportion with area; both voltage and current scale (downward) with length\n- [Wirth's Law](https://en.wikipedia.org/wiki/Wirth%27s_law) - this is a special case of [Jevons paradox](https://en.wikipedia.org/wiki/Jevons_paradox): _software is getting slower more rapidly than hardware is becoming faster_\n  - Spolsky wrote a great counterargument to this [on Bloatware](https://www.joelonsoftware.com/2001/03/23/strategy-letter-iv-bloatware-and-the-8020-myth/)\n- [Amdahl's law](https://en.wikipedia.org/wiki/Amdahl%27s_law): the theoretical speedup in latency of the execution of a task at fixed workload that can be expected of a system whose resources are improved (the \"mythical man month\" law). another statement - you can never make a system faster than its slowest part.\n  - Also applied on Software and People https://codahale.com//work-is-work/\n  - adding manpower to a late sofrware project makes it later - Brooks’ Law\n\n## Business of Tech\n\n- Commoditize your complements - [Gwern](https://www.gwern.net/Complement), [Spolsky](https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/)\n- Rules for how Networks Scale (from [pmarca](https://a16z.com/2019/12/16/starting-greatness-0-to-1-mosaic-netscape-marc-andreessen/))\n  - O(N): Sarnoff's Law - the value of a broadcast network increases in direct proportion with the number of users\n  - O(N^2): Metcalfe's Law - email is p2p - value is number of connections between two nodes\n  - O(2^N): Reed's Law - no of groups and subgroups inside the network - what people do inside social networks and games\n\n## Socio-Psychological\n\n- The [Gell-Mann amnesia effect](https://www.epsilontheory.com/gell-mann-amnesia/): you ascribe credibility to news on which you are not an expert, despite knowing how badly reported the news can be on things you ARE an expert. The ultimate troll, given that the name of Gell-Mann was given by Crichton to demonstrate this exact phenomena.\n- Poe's Law - sufficiently advanced satire is indistinguishable from extremism\n  - _\"Without a winking smiley or other blatant display of humor, it is utterly impossible to parody a Creationist in such a way that someone won't mistake for the genuine article.\"_\n- [Shirky Principle](https://kk.org/thetechnium/the-shirky-prin/): Institutions will try to preserve the problem to which they are the solution\n- [Cromwell's Rule](https://en.wikipedia.org/wiki/Cromwell's_rule) - the use of prior probabilities of 1 (\"the event will definitely occur\") or 0 (\"the event will definitely not occur\") should be avoided, except when applied to statements that are logically true or false, such as 2+2 equaling 4 or 5.\n  - _\"I beseech you, in the bowels of Christ, think it possible that you may be mistaken.\"_\n- [Chesterton's Fence](https://florentcrivello.com/index.php/2019/09/04/the-efficiency-destroying-magic-of-tidying-up/) - you should never take down a fence before knowing why it was put up\n- [Ebbinghaus Effect](https://www.psychestudy.com/cognitive/memory/ebbinghaus-forgetting-curve) - mathematical model of how we forget - aka [forgetting curve](https://en.wikipedia.org/wiki/Forgetting_curve)\n  - also notable for the visual [Ebbinghaus Illusion (relative size of circles)](https://en.wikipedia.org/wiki/Ebbinghaus_illusion)\n- [Ringelmann effect](https://en.wikipedia.org/wiki/Ringelmann_effect) - work less when group is larger\n- [Stigler's Law](https://en.wikipedia.org/wiki/Stigler's_law_of_eponymy) - no scientific discovery is named after its original discoverer. Maximum meta!\n  - Mark Twain: \"_\"It takes a thousand men to invent a telegraph, or a steam engine, or a phonograph, or a photograph, or a telephone or any other important thing — and the last man gets the credit and we forget the others. He added his little mite — that is all he did. These object lessons should teach us that ninety-nine parts of all things that proceed from the intellect are plagiarisms, pure and simple; and the lesson ought to make us modest. But nothing can do that._\"\n- [Berkson's Paradox](https://twitter.com/MWStory/status/1205486677369786369?s=20) - positive correlations become negative because of filters that trade factors off.\n- [1% Rule](<https://en.wikipedia.org/wiki/1%25_rule_(Internet_culture)>) - 90% of the participants of a community only view content, 9% of the participants edit content, and 1% of the participants actively create new content.\n  - application of [Zipf's Law](https://en.wikipedia.org/wiki/Zipf%27s_law)\n- [Goodhart's Law](https://medium.com/@coffeeandjunk/campbells-law-goodhart-s-law-when-you-are-measuring-to-fail-c6c64923ad7) - “When a measure becomes a target, it ceases to be a good measure.”\n  - Related HN: https://news.ycombinator.com/item?id=17320640\n  - What's Immeasurably Important? https://www.collaborativefund.com/blog/immeasurably-important/\n- Joseph effects and Noah effects\n  - https://www.perell.com/blog/news-in-the-age-of-abundance\n  - _\"Joseph effects – seven fat years here, seven lean years there – occurred when markets were evolving gradually and continuously. Noah effects were cataclysms – the Flood, or the week of September 11 2001, when the New York Stock Exchange closed for five days and dropped 7.5 per cent on re-opening.”_\n\n## Related (for future blogposts)\n\n- Cognitive Biases\n- Logical Fallacies:\n  - http://utminers.utep.edu/omwilliamson/ENGL1311/fallacies.htm\n  - Simpson's paradox https://twitter.com/G_S_Bhogal/status/1225561131122597896\n- https://github.com/dwmkerr/hacker-laws\n"
    },
    {
      "slug": "fave-podcasts",
      "data": {
        "technical": false,
        "title": "Favorite Podcasts",
        "slug": "fave-podcasts",
        "categories": [
          "Faves"
        ],
        "description": "250 Podcasts I enjoy listening to",
        "date": "2020-02-02T00:00:00.000Z"
      },
      "content": "\nI recently switched from iPhone to Android (post to come about THAT one...) and had to port my podcast subscriptions from Overcast. I figured I would categorize and post commentary here for those who may be interested.\n\nYou are welcome to ping me for detailed thoughts on each of these, I didnt have time to write them down.\n\n## Table of Contents\n\n\n## Awesome Back Catalog\n\nEvergreen Podcasts that are still worth going back through for (including Seasonal/Dead podcasts). This is a high compliment from me, although other categories also include podcasts I also LOVE.\n\n- **Dolly Parton's America** ([rss](http://feeds.wnyc.org/dolly-partons-america), [url](https://www.wnycstudios.org/podcasts/dolly-partons-america)) - I never grew up with Dolly and this fills a hole. One-season run.\n- **A Very Fatal Murder** ([rss](http://feeds.megaphone.fm/veryfatalmurder)) - HILARIOUS ads. One-season run.\n- **Common Sense with Dan Carlin** ([rss](http://feeds.feedburner.com/dancarlin/commonsense?format=xml), [url](http://www.dancarlin.com/)) - seems dormant but good to get a Carlin political rant.\n- **The Last Days of August** ([rss](http://thebutterflyeffect.audible.libsynpro.com/rss), [url](https://www.audible.com/pd/The-Last-Days-of-August-Audiobook/)) - One-season run.\n- **Office Hours with Spencer Rascoff** ([rss](http://officehourswithspencerrascoff.zillownetwork.libsynpro.com/rss), [url](http://zillow.com/office-hours)) CEO interviewing CEOs is the BEST. Seems dormant right now and he's no longer at Zillow.\n- **S-Town** ([rss](http://feeds.stownpodcast.org/stownpodcast), [url](https://stownpodcast.org/)) - the original podcast revival\n- **American Innovations** ([rss](https://rss.art19.com/american-innovations-podcast), [url](https://art19.com/shows/american-innovations-podcast)) - great history re-enactments\n- **Inside Star Wars** ([rss](https://rss.art19.com/inside-star-wars), [url](https://art19.com/shows/inside-star-wars)) - One-season run.\n- **Pessimists Archive Podcast** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:220006686/sounds.rss), [url](http://www.pessimists.co/)) - people shit on tech since the dawn of time.\n- **Ear Hustle** ([rss](http://feeds.earhustlesq.com/earhustlesq), [url](https://www.earhustlesq.com/)) - great stories from prison\n- **Tribe of Mentors** ([rss](https://rss.art19.com/tribe-of-mentors), [url](https://art19.com/shows/tribe-of-mentors))\n- **Untold Stories** ([rss](https://feeds.megaphone.fm/untoldstories), [url](https://blockworksgroup.io/untold-stories-podcast))\n- **Acquired** ([rss](https://acquired.libsyn.com/rss), [url](https://acquired.fm/)) probably the highest quality recent Tech History podcast I have ever come across\n- **Soundtracking with Edith Bowman** ([rss](https://audioboom.com/channels/4794784.rss), [url](https://audioboom.com/channel/soundtrackingwithedithbowman)) - A-list celebs/directors talk about the sound behind their movies usually right after they come out\n- **Decrypted** ([rss](http://feeds.bloomberg.fm/BLM3923153289), [url](https://bloomberg.com/podcasts/decrypted)) - dead now, but aki ito and brad stone were really great\n- **Dan Carlin's Hardcore History** ([rss](http://feeds.feedburner.com/dancarlin/history?format=xml), [url](http://www.dancarlin.com/)) - very infrequent but good history\n- **Beyond the Screenplay** ([rss](https://anchor.fm/s/86e1204/podcast/rss), [url](https://anchor.fm/beyondthescreenplay))\n- **Mostly Nitpicking** ([rss](http://mostlynitpicking.libsyn.com/rss), [url](https://www.mostlynitpicking.com/)) - Nando is great at nitpicking pop culture\n- **Swindled** ([rss](https://feeds.megaphone.fm/ADL8288293115), [url](http://www.swindledpodcast.com/))\n- **The Reductress Minute** ([rss](https://rss.art19.com/the-reductress-minute), [url](https://art19.com/shows/the-reductress-minute)) - dead, but hilarious\n- **Behind The Tech with Kevin Scott** ([rss](http://behindthetech.mpsn.libsynpro.com/rss), [url](https://www.microsoft.com/en-us/behind-the-tech)) - Microsoft CTO interviewing his heroes, with Christina Warren\n- **The Missing Cryptoqueen** ([rss](https://podcasts.files.bbci.co.uk/p07nkd84.rss), [url](http://www.bbc.co.uk/programmes/p07nkd84)) - One-season run.\n- **Philosophy Bites** ([rss](http://philosophybites.libsyn.com/rss), [url](http://www.philosophybites.com/))\n- **The After On Podcast** ([rss](http://afteron.libsyn.com/rss), [url](https://www.after-on.com/)) - great futurism from a fascinating author. dead now\n- **Business Wars** ([rss](https://rss.art19.com/business-wars), [url](https://www.wondery.com/shows/business-wars/?utm_source=rss)) - replays of great business rivalries\n- **Internet History Podcast** ([rss](https://feedpress.me/InternetHistoryPodcast), [url](https://play.acast.com/s/internethistorypodcast)) - LOVE tech history. dead noe.\n- **Homecoming** ([rss](https://feeds.megaphone.fm/homecoming), [url](https://www.gimletmedia.com/homecoming)) - One-season run.\n    \n## Storytelling\n\nSometimes you just want a good story.\n\n- **Partners** ([rss](https://feed.partners.show/), [url](https://www.partners.show/)) - Hrishi Hirway's new thing\n- **This American Life** ([rss](http://feed.thisamericanlife.org/talpodcast), [url](https://www.thisamericanlife.org/))\n- **Cautionary Tales** ([rss](https://feeds.megaphone.fm/cautionarytales), [url](https://www.pushkin.fm/))\n- **99% Invisible** ([rss](http://feeds.99percentinvisible.org/99percentinvisible), [url](http://99percentinvisible.org/))\n- **Radiolab** ([rss](http://feeds.wnyc.org/radiolab), [url](https://www.wnycstudios.org/podcasts/radiolab/projects/podcasts))\n- **Revisionist History** ([rss](https://feeds.megaphone.fm/revisionisthistory), [url](http://revisionisthistory.com/))\n- **Against the Rules with Michael Lewis** ([rss](https://feeds.megaphone.fm/against-the-rules), [url](https://atrpodcast.com/))\n- **The Moth** ([rss](http://feeds.feedburner.com/themothpodcast), [url](http://themoth.org/)) - probably the only podcast that has ever made me cry.\n    \n## Tech\n\nTechnical podcasts by people who code\n\n### Tech: Webdev/JS\n\n- **Thunder Nerds** ([rss](https://www.thundernerds.io/feed/podcast/), [url](https://www.thundernerds.io/))\n- **Modern Web** ([rss](https://modernweb.podbean.com/feed.xml), [url](https://modernweb.podbean.com/))\n- **JAMstack Radio** ([rss](https://www.heavybit.com/category/library/podcasts/jamstack-radio/feed/), [url](https://www.heavybit.com/library/podcasts/jamstack-radio/))\n- **The EmberMap Podcast** ([rss](https://feeds.simplecast.com/sOJAMohP), [url](https://embermap.com/))\n- **Smashing Podcast** ([rss](https://feeds.transistor.fm/smashing), [url](https://podcast.smashingmagazine.com/))\n- **SitePen** ([rss](https://www.sitepen.com/feed/), [url](https://www.sitepen.com/))    \n- **React Podcast** ([rss](http://feeds.feedburner.com/reactjspodcast), [url](http://reactpodcast.com/))\n- **React Podcast (old)** ([rss](https://rss.simplecast.com/podcasts/6265/rss), [url](http://reactpodcast.com/))\n- **Syntax - Tasty Web Development Treats** ([rss](https://feed.syntax.fm/rss), [url](https://syntax.fm/)) - probably at the top of the game in this category\n- **Toolsday** ([rss](https://rss.simplecast.com/podcasts/4211/rss))\n- **Full Stack Radio** ([rss](https://rss.simplecast.com/podcasts/279/rss), [url](http://fullstackradio.com/)) - everything adam wathan  does is gold\n- **ShopTalk Show** ([rss](https://shoptalkshow.com/feed/podcast), [url](https://shoptalkshow.com/))\n- **Programming by MGechev** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:760338451/sounds.rss), [url](https://podcast.mgechev.com/)) - still pretty new, but very high quality algorithms stuff\n- **The Undefined Podcast** ([rss](https://feeds.simplecast.com/8lcA0Is7), [url](https://undefined.fm/))\n- **Ladybug Podcast** ([rss](https://pinecast.com/feed/ladybug-podcast), [url](https://ladybug.dev/))\n- **That's my JAMstack** ([rss](https://pinecast.com/feed/thats-my-jamstack), [url](https://thatsmyjamstack.com/))\n- **JS Party** ([rss](https://changelog.com/jsparty/feed), [url](https://changelog.com/jsparty))\n- **The Diff: A Podcast from Facebook Open Source** ([rss](https://anchor.fm/s/953b200/podcast/rss), [url](https://thediffpodcast.com/))\n- **The Babel Podcast** ([rss](https://feeds.transistor.fm/the-babel-podcast), [url](https://podcast.babeljs.io/))\n- **Chats with Kent C. Dodds** ([rss](https://feeds.simplecast.com/X_wS_WYh), [url](https://kentcdodds.com/chats-with-kent-podcast))\n- **3 Minutes with Kent** ([rss](https://www.briefs.fm/3-minutes-with-kent.xml), [url](https://www.briefs.fm/3-minutes-with-kent))\n- **CodePen Radio** ([rss](https://blog.codepen.io/feed/podcast/), [url](https://blog.codepen.io/)) - love learning about codepen from codepen\n- **Front End Happy Hour** ([rss](https://feeds.soundcloud.com/users/soundcloud:users:206137365/sounds.rss), [url](http://frontendhappyhour.com/)) - drinks format is amazing\n- **Fish and Scripts** ([rss](https://anchor.fm/s/cf40bd0/podcast/rss), [url](https://www.fishandscripts.com/))\n\n### Tech: Cloud\n\n- **Screaming in the Cloud** ([rss](https://feeds.transistor.fm/screaming-in-the-cloud), [url](https://screaminginthecloud.com/)) - corey teaches me a ton about aws\n- **Serverless Chats** ([rss](https://feeds.transistor.fm/serverless-chats), [url](https://www.serverlesschats.com/)) - really good\n- **Arrested DevOps** ([rss](https://www.arresteddevops.com/episode/index.xml), [url](https://www.arresteddevops.com/)) - i am newer to this but i like matty\n- **The New Stack Makers** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:107605642/sounds.rss), [url](http://soundcloud.com/thenewstackmakers)) - oddball but occasionally good guests\n- **Google Cloud Platform Podcast** ([rss](https://feeds.feedburner.com/GcpPodcast), [url](https://www.gcppodcast.com/)) - from gcp folk - just nice to keep tabs\n\n### Tech: AI/ML\n\n- **The TWIML AI Podcast (formerly This Week in Machine Learning &amp; Artificial Intelligence)** ([rss](http://twimlai.libsyn.com/rss), [url](https://twimlai.com/))\n- **Not So Standard Deviations** ([rss](http://nssdeviations.libsyn.com/rss), [url](http://nssdeviations.com/))\n- **Autonocast** ([rss](https://damon-lavrinc-zzza.squarespace.com/blog?format=rss), [url](http://www.autonocast.com/)) - really good insiders podcast on autonomous driving\n- **Data Engineering Podcast** ([rss](https://www.dataengineeringpodcast.com/feed/mp3/), [url](https://www.dataengineeringpodcast.com/))\n\n### Tech: Design\n\n- **Design Details** ([rss](https://rss.simplecast.com/podcasts/1034/rss), [url](http://spec.fm/podcasts/design-details))\n- **Layout** ([rss](https://layout.fm/rss), [url](https://layout.fm/))\n- **The Boagworld UX Show** ([rss](https://feeds.simplecast.com/XJ3MbVN3), [url](http://boagworld.com/show))\n    \n### Tech: General\n\n- **Hanselminutes - Fresh Talk and Tech for Developers** ([rss](https://feeds.simplecast.com/gvtxUiIf), [url](https://www.hanselminutes.com/))\n- **The Bike Shed** ([rss](https://feeds.fireside.fm/bikeshed/rss), [url](https://www.bikeshed.fm/))\n- **The freeCodeCamp Podcast** ([rss](http://freecodecamp.libsyn.com/rss), [url](https://www.freecodecamp.org/)) - I'm on here!\n- **Function with Anil Dash** ([rss](https://feeds.megaphone.fm/function), [url](https://glitch.com/culture/function/))\n- **Darknet Diaries** ([rss](https://feeds.megaphone.fm/darknetdiaries), [url](https://darknetdiaries.com/))\n- **Software Engineering Daily** ([rss](https://softwareengineeringdaily.com/feed/podcast/), [url](https://softwareengineeringdaily.com/archives/)) - I'm on here! also [previously wrote a whole piece on it](https://www.swyx.io/writing/faves-se-daily)\n- **The Changelog** ([rss](https://changelog.com/podcast/feed), [url](https://changelog.com/podcast))\n- **On The Metal** ([rss](https://feeds.transistor.fm/on-the-metal-0294649e-ec23-4eab-975a-9eb13fd94e06), [url](https://onthemetal.fm/))\n- **Talk Python To Me - Python conversations for passionate developers** ([rss](https://talkpython.fm/episodes/rss), [url](https://talkpython.fm/))\n- **Acquired** ([rss](https://acquired.libsyn.com/rss), [url](https://acquired.fm/)) - ALLTIME GREAT podcast\n- **Under the Radar** ([rss](https://www.relay.fm/radar/feed), [url](https://www.relay.fm/radar))\n- **Software Engineering Radio - The Podcast for Professional Software Developers** ([rss](http://feeds.feedburner.com/se-radio), [url](https://www.se-radio.net/))\n- **The Laravel Snippet** ([rss](https://feeds.transistor.fm/laravel-snippet), [url](https://laravel.com/))\n- **BookBytes** ([rss](https://www.orbit.fm/bookbytes/feed.rss), [url](https://www.orbit.fm/bookbytes))\n- **Soft Skills Engineering** ([rss](http://feeds.feedburner.com/SoftSkillsEngineering), [url](https://softskills.audio/))\n- **React Native Radio** ([rss](https://feeds.feedwrench.com/react-native-radio.rss), [url](https://devchat.tv/react-native-radio))\n- **Giant Robots Smashing Into Other Giant Robots** ([rss](https://feeds.fireside.fm/giantrobots/rss), [url](https://www.giantrobots.fm/)) - winner: best name\n- **GraphQL Radio** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:302309511/sounds.rss), [url](http://graphqlradio.com/))\n- **egghead.io developer chats** ([rss](https://feeds.simplecast.com/saRCLXVY), [url](https://egghead.io/)) - I'm on here\n- **devMode.fm** ([rss](https://devmode.fm/rss), [url](https://devmode.fm/))\n- **The Python Podcast.__init__** ([rss](https://www.podcastinit.com/feed/mp3/), [url](https://www.pythonpodcast.com/))\n- **Coding Blocks** ([rss](http://feeds.podtrac.com/tBPkjrcL0_m0), [url](https://www.codingblocks.net/))\n- **DevRel Radio** ([rss](http://devrelradio.libsyn.com/rss), [url](http://devrelrad.io/))\n    \n### Tech: No Code\n\n- **The Visual Developers Podcast** ([rss](https://feeds.transistor.fm/the-visual-developers-podcast), [url](https://visualdev.fm/))\n- **BuiltOnAir** ([rss](https://feeds.transistor.fm/builtonair), [url](https://builtonair.com/))\n\n## News\n\nStuff happens, people react and report. I keep in touch with Finance stuff due to my background. I try not to spend too much time in News, but its nice to have a convenient place to get the lowdown on things.\n\n### News: General\n\n- **The Daily** ([rss](http://rss.art19.com/the-daily), [url](https://www.nytimes.com/the-daily))\n- **Axios Pro Rata** ([rss](http://feeds.feedburner.com/pro-rata), [url](https://www.axios.com/tag/pro-rata-podcast)) - dan primack is a little overrated but gets good access.\n- **Stay Tuned with Preet** ([rss](https://rss.art19.com/stay-tuned-with-preet), [url](http://cafe.com/)) - preet is amazing and should someday run for office.\n- **The Intelligence** ([rss](https://rss.acast.com/theeconomisttheweekahead), [url](https://theintelligence.economist.com/))\n- **The Diplomat | Asia Geopolitics** ([rss](https://thediplomat.com/?feed=itunes&amp;podcast=asia-geopolitics), [url](http://thediplomat.com/category/podcasts/asia-geopolitics)) - i dont know why these people are so interested in asia geopolitics lol but its great to tap into their world every now and then\n    \n### News: Tech\n\n- **Exponent** ([rss](http://exponent.fm/feed/), [url](http://exponent.fm/)) - Ben Thompson and James Allworth talk through Stratechery stuff.\n- **AWS Morning Brief** ([rss](https://feeds.transistor.fm/aws-morning-brief), [url](https://www.lastweekinaws.com/))\n- **AWS Podcast** ([rss](https://d3gih7jbfe3jlq.cloudfront.net/aws-podcast.rss), [url](https://aws.amazon.com/podcasts/aws-podcast/))\n- **Techmeme Ride Home** ([rss](https://rss.art19.com/techmeme-ridehome), [url](https://art19.com/shows/techmeme-ridehome))\n- **The Indicator from Planet Money** ([rss](https://www.npr.org/rss/podcast.php?id=510325), [url](https://www.npr.org/sections/money/567724614/the-indicator))\n- **16 Minutes News by a16z** ([rss](https://feeds.simplecast.com/j9kKMsfH), [url](https://16minutes.simplecast.com/))\n- **Editor's Picks from The Economist** ([rss](https://rss.acast.com/theeconomisteditorspicks), [url](http://www.economist.com/))\n- **The Information's 411** ([rss](https://anchor.fm/s/9add758/podcast/rss), [url](https://anchor.fm/tom-dotan6))\n- **Pivot** ([rss](https://feeds.megaphone.fm/pivot), [url](https://www.vox.com/pivot-with-kara-swisher-and-scott-galloway))\n- **Above Avalon** ([rss](https://www.aboveavalon.com/podcast?format=RSS), [url](https://www.aboveavalon.com/podcast/)) - all about Apple\n- **The WIRED Podcast** ([rss](https://www.wired.co.uk/rss/podcast/wired-podcast), [url](https://www.wired.co.uk/)) - Vergecast but british\n- **The Vergecast** ([rss](https://feeds.megaphone.fm/vergecast), [url](https://www.theverge.com/the-vergecast)) - I enjoy the \"no bullshit\" tech industry chats\n    \n### News: Finance \n\n- **What Goes Up** ([rss](https://feeds.megaphone.fm/whatgoesup), [url](https://www.bloomberg.com/podcasts/what_goes_up)) - another chummy panel, no BS podcast\n- **Slate Money** ([rss](https://feeds.megaphone.fm/slatemoney), [url](http://www.slate.com/slatemoney)) - I have loved Felix Salmon from his days at Reuters.\n- **WSJ Heard On the Street** ([rss](http://feeds.wsjonline.com/wsj/podcast_heard_on_the_street))\n- **FT Alphachat** ([rss](http://rss.acast.com/ft-alphachat), [url](https://ftalphaville.ft.com/series/Alphachat))\n- **Odd Lots** ([rss](http://feeds.bloomberg.fm/BLM2009837477), [url](https://bloomberg.com/podcasts/odd_lots)) - Joe Wiesenthal is just the right mix of no bullshit finance guy but also nice and surprisingly good at singing. Tracy Alloway keeps him in check.\n- **Money Talks from Economist Radio** ([rss](https://rss.acast.com/theeconomistmoneytalks), [url](https://www.economist.com/))\n- **Snacks Daily** ([rss](http://feeds.feedburner.com/marketsnacks-daily), [url](http://www.snacks.robinhood.com/)) - for noobs but high energy and good to see what they see\n- **The Journal.** ([rss](https://video-api.wsj.com/podcast/rss/wsj/the-journal), [url](https://www.wsj.com/podcasts/the-journal))\n- **Exchanges at Goldman Sachs** ([rss](https://feeds.megaphone.fm/GLD9218176758), [url](http://www.goldmansachs.com/our-thinking/podcasts/index.html))\n- **Behind the Markets Podcast** ([rss](https://feeds.acast.com/public/shows/5b6afaddb794d5666cd13431), [url](https://businessradio.wharton.upenn.edu/programs/behind-the-markets))\n\n## Founder Chats\n\nA lot of podcasts are interviewing founders which is a mix of business and tech. So I split them out here.\n\n### VCs\n\n- **The Twenty Minute VC: Venture Capital | Startup Funding | The Pitch** ([rss](http://thetwentyminutevc.libsyn.com/rss), [url](http://www.thetwentyminutevc.com/))\n- **a16z Podcast** ([rss](https://feeds.simplecast.com/JGE3yC0V), [url](https://www.a16z.com/))\n- **Venture Stories** ([rss](http://www.spreaker.com/show/2737820/episodes/feed), [url](http://www.villageglobal.vc/))\n- **Greymatter** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:205323254/sounds.rss), [url](http://www.greylock.com/))\n- **Y Combinator** ([rss](http://feeds.backtracks.fm/feeds/ycombinator/ycombinator/feed.xml), [url](http://www.ycombinator.com/))\n- **Evolving for the Next Billion by GGV Capital** ([rss](http://ggvc996.libsyn.com/rss), [url](http://nextbn.ggvc.com/))\n- **Analyse Asia with Bernard Leong** ([rss](http://analyseasia.libsyn.com/rss), [url](https://analyse.asia/))\n\n### Founder Interview\n\n- **How I Built This with Guy Raz** ([rss](https://www.npr.org/rss/podcast.php?id=510313), [url](http://www.npr.org/series/490248027/how-i-built-this))\n- **7-Figure Small with Brian Clark** ([rss](https://www.spreaker.com/show/3469652/episodes/feed), [url](https://unemployable.com/))\n- **Below the Line with James Beshara** ([rss](https://anchor.fm/s/9f0ca04/podcast/rss), [url](https://anchor.fm/belowtheline))\n- **Startup School Radio** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:150759713/sounds.rss), [url](http://www.aaronkharris.com/))\n- **Invest Like the Best** ([rss](https://investlikethebest.libsyn.com/rss), [url](http://investorfieldguide.com/)) - surprisingly good investor/founder guests.\n- **Level Up Your Course Podcast with Janelle Allen: Create Online Courses that Change Lives** ([rss](https://feeds.simplecast.com/Wysy3LER), [url](http://zencourses.co/show))\n- **How to Start a Startup** ([rss](https://awesound.com/@ycombinator/feed/how-to-start-a-startup), [url](https://awesound.com/ycombinator/podcast/how-to-start-a-startup))\n- **Masters of Scale with Reid Hoffman** ([rss](https://rss.art19.com/masters-of-scale), [url](http://www.mastersofscale.com/)) - weirdly overproduced podcast from Reid remixing his former founder interviews\n- **Entrepreneurial Thought Leaders** ([rss](https://rss.art19.com/entrepreneurial-thought-leaders), [url](https://art19.com/shows/entrepreneurial-thought-leaders))\n- **The SaaS Podcast - SaaS, Startups, Growth Hacking &amp; Entrepreneurship** ([rss](http://conversionaid.libsyn.com/rss), [url](http://thesaaspodcast.com/))\n- **Masters in Business** ([rss](http://feeds.bloomberg.fm/BLM8864403288), [url](https://bloomberg.com/podcasts/masters_in_business))\n- **The 6 Figure Developer Podcast** ([rss](http://6figuredev.com/feed/podcast), [url](https://6figuredev.com/blog/))\n- **Scale or Die** ([rss](https://feeds.simplecast.com/UtJXer8i), [url](https://www.useproof.com/scaleordie))\n- **Product Hunt Radio** ([rss](https://feeds.simplecast.com/iCV67fGr), [url](http://producthunt.com/radio))\n- **Well Made** ([rss](https://feeds.simplecast.com/4gqLEpr7), [url](https://www.lumi.com/wellmade))\n- **Escape Velocity - with Dan Martell** ([rss](https://escapevelocitywithdan.libsyn.com/rss), [url](http://www.danmartell.com/))\n- **Subscribed Podcast** ([rss](http://customersuccess.libsyn.com/rss), [url](https://www.zuora.com/resource/podcast))\n- **Side Hustle School** ([rss](https://feeds.megaphone.fm/sidehustleschool), [url](http://sidehustleschool.com/))\n- **Mixergy - Startup Stories with 1000+ entrepreneurs and businesses** ([rss](https://mixergy.com/?feed=mixergy_feed&amp;rss_source=itunes&amp;), [url](https://mixergy.com/)) - andrew warner presses his guests on details\n- **Business of Software Podcast** ([rss](https://anchor.fm/s/12e0dce4/podcast/rss), [url](https://anchor.fm/business-of-software-podcast))\n- **The Indie Hackers Podcast** ([rss](http://feeds.backtracks.fm/feeds/indiehackers/indiehackers/feed.xml), [url](https://www.indiehackers.com/))\n- **This Week in Startups - Audio** ([rss](http://feeds.feedburner.com/twist-audio), [url](https://thisweekinstartups.com/)) - Jason is arrogant but earns it\n- **Wharton FinTech Podcast** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:176298819/sounds.rss), [url](http://www.whartonfintech.org/))\n- **Double Your Freelancing Podcast** ([rss](https://rss.simplecast.com/podcasts/219/rss), [url](https://doubleyourfreelancing.com/podcast/))\n- **The Official Saastr Podcast: SaaS | Founders | Investors** ([rss](http://saastr.libsyn.com/rss), [url](http://www.saastr.com/))\n- **Without Fail** ([rss](https://feeds.megaphone.fm/withoutfail), [url](https://www.gimletmedia.com/without-fail))\n- **UI Breakfast: UI/UX Design and Product Strategy** ([rss](https://feeds.simplecast.com/4MvgQ73R), [url](http://www.uibreakfast.com/podcast))\n- **Intercom on Customer Engagement** ([rss](https://rss.art19.com/intercom-on-customer-engagement), [url](https://art19.com/shows/intercom-on-customer-engagement))\n- **The Tropical MBA Podcast - Entrepreneurship, Travel, and Lifestyle** ([rss](https://feeds.fireside.fm/tropicalmba/rss), [url](http://www.tropicalmba.com/))\n- **China Tech Talk** ([rss](https://feeds.simplecast.com/400uRY7l), [url](https://anchor.fm/china-tech-talk))\n\n### Founder Couple\n\nA little more unstructured, but telling the story as it happens\n\n- **The Startup Chat with Steli and Hiten** ([rss](https://thestartupchat.com/feed/podcast/), [url](https://thestartupchat.com/))\n- **To Be Continuous** ([rss](https://www.heavybit.com/category/library/podcasts/to-be-continuous/feed/), [url](https://www.heavybit.com/library/podcasts/to-be-continuous/)) - Paul Biggar of Darklang, Edith Harbaugh of LaunchDarkly\n- **Startups For the Rest of Us** ([rss](https://feeds.feedblitz.com/startupsfortherestofus&amp;x=1), [url](https://www.startupsfortherestofus.com/)) - Rob Walling\n- **The Forbes Interview** ([rss](https://rss.art19.com/forbes-interview), [url](https://art19.com/shows/forbes-interview))\n- **Building Infinite Red** ([rss](https://feeds.simplecast.com/2lZvFwSE), [url](https://building.infinite.red/))\n- **Inside Intercom Podcast** ([rss](https://rss.art19.com/inside-intercom), [url](https://www.intercom.com/blog/podcasts/))\n- **Out of Beta** ([rss](https://feeds.simplecast.com/1F1xAfLc), [url](https://outofbeta.fm/))\n- **Rework** ([rss](https://feeds.transistor.fm/rework), [url](https://rework.fm/))\n- **The Art of Product** ([rss](https://feeds.fireside.fm/artofproduct/rss), [url](https://artofproductpodcast.com/))\n- **Bootstrapped Web** ([rss](http://bootstrappedweb.com/feed/podcast), [url](http://bootstrappedweb.com/))\n- **Build Your SaaS &#x2013; bootstrap in 2020** ([rss](https://feeds.transistor.fm/build-your-saas), [url](https://saas.transistor.fm/))\n\n    \n## Misc Topics\n\nStuff that didnt fit anywhere else :)\n\n- **The Psychology Podcast** ([rss](http://psychologypodcast.libsyn.com/rss), [url](http://www.thepsychologypodcast.com/)) - general academic psychology\n- **Psychology of Video Games Podcast** ([rss](https://www.spreaker.com/show/3329893/episodes/feed), [url](https://www.spreaker.com/show/psychology-of-video-games-podcast_1)) - games are applied psychology\n- **The Happiness Lab with Dr. Laurie Santos** ([rss](https://feeds.megaphone.fm/happinesslab), [url](https://www.pushkin.fm/)) - positive psychology\n- **Babbage from Economist Radio** ([rss](https://rss.acast.com/theeconomistbabbage), [url](https://www.economist.com/))\n- **Steal the Show with Michael Port** ([rss](http://michaelport.libsyn.com/rss), [url](http://stealtheshow.com/)) - speaking by professional speakers\n- **Get Together** ([rss](https://feeds.simplecast.com/Du5O1PAl), [url](https://www.gettogether.fm/))\n- **Intelligence Squared** ([rss](http://rss.acast.com/intelligencesquared), [url](http://www.intelligencesquared.com/))\n- **The Meb Faber Show** ([rss](http://mebfaber.libsyn.com/rss), [url](http://mebfaber.libsyn.com/podcast))\n- **The Science of Social Media** ([rss](https://anchor.fm/s/89e0c70/podcast/rss), [url](https://buffer.com/podcast))\n- **More Than Hashtags** ([rss](https://feed.pippa.io/public/shows/more-than-hashtags), [url](http://www.twitter.com/HashtagsPod))\n- **Akimbo: A Podcast from Seth Godin** ([rss](http://rss.acast.com/akimbo), [url](http://www.akimbo.link/))\n- **The TED Interview** ([rss](https://feeds.feedburner.com/TedInterview), [url](https://www.ted.com/podcasts/ted-interview))\n- **TED Talks Daily** ([rss](http://feeds.feedburner.com/TEDTalks_audio), [url](https://www.ted.com/talks))\n- **Artificial Intelligence (AI Podcast) with Lex Fridman** ([rss](https://lexfridman.com/category/ai/feed/), [url](https://lexfridman.com/ai/)) - has become more of a generalist podcast recently, but gets the top of the field\n- **Freakonomics Radio** ([rss](https://www.omnycontent.com/d/playlist/aaea4e69-af51-495e-afc9-a9760146922b/14a43378-edb2-49be-8511-ab0d000a7030/d1b9612f-bb1b-4b85-9c0c-ab0d004ab37a/podcast.rss), [url](http://freakonomics.com/))\n- **seanwes podcast** ([rss](https://seanwes.com/feed/podcast), [url](http://seanwes.com/podcast))\n- **Mike's Notes** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:77097804/sounds.rss), [url](http://thewaiterspad.com/))\n- **TED Radio Hour** ([rss](https://www.npr.org/rss/podcast.php?id=510298), [url](https://www.npr.org/programs/ted-radio-hour/))\n- **Data Skeptic** ([rss](http://dataskeptic.libsyn.com/rss), [url](https://dataskeptic.com/))\n- **The Economist Asks** ([rss](https://rss.acast.com/theeconomistasks), [url](https://www.economist.com/))\n- **Naval** ([rss](https://naval.libsyn.com/rss), [url](https://nav.al/))\n- **Linear Digressions** ([rss](http://feeds.feedburner.com/udacity-linear-digressions?format=xml), [url](http://lineardigressions.com/))\n- **The Knowledge Project with Shane Parrish** ([rss](http://theknowledgeproject.libsyn.com/rss), [url](https://fs.blog/the-knowledge-project/))\n- **Intelligence Squared U.S. Debates** ([rss](https://feeds.megaphone.fm/PNP1207584390), [url](http://intelligencesquaredus.org/))\n- **Conversations with Tyler** ([rss](http://cowenconvos.libsyn.com/rss), [url](http://www.conversationswithtyler.com/))\n- **The Portal** ([rss](https://rss.art19.com/the-portal), [url](https://art19.com/shows/the-portal))\n- **Talking Points** ([rss](https://rss.acast.com/thepointsguy), [url](https://thepointsguy.com/))\n- **Lingthusiasm - A podcast that's enthusiastic about linguistics** ([rss](https://feeds.soundcloud.com/users/soundcloud:users:237055046/sounds.rss), [url](https://lingthusiasm.com/))\n- **EconTalk** ([rss](http://files.libertyfund.org/econtalk/EconTalk.xml), [url](http://www.econtalk.org/))\n- **The History Chicks** ([rss](https://rss.art19.com/the-history-chicks), [url](https://art19.com/shows/the-history-chicks))\n- **The Art of Manliness** ([rss](https://www.omnycontent.com/d/playlist/aaea4e69-af51-495e-afc9-a9760146922b/6081eee7-c459-4e12-a1ab-aadc000fc4a7/413a6904-4d72-4be8-9421-aadc000fc4ba/podcast.rss), [url](https://www.artofmanliness.com/))\n- **Your Undivided Attention** ([rss](https://feeds.simplecast.com/rZ0cYk12), [url](https://your-undivided-attention.simplecast.com/))\n- **Simplify** ([rss](https://feeds.simplecast.com/J_wTfaPG), [url](http://www.blinkist.com/simplify))\n\n### Fun\n\n- **Wait Wait... Don't Tell Me!** ([rss](https://www.npr.org/rss/podcast.php?id=344098539), [url](http://www.npr.org/programs/wait-wait-dont-tell-me/)) - Peter Sagal is amazing\n- **Ask Me Another** ([rss](https://www.npr.org/rss/podcast.php?id=510299), [url](https://www.npr.org/programs/ask-me-another/)) - i love Ophira\n- **The Weekly Planet** ([rss](https://rss.acast.com/theweeklyplanet), [url](https://play.acast.com/s/theweeklyplanet)) - aussie's shit talking is the best\n- **Change My View** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:265133677/sounds.rss), [url](http://soundcloud.com/changemyview))\n- **The Good Place: The Podcast** ([rss](https://rss.art19.com/the-good-place-the-podcast), [url](https://art19.com/shows/the-good-place-the-podcast))\n- **Office Ladies** ([rss](https://www.omnycontent.com/d/playlist/aaea4e69-af51-495e-afc9-a9760146922b/75a86d39-9e0e-4e9a-b948-aae301805fe6/514362cf-31b4-4ed2-af40-aae301805ffd/podcast.rss), [url](https://www.earwolf.com/show/office-ladies/))\n- **Friday Night Comedy from BBC Radio 4** ([rss](https://podcasts.files.bbci.co.uk/p02pc9pj.rss), [url](http://www.bbc.co.uk/programmes/p02pc9pj))\n- **The West Wing Weekly** ([rss](http://feeds.feedburner.com/westwingweekly), [url](http://thewestwingweekly.com/)) - ended now. but still amazing\n- **Harry Potter and the Sacred Text** ([rss](http://feeds.harrypottersacredtext.com/harrypottersacredtext), [url](http://harrypottersacredtext.com/))\n- **CLUBLIFE** ([rss](https://feeds.acast.com/public/shows/clublife-by-tiesto), [url](http://www.tiesto.com/))\n- **Eelke Kleijn | DAYS like NIGHTS Radio** ([rss](http://feeds.soundcloud.com/users/soundcloud:users:1525250/sounds.rss), [url](http://www.eelkekleijn.nl/))\n- **Popcast** ([rss](https://rss.art19.com/music-popcast), [url](http://www.nytimes.com/podcasts/music-popcast))\n- **Coffee Break Spanish** ([rss](http://rss.acast.com/coffeebreakspanish), [url](http://radiolingua.com/coffeebreakspanish/))\n- **The Jordan Harbinger Show** ([rss](http://www.podcastone.com/podcast?categoryID2=1237), [url](https://www.podcastone.com/the-jordan-harbinger-show))\n- **The Soundtrack Show** ([rss](https://feeds.megaphone.fm/HSW2193473754), [url](https://www.soundtrackpodcast.com/))\n- **x72D7;&#x718A;&#x6709;&#x8BDD;&#x8BF4;** ([rss](https://feeds.fireside.fm/beartalk/rss), [url](http://voice.beartalking.com/))\n- **Waveform: The MKBHD Podcast** ([rss](http://feeds.feedburner.com/WaveformWithMkbhd), [url](https://www.studio71.com/us/podcasts/))\n- **Lights Camera Barstool** ([rss](https://mcsorleys.barstoolsports.com/feed/lights-camera-barstool), [url](https://www.barstoolsports.com/shows/lights-camera-barstool))\n- **Travel Genius** ([rss](https://feeds.megaphone.fm/travelgenius), [url](https://www.bloomberg.com/travel-genius))\n- **The Modern Mann** ([rss](http://rss.acast.com/themodernmann), [url](http://www.modernmann.co.uk/))\n- **Pop Culture Happy Hour** ([rss](https://www.npr.org/rss/podcast.php?id=510282), [url](https://www.npr.org/series/pop-culture-happy-hour/))\n- **LeVar Burton Reads** ([rss](https://www.omnycontent.com/d/playlist/aaea4e69-af51-495e-afc9-a9760146922b/d7b69935-6f2f-4116-b8df-aae900107d55/573b320f-9f59-467a-be34-aae900107d84/podcast.rss), [url](https://art19.com/shows/levar-burton-reads))\n- **Tell Me Something I Don't Know** ([rss](https://www.omnycontent.com/d/playlist/aaea4e69-af51-495e-afc9-a9760146922b/cdd95643-fbbc-4f63-aee2-aa7701712ce4/190dee2d-a936-45c4-9357-aa7701712ce9/podcast.rss), [url](http://www.tmsidk.com/))\n- **So, Here's My Story...** ([rss](http://soheresmystory.libsyn.com/rss), [url](http://soheresmystory.com/))\n- **Song Exploder** ([rss](http://feed.songexploder.net/songexploder), [url](http://www.songexploder.net/))\n- **Switched on Pop** ([rss](https://feeds.megaphone.fm/switchedonpop), [url](http://www.switchedonpop.com/))\n- **The Hamilcast: A Hamilton Podcast** ([rss](https://thehamilcast.libsyn.com/rss), [url](https://www.thehamilcast.com/))\n- **Twenty Thousand Hertz** ([rss](http://feeds.megaphone.fm/20k), [url](http://www.20k.org/))\n- **Tiny Desk Concerts - Audio** ([rss](https://www.npr.org/rss/podcast.php?id=510306), [url](https://www.npr.org/tinydeskconcerts))\n    \n### To Skim\n\nHigh volume things that are occasionally good but I really skim\n\n- **The Talk Show With John Gruber** ([rss](https://daringfireball.net/thetalkshow/rss), [url](https://daringfireball.net/thetalkshow)) - i hate the rambling but ben thompson swings by every now and then\n- **The Tim Ferriss Show** ([rss](https://rss.art19.com/tim-ferriss-show), [url](https://tim.blog/podcast)) - it's Tim.\n- **Channel 9** ([rss](http://channel9.msdn.com/Feeds/RSS/mp3), [url](https://channel9.msdn.com/)) - a glimpse into microsoft-land\n- **BxJS Weekly** ([rss](https://anchor.fm/s/e8806f4/podcast/rss), [url](https://bxjs.dev/)) - decent js coverage from someone who has way too much time doing this :)\n- **The Moment with Brian Koppelman** ([rss](http://feeds.megaphone.fm/themomentwithbriankoppelman), [url](http://www.cadence13.com/)) - celebs, writers\n- **All Songs Considered** ([rss](https://www.npr.org/rss/podcast.php?id=510019), [url](https://www.npr.org/allsongs)) - occasionally boring but sometimes really good\n- **The Joe Rogan Experience** ([rss](http://joeroganexp.joerogan.libsynpro.com/rss), [url](https://www.joerogan.com/)) - celebs\n- **Whiskey Ginger w/ Andrew Santino** ([rss](https://feeds.simplecast.com/EV5uPq3u), [url](http://andrewsantino.com/)) - celebs"
    },
    {
      "slug": "faves-se-daily",
      "data": {
        "technical": false,
        "title": "Swyx Faves: Software Engineering Daily",
        "slug": "faves-se-daily",
        "categories": [
          "Faves"
        ],
        "date": "2019-11-11T00:00:00.000Z"
      },
      "content": "\n> \"How to become a 10x engineer: listen to @software_daily everyday.\" - [Amjad Masad](https://mobile.twitter.com/amasad/status/956603016513167360)\n\nI am an intense fan of [Jeff Meyerson](https://twitter.com/the_prion) and [Erika Hokanson](https://twitter.com/erikawh0)'s SE Daily. I even [guest hosted once 😅](https://softwareengineeringdaily.com/2017/08/09/state-of-javascript-with-sacha-greif/).\n\nSE Daily is a tech infovore's wet dream. It is a general podcast on software engineering, but a few things set it apart:\n\n- It is an hour long, daily Q&A podcast\n- It covers everything from data eng to crypto to container stuff to React to GDPR to devops to IPOs\n- Guests are extremely senior: recent guests include billionaires (Ben Horowitz), hot CEOs (Alexandr Wang, Vlad Magdalin, Ellen Chisa), senior ex FB engs (Nick Shrock, Pete Hunt)\n- In recent 12-18 months, Jeff has started adding lengthy intros setting context for the interview, which helps situate people unfamiliar with the domain. This briefing is already worth more than the price of admission ($0).\n- Jeff himself displays a high degree of engagement and research in his questions\n- Jeff has a policy of starting generally (often the first question is a point-blank \"What is _______\"?) and then going into specifics over the hour, with the design that the first third or so is more relevant to generalists, who may then jump off to the next thing\n\nA non exhaustive list of their greatest hits:\n\n- FB sr. engs: [TomO](https://mobile.twitter.com/tomocchino/status/1153323729889312769), [Dan Abramov](https://softwareengineeringdaily.com/wp-content/uploads/2019/05/SEDFB01-Dan-Abramov.pdf), [Nick Schrock](https://mobile.twitter.com/swyx/status/1130867062182748168), [Max Stoiber](https://mobile.twitter.com/software_daily/status/943783207861964800) (not FB but close enough), [Keith Adams](https://softwareengineeringdaily.com/2019/07/15/facebook-php-with-keith-adams/), [Jon Kleinberg](https://softwareengineeringdaily.com/2016/09/06/facebook-relationship-algorithms-with-jon-kleinberg/)\n- Google sr. engs: [Ciera Jaspan on Monorepos](https://mobile.twitter.com/software_daily/status/1131123790975578112), [Eric Brewer](https://mobile.twitter.com/software_daily/status/1121701703672377344), [John Looney](https://softwareengineeringdaily.com/2017/06/16/google-early-days-with-john-looney/), [Adrian Cockcroft](https://softwareengineeringdaily.com/2016/07/06/schedulers-with-adrian-cockcroft/)\n- AWS sr. engs: [Deepak Singh](https://mobile.twitter.com/swyx/status/1115474551490711552), [Danilo Poccia](https://mobile.twitter.com/danilop/status/930409223883776000), [Nader Dabit](https://softwareengineeringdaily.com/2018/08/24/build-faster-with-nader-dabit/), [Lee Atchison](https://softwareengineeringdaily.com/2016/07/08/scalable-architecture-with-lee-atchison/)\n- Microsoft: [Chad Fowler](https://softwareengineeringdaily.com/2018/08/07/future-architecture-with-chad-fowler/)\n- Uber: [Rob Skillington](https://softwareengineeringdaily.com/2019/02/12/ubers-monitoring-platform-with-rob-skillington/), [Evan Klitzke](https://softwareengineeringdaily.com/2016/09/09/ubers-postgres-problems-with-evan-klitzke/)\n- Airbnb: [Surabhi Gupta](https://softwareengineeringdaily.com/2018/10/08/airbnb-engineering-with-surabhi-gupta/), [Gabriel Peal](https://softwareengineeringdaily.com/2018/07/27/react-native-at-airbnb-with-gabriel-peal/)\n- Cryptocurrency: [Gavin Wood](https://mobile.twitter.com/swyx/status/1067116266123640833), [Erik Voorhees](https://mobile.twitter.com/software_daily/status/979732949821198336)\n- Stripe: [Julia Evans](https://softwareengineeringdaily.com/2018/06/05/profilers-with-julia-evans/)\n- Founders: [ListenNotes](https://mobile.twitter.com/software_daily/status/1147068874644447232), [Serverless](https://mobile.twitter.com/swyx/status/1064789331292766208), [SampleFocus](https://mobile.twitter.com/software_daily/status/811874170262921216), [Mastodon](https://mobile.twitter.com/swyx/status/992453214070026240), [Darklang](https://softwareengineeringdaily.com/2019/10/21/dark-lang-with-ellen-chisa-and-paul-biggar/), [Cruise](https://softwareengineeringdaily.com/2019/10/01/cruise-self-driving-engineering-with-mo-elshenawy/), [Diffbot](https://softwareengineeringdaily.com/2018/10/31/diffbot-knowledge-graph-api-with-mike-tung/), [Airtable](https://softwareengineeringdaily.com/2019/05/10/airtable-with-howie-liu/), [Gitlab](https://softwareengineeringdaily.com/2019/03/15/gitlab-with-sid-sijbrandij/), Parse founders: [Ilya](https://mobile.twitter.com/swyx/status/1168654041745899523) and [Charity](https://mobile.twitter.com/software_daily/status/1167000195881721856), [Netlify](https://softwareengineeringdaily.com/2019/03/08/netlify-with-mathias-biilmann-christensen/), [Zeit](https://softwareengineeringdaily.com/2019/01/10/zeit-serverless-cloud-with-guillermo-rauch/), [Mesosphere](https://softwareengineeringdaily.com/2019/01/08/multicloud-with-ben-hindman/), [Comma.ai (geohotz)](https://softwareengineeringdaily.com/2018/08/08/self-driving-engineering-with-george-hotz/), [Auren Hoffman](https://softwareengineeringdaily.com/2018/04/18/safegraph-with-auren-hoffman/), [Justin Kan](https://softwareengineeringdaily.com/2017/11/10/legal-technology-with-justin-kan/), [Brendan Eich](https://softwareengineeringdaily.com/2017/03/31/webassembly-with-brendan-eich/), [CSAllen](https://softwareengineeringdaily.com/2017/01/30/making-money-online-for-software-engineers-with-courtland-allen/) (and [again](https://softwareengineeringdaily.com/2016/11/04/indie-hackers-with-courtland-allen/)), [Joshua Browder](https://softwareengineeringdaily.com/2016/12/02/robot-lawyer-with-joshua-browder/), [Dev.to](https://softwareengineeringdaily.com/2016/06/02/software-editorialism-practical-devs-ben-halpern/), [Ruby on Rails](https://softwareengineeringdaily.com/2016/01/13/the-evolution-of-rails-with-david-heinemeier-hansson/), [Triplebyte](https://softwareengineeringdaily.com/2015/12/23/hiring-engineers-with-ammon-bartram/), [Erlang](https://softwareengineeringdaily.com/2015/11/02/erlang-with-joe-armstrong/), [FreeCodeCamp](https://softwareengineeringdaily.com/2015/10/28/free-code-camp-with-quincy-larson/), [Repl.it](https://softwareengineeringdaily.com/2019/09/06/repl-it-browser-coding-with-amjad-masad/)\n- VCs: [Ben Horowitz](https://softwareengineeringdaily.com/2019/11/04/leadership-with-ben-horowitz/), [Brian Singerman](https://mobile.twitter.com/swyx/status/1005655291936100354), [Tomasz Tunguz](https://softwareengineeringdaily.com/2019/07/26/software-ipos-with-tomas-tunguz/), [Ryan Hoover](https://softwareengineeringdaily.com/2019/04/19/products-with-ryan-hoover/), [Martin Casado](https://softwareengineeringdaily.com/2019/01/28/software-chasms-with-martin-casado/), [Frank Chen](https://softwareengineeringdaily.com/2018/05/25/autonomy-with-frank-chen/) , [Chris Dixon](https://softwareengineeringdaily.com/2017/06/30/computer-logic-with-chris-dixon/), [Peter Levine](https://softwareengineeringdaily.com/2017/02/03/the-end-of-cloud-computing-with-peter-levine/)\n- Crypto: [Jackson Palmer](https://softwareengineeringdaily.com/2018/03/02/dogecoin-with-jackson-palmer/), [Andreas Antonopoulous](https://softwareengineeringdaily.com/2019/08/16/bitcoin-ecosystem-with-andreas-antonopoulos/)\n- Machine Learning/NLP: [Word2Vec](https://softwareengineeringdaily.com/2017/09/13/word2vec-with-adrian-colyer/) \n- Other Podcasters: [Lex Fridman](https://softwareengineeringdaily.com/2017/07/28/self-driving-deep-learning-with-lex-fridman/), [Russ Roberts](https://softwareengineeringdaily.com/2016/07/14/economics-of-software-with-russ-roberts/), [Scott Hanselman](https://softwareengineeringdaily.com/2015/12/16/hanselminutes-with-scott-hanselman/), [Sonal Chokshi](https://softwareengineeringdaily.com/2019/08/09/a16z-podcasting-with-sonal-chokshi/)\n- [Haseeb Qureshi is his own category on Salary Negotiation](https://mobile.twitter.com/swyx/status/951125642745204736) and [on Bubbles](https://softwareengineeringdaily.com/2019/04/12/bubbles-with-haseeb-qureshi/) and [on Debugging](https://softwareengineeringdaily.com/2016/11/19/debugging-stories-with-haseeb-qureshi/), and [on career transition from Poker](https://softwareengineeringdaily.com/2015/10/23/poker-to-programming-with-haseeb-qureshi/)\n- Misc: [Scala at Duolingo](https://mobile.twitter.com/swyx/status/943570465624416256), [Matt Klein](https://softwareengineeringdaily.com/2019/07/25/envoy-mobile-with-matt-klein/) (on [scaling Lyft too](https://softwareengineeringdaily.com/2018/11/02/scaling-lyft-with-matt-klein/)), [Sheng Liang](https://softwareengineeringdaily.com/2019/06/19/infrastructure-wars-with-sheng-liang/), [Management with Will Larson](https://softwareengineeringdaily.com/2019/06/14/elegant-puzzle-with-will-larson/), [Notebooks at Netflix](https://softwareengineeringdaily.com/2019/01/15/notebooks-at-netflix-with-matthew-seal/), [Serverless with Yan Cui](https://softwareengineeringdaily.com/2017/08/04/serverless-startup-with-yan-cui/), [SEO with Danny Sullivan](https://softwareengineeringdaily.com/2017/06/23/search-engine-land-with-danny-sullivan/), [Data Breaches with Troy Hunt](https://softwareengineeringdaily.com/2016/08/12/data-breaches-with-troy-hunt/), [Jeff Atwood](https://softwareengineeringdaily.com/2016/03/14/state-programming-jeff-atwood/), [Jessica Kerr](https://softwareengineeringdaily.com/2015/09/09/functional-programming-with-jessica-kerr/)\n- Articles: [Why Airbnb is Moving off of React Native](https://softwareengineeringdaily.com/2018/09/24/show-summary-react-native-at-airbnb/), [Recommendation Systems](https://softwareengineeringdaily.com/2018/10/24/recommendation-systems-by-gokhan-simsek/), [React and GraphQL at the NY Times](https://softwareengineeringdaily.com/2018/10/22/react-and-graphql-at-the-nytimes/)\n- Talks: [Jeff's You are Not a Commodity](https://softwareengineeringdaily.com/2016/08/07/you-are-not-a-commodity/) talk\n\nWhile SEDaily has primarily been a podcast, there is also a Slack community (I'm not active), a news site, a mobile app, and some meetups. I think more could be done here to build community.\n\nI was recently surprised to learn that Jeff doesn't view SE Daily as something that will last forever. It felt like the intense commitment needed to run a daily in depth podcast isn't something you bet on halfway. But Jeff is absolutely hedging (c.f. his [indiehackers](https://www.indiehackers.com/podcast/114-jeff-meyerson-of-software-engineering-daily) and [changelog](https://changelog.com/podcast/368) interviews). Having been through some life trauma myself, I can't blame him."
    },
    {
      "slug": "friendcatchers",
      "data": {
        "technical": false,
        "title": "Friendcatchers",
        "slug": "friendcatchers",
        "subtitle": "Win Friends Online While You Sleep",
        "categories": [
          "Advice"
        ],
        "date": "2020-02-03T00:00:00.000Z",
        "description": "Patrick McKenzie's simple concept for making friends on the Internet."
      },
      "content": "\nA **\"Friendcatcher\"** is something you offer for free, that helps you catch friends.\n\nBecause it is passive, it is an asset. Just like a [Dreamcatcher](https://legomenon.com/dreamcatcher-meaning-legend-history-origins.html) can be hung over your bed once and catches bad dreams for you through the night, a \"Friendcatcher\" (*one word, not hyphenated*) catches friends for you for the rest of your career.\n\nThe concept comes from [Patrick McKenzie](https://twitter.com/search?q=from%3Apatio11%20friend-catcher&src=typed_query), who in turn says it came from his mom. As loud and well known as he is, this concept doesn't seem widely known, and that is a pity. I first heard of it at [Microconf](https://twitter.com/microconf), and it's unintentionally informed my most successful online projects so far.\n\n## Friendcatching for Dummies\n\n[In the words of Patrick's mom](https://youtu.be/PtmUJye7t4c?t=744):\n\n> Patrick, you should learn to cook. Don't learn to cook because you want to eat food - learn to cook because if you learn to cook you will have an excuse for the rest of your life to bring people over to your house.\n>\n> **No one who knows how to cook will ever lack for friends.**\n\nPatrick's mom wasn't talking about content strategy, or customer research, but she might as well have been.\n\n[In my notes from his talk](https://twitter.com/swyx/status/992100623934935041):\n\n> Platform Before Product.\n> \n> Build the things that will allow you to engage an audience and improve it over time. Included in this: Friendcatchers.\n> Friendcatchers are small, contained lists, essays or apps that solve resonant (emotional, relevant), tractable, underserved problems.\n\nThe ideal Friendcatcher is (thanks to [Christian Genco](https://microconf.gen.co/patrick-mckenzie/) and the [Microconf video](https://youtu.be/PtmUJye7t4c?t=822)):\n\n- **Tractable**: Solvable within the blogpost, guide, cheatsheet, or mini-app form factor you have picked.\n- **Resonant**: People say \"F*** yeah this is what I need!\" when they see your thing. Pay attention to pain.\n- **Underserved**: 101 guides are overdone. Do the 201 guide. Cover intersections of technologies.\n\nBasically: **\"Fill holes in the Internet\".**\n\n## What a Friendcatcher does for you\n\n*(This is swyx talking)* A Friendcatcher performs these functions:\n\n- Solves someone's problem.  Some indications: \n  - Reader's Google journey stops at you. \n  - Reader repeatedly returns to refer to your thing.\n  - Reader tells you.\n- Establishes your expertise and association with the problem\n- Makes the reader look smart/funny/informed when they share your thing\n  - It is \"Retweetable\" - doesn't contain miscellaneous/unrelated junk, is timeless\n- Gives the reader a benefit, which you can cash in on in future\n  - [Reciprocity is weaponized karma](https://www.influenceatwork.com/principles-of-persuasion/)\n- Does its job without your involvement after creation\n  - This is [Leverage](https://www.youtube.com/watch?v=GtyWqj2ESiQ), a form of [Productize Yourself](https://nav.al/productize-yourself)\n\n## \"Learn in Public\" Friendcatchers\n\nA **\"Learn in Public\" Friendcatcher** also invites readers to ask about things you don't answer, and to correct things you got wrong. This is **open source, collaborative knowledge.**\n\nIn terms of [Learning Gears](https://www.swyx.io/writing/learning-gears), Friendcatchers are produced by Connectors, not Explorers. You know something others don't, and build the resources that Explorers will find that serve as landmarks and maps for their journey.\n\nCreating a good Friendcatcher is great, because it is something you can pour resources into continually refining and making better, and continues working even if you step away. This makes a lot more mileage out of your daily efforts than other forms of content, for example things that are news related or a less ambitious talk.\n\n## Examples of Friendcatchers\n\nIncludes some of mine. Note I wasn't consciously going for \"friendcatchers\"\n\n- [Patrick's Salary Negotiation blogpost](https://kalzumeus.com/2012/01/23/salary-negotiation/) wins him 500k friends/year \n- Guide to broad, tightly scoped problem - the one people will use for years\n  - Hasura's [The Ultimate Guide to handling JWTs on frontend clients (GraphQL)](https://blog.hasura.io/best-practices-of-using-jwt-with-graphql/)\n  - https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/\n  - [Learn in Public](https://www.swyx.io/writing/learn-in-public/)\n- Calculator which replaces Excel. *\"Presenting a useful bit of math in a format that can be used by people who can't code is unreasonably effective. There's no calculation too trivial!\"*\n  - [Kissmetrics free tool](https://kissmetrics.com/growth-tools/ab-significance-test/) helps them get business\n- Definitive curated list of resources. not listicles. *Plant a flag on the internet of a definitive list of everything great and outstanding in this field*\n  - [Josh Kaufman's definitive list of the best business books](https://personalmba.com/best-business-books/)\n  - https://github.com/sindresorhus/awesome\n  - https://github.com/sw-yx/concurrent-react-notes\n  - https://github.com/sw-yx/spark-joy/\n- Cheatsheet\n  - [Amy Hoy's ruby on rails cheatsheet](http://www.slash7.com/cheats/rails_files_cheatsheet.pdf)\n  - https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\n- The \"Nugget\"\n  - Steve Schoger's 🔥 Tweets https://twitter.com/i/events/994601867987619840\n- Blogging\n  - [Patrick in 2010](https://news.ycombinator.com/item?id=1002272): *Blogging is also a friendcatcher, sometimes even literally for me. It gets you opportunities you would not have if you did not blog. I am here at a SEO-skeptical company getting paid handsomely to make them scads because I blogged.* \n\n## Sources\n\n- He has been talking about this for 11 years: https://hn.algolia.com/?dateRange=all&page=0&prefix=false&query=friendcatchers&sort=byPopularity&type=comment\n- 2014: https://training.kalzumeus.com/newsletters/archive/content-marketing-strategy\n  - *Fog Creek and Basecamp (formerly known as 37signals) both were extraordinarily successful with using writing as a friendcatcher both for their philosophies of the world and, secondarily, for their paid products. Many SaaS companies have cottoned onto the fact that writing (and podcasting, and making videos, and the like) is often less expensive than leasing traffic from Google on a monthly basis. Unfortunately, many make mistakes in tactics and strategies which blunt the good that writing can do for their audience and their business.*\n- 2016: https://businessofsoftware.org/2016/07/hiring-at-scale-patrick-mckenzie-starfighter-bos-usa-2015/\n  - Slides: https://www.slideshare.net/marklittlewood/bos2015-patrick-mckenzie-patio11-ceo-starfighter-hiring-at-scale\n  - *Who here sells to developers in some capacity? So lots of the folks. Here is a great offer I received from Keen IO the other day. They said, hey, we notice you’re getting started on Keen IO recently. It’s an API which shows analytic stuff and he said, we notice you’re not quite up and running in production with Keen yet. Would you like to pair programme with one of us? We’ll help you implement it in your, in your product and get it up and running in production.*\n- 2017: https://twitter.com/patio11/status/850576942982086657\n  - *I'm strongly bullish on creating friendcatchers that spread. I question the wisdom of doing it for other people's companies.*\n- 2018: https://twitter.com/patio11/status/968993368108777478\n  - *There is substantial value in free “friendcatchers” which one uses as marketing for never-free offerings. Note that you do have to be intentional about how you turn attention for the friendcatcher into sales leads.*\n- 2018: https://microconf.gen.co/patrick-mckenzie/\n  - Video: https://www.youtube.com/watch?v=PtmUJye7t4c&list=WL&index=5&t=4s\n  - *: If you know how to cook (a friend-catcher from Patrick's mom), you'll never lack for friends. If you build something that solves problems for people, you'll never lack people to talk to who have problems.*\n  - The ideal friend-catcher\n  - Great forms of friend-catchers\n  - Get their email\n  - Reactions:\n    - https://cowriters.app/words/tech-that-lasts-40-years-133365c9b1405934cd\n    - https://sw-yx.js.org/2018/05/02/microconf-day2\n"
    },
    {
      "slug": "good-enough",
      "data": {
        "technical": false,
        "title": "Good Enough",
        "subtitle": "The Importance of Satisficing over Maximizing",
        "slug": "good-enough",
        "categories": [
          "Principles"
        ],
        "date": "2020-02-21T00:00:00.000Z",
        "description": "In general, you move faster and feel a lot less stress once you realize - You don't need \"the best\", you just need \"good enough\"."
      },
      "content": "\nThe other day, I [twote](https://twitter.com/swyx/status/1221125270989692928):\n\n> In general, you move faster and feel a lot less stress once you realize:\n>\n> You don't need \"the best\", you just need \"good enough\".\n> Looking for:\n> \n> \"the best\"\n> - obsessing over benchmarks\n> - caring what influencers think\n> - keeping up with new releases\n> \n> \"good enough\"\n> - what YOU need done\n> - what YOU know well\n> - what YOU enjoy\n> \n> The more reversible the decision, the faster you should move.\n\nThis was borne out of answering yet another beginner question on /r/Reactjs on what was the best library, the best course, the best framework. \n\nThe problem with being a beginner is you don't even know that these are bad questions.\n\nSo I think we all could do a better job of framing engineering and life as [satisficing](https://en.wikipedia.org/wiki/Satisficing) rather than [maximizing](https://www.psychologytoday.com/us/blog/science-choice/201506/satisficing-vs-maximizing) operations.\n\n## The Problem with Seeking \"The Best\"\n\nWe spend a lot of time seeking \"The Best\" of something:\n\n- schools\n- job/salary\n- home\n- city\n- partner\n- framework\n\n**Happiness**: Seeking the best only to find you have ended up with the second best is a recipe for disappointment. You end up comparing long feature checklists looking for the most amount of green. Most of which you don't need. Even picking something, anything, gives you anxiety because you fear missing out.\n\n**Cooperation**: It transforms the world into a zero-sum finite game rather than a positive-sum infinite game.\n\n**Efficiency**: It is also ridiculously inefficient. The corollary of the Pareto principle is that the last 20% of something is the most expensive - and that's what you have to sweat if you must seek \"the best\" all the time. It's fine to seek the best - just know that you're going to incur a cost for disproportionately less absolute (though relative) gain.\n\n**Agency**: By the way, people game \"best-seekers\" all the time, by defining for you what \"best\" is. Who wants to be Mayor on Foursquare? Who can compete to get the most subscribers on YouTube? Which wait-service staff will be Employee of the Month? Games to give fake status to people who live in the system, by people who profit off the system. If you seek \"good enough\", you reclaim your own agency.\n\n\"Good Enough\" is, well, good enough."
    },
    {
      "slug": "h1b1",
      "data": {
        "technical": false,
        "title": "Singapore H1B1 Tips",
        "slug": "h1b1",
        "categories": [
          "Reflections"
        ],
        "date": "2018-08-01T00:00:00.000Z"
      },
      "content": "\n> Aug 2019 edit: I don't know the exact date I wrote this but it was [originally on /r/sg](https://www.reddit.com/r/singapore/comments/7nflav/h1b1_visa_ama/) about 1yr ago. Please also read this blogpost from /u/omakaselife! https://medium.com/@Ashleylim/navigating-the-h1b1-visa-process-4c8e459c4b96 for 2019 tips\n\nHello. I noticed [this thread](https://www.reddit.com/r/singapore/comments/5rf594/h1b1_visa/) and realized theres not much content on here relating to the h1b1. I have done it 2 times and am about to get my 3rd. I am not a lawyer, I'm just a fellow Singaporean who has had a few jobs in the US. So I may not have all the answers but just wanted to put up a post in case pple have questions on the process and maybe others who know more can chip in.\n\nsome prior art:\n\n- [This quora post](https://christinang89.quora.com/5-steps-to-file-for-H-1B1-Singapore-Visa-yourself)\n- [This blog post](http://blog.hguochen.com/guide/2014/11/22/My-H1B1-experience/)\n\nare the only two \"regular human\" resources i have found online. would be glad to learn more.\n\nsome things that have mattered to me:\n\n- yes i have a masters and bachelor's from the US. cant speak to any other educational background\n- my first time i was with a big company which hired a big law firm to do things for me. my other two times were very much \"DIY\".\n- i worked in a 20 person, 2 yr old startup in the US and they got an LCA for me while I got a lawyer for about 2.5k through upwork which i paid for. it is a myth that you need to be an established company to sponsor a h1b1.\n- if you are working with a big firm that outsources this stuff to a law company they typically have you prepare a whooole bunch of supporting documents to have in original and duplicate before you show up to the embassy. this is of course nice to have but i have never once needed it in an interview. so it really is not the end of the world if you dont have it\n- yes you really have to go to a SingPost SAM machine and pay the us\\$190. its sketchy as hell.\n- choosing the supposedly faster \"drop box\" option delayed my processing by a week because they rejected me from the drop box without stating a reason and asked me to come in for an interview after.\n- schedule those interviews early if you want to leave asap!! availabilities can be two weeks out. and then it takes them a week or so to mail ur passport to the phillipines and then back to you. meanwhile you'll know if its been approved so you can go ahead and firm up your travel dates by then.\n- (not strictly h1b1 related) paying US taxes and social security and all that really cuts into the salary. im in new york so theres state and city tax too. the number may look higher than what ur getting elsewhere but the taxes come accordingly.\n\nForgot to mention. once you have your DS160 filled out (it looks intimidating but can be finished in 1-2hrs) then you book your US embassy appointment here: <https://ceac.state.gov/ceac/> This is a fucking old ass website and is an embarrasment to the US government and i would gladly fix it for them for free but unfrotunately thats life. anyway.\n\nat the bottom of the main booking form they ask u for a Petitioner's name, receipt number, start date and expiration date. this is an oudated field that is no longer in use. fill in whatever u want but for receipt number it ONLY accepts a \"dummy receipt number\" that is \"ABC0000000000\". this is straight up what the support center will say. if you try to fill in what is a COMMON SENSE thing which is the MRV receipt number you will get an error saying \"Petition Receipt Number: Format is incorrect. Please enter the receipt number without dashes (-)\". Which is not even making sense. i fucking lost 4 days to this piece of shit because i forgot what i did last time. i hope this helps someone else because i kena this before and this time around i kena again. mfw.\n\n(btw you only really need the MRV receipt number at the screen after that when you actually book the appointment -\nits the long autogenerated number (starting with 8 at the time of posting) that you get from the PDF that you used to pay at the Singpost SAM kiosk. sketchy as fuck, ugh.)\n"
    },
    {
      "slug": "jobs-of-js-build-tools",
      "data": {
        "technical": false,
        "title": "The Many Jobs of JS Build Tools",
        "subtitle": "For new JS developers",
        "description": "A discussion of why JS developers use build tools like Webpack and what we do with them, for new JS developers.",
        "slug": "jobs-of-js-build-tools",
        "categories": [
          "Tech"
        ],
        "started": "2019-12-22T00:00:00.000Z",
        "date": "2020-01-06T00:00:00.000Z"
      },
      "content": "\n_Essay status: mostly baked, sat on this for about 3 weeks and got some amount of peer review_\n\nOne of my regrets in [my recent SE Daily interview](https://www.swyx.io/speaking/sedaily-nocode) was my rather poor, panicked description of \"Why Webpack\" and \"Why Gatsby\". Jeff, the host, doesn't do much frontend coverage, whereas I have lived and breathed this stuff for the past 2+ years.\n\nIt felt rather like that phenomenon of how \"Fish have no word for Water\" - Water just _is_. Having to justify the existence of Water from first principles called on explanation muscles I rarely use. And then when I checked Webpack's [Why Webpack](https://webpack.js.org/concepts/why-webpack/) docs, I felt it focused mostly on modules and didn't spend enough time on the other important jobs that build tools provide for us.\n\nI'd like another shot at explaining this.\n\n## Table of Contents\n\n## Build Tools are Optional\n\nThe first thing to acknowledge is that build tools (which imply having a \"build step\" before deploying code, instead of directly being able to go from source code to deploy) aren't technically required.\n\nJavaScript is meant to be an [interpreted language](https://en.wikipedia.org/wiki/Interpreted_language) - write some in a `<script>` tag or in browser console, and it runs. No mandatory compile step unlike some other languages. So, then, to put a build step - that kinda looks like a compile step - in front of it evidently takes something away from that benefit.\n\nSome people I greatly admire, like [Luke](https://twitter.com/lukejacksonn/status/1208473242903687178?s=20) and [Brian](https://twitter.com/brianleroux/status/1115376303631298560), write their apps entirely without a build step. The universal result of doing this is lightning fast deploy times.\n\n## Only Scripts\n\nI wasn't around for much of this history, but as best as I can tell, build tools came to JavaScript primarily because we wanted a sane way to reuse code.\n\nFor almost 20 years since creation in 1995, reusable JavaScript code looked something like this:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\"></script>\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\"></script>\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n<script src=\"magnific-popup/jquery.magnific-popup.js\"></script>\n```\n\nVariables are scoped to each file, so in order to make a script that depended on another script, you had to throw them on the global `window` object:\n\n```js\nwindow.MyScript = /* etc */\n```\n\nand then the subsequent script would access that magic global on the window:\n\n```js\nvar MyScriptCore = window.MyScript\nconsole.log(MyScriptCore())\n```\n\nThis is all kinds of bad - causing a namespace pollution problem, and requiring scripts to be loaded in the exact right order or face inscrutable `undefined is not a function` errors. What we really wanted was **modules**, rather than scripts.\n\nI will not dwell further on the importance of modules - refer to [Why Webpack](https://webpack.js.org/concepts/why-webpack/) and [Why Would I Use a Webpack?](http://tinselcity.net/whys/packers) if you need more convincing.\n\n## Task Runners\n\nRelying on script CDNs introduced security and latency costs, so the alternative was to _download_ the code and glue them together in the right way to create one (or more) custom JS bundles entirely within your control and hosted on your infrastructure. To gloss over a huge amount of development in the space (that I don't know much about), \"task runners\" arose to automate this process for you - [Grunt](https://gruntjs.com/), [Gulp](https://gulpjs.com/), [Broccoli](https://broccoli.build/).\n\nBut something else also happened at the same time - server-side JavaScript became a thing.\n\n## Multiple Targets, Multiple Assets: the rise of Bundlers\n\nSince [introduction in 2009](https://blog.risingstack.com/history-of-node-js/), Node paved the way for Server-side JavaScript, with `npm` becoming the de facto package manager for Node packages, but eventually all JavaScript. Developers naturally want to reuse code across Node and the browser, and this caused a rather unfortunate rift in the community between different module specifications [CommonJS](https://requirejs.org/docs/commonjs.html) (from the Node camp) and [AMD](https://en.wikipedia.org/wiki/Asynchronous_module_definition) (from the browser people).\n\nThe job of task runners quickly expanded to help developers build to these different build targets, which is where \"task runners\" eventually gave way to \"bundlers\" like [Browserify](http://browserify.org/) and [Webpack](http://webpack.js.org/)\n\n> Important caveats: [Fred Schott](https://twitter.com/FredKSchott/status/1216858767410622464) notes that this account may overattribute causality - but it isn't disputed that Browserify and Webpack were necessary enablers of \"universal\" or \"isomorphic\" JavaScript. Also, the chronology overlaps a lot - [Mike Sherov](https://twitter.com/mikesherov/status/1216875477627031552) notes that bundlers atop like RequireJS and Closure Compiler predated some task runners like Grunt and Gulp.\n\nWe realized that the act of concatenating scripts requires building a dependency graph and managing any namespace conflicts via static analysis. Where \"task runners\" mostly stopped at concatenating files per your explicit instructions, bundlers can use ASTs to statically analyze imports, ensure everything is initialized in the right order, and produce a minimal number of bundles for optimized loading.\n\nTo facilitate static analysis of dependency graphs, Webpack pioneered the `import` syntax, which has since been standardized into ESModules (here's [Lin Clark on ESModules](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)) and begun healing the divide between the various module specifications.\n\nIncidentally, the job of task runners were also chipped away as package managers, primarily [npm](http://npmjs.com/) but also [bower](https://bower.io/), built in simple and effective scripting to their CLI's. The similarity and overlapping responsibilities [caused much confusion](https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack) but hopefully I have given a good accounting here.\n\nToday, Webpack is in wide use for apps and metaframeworks (tools that bundle other tools to lessen the pain of configuration) like `create-react-app`, Next.js and Gatsby. [Rollup](https://rollupjs.org/) is in second place and is widely used for building _libraries_ as opposed to apps, partially for [historical reasons](https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c) but its hard reliance on ES Modules lets it build smaller bundles at the cost of [some incompatibility](https://nitter.net/swyx/status/1200381421174558720#m). [Parcel](https://parceljs.org/) is the newest kid on the block (launched Dec 2017), aiming for a batteries-included approach with parallelizable, origin-agnostic graph crawling.\n\nWriting web apps often involves coordinating non-JS assets, like images and css files. It's often better to co-locate related assets with their associated code, than to have to manage them in separate folders. Webpack made it a norm to simply `import Image from './image.png'` and `import 'style.css'` inside of a JavaScript file to include these for bundling. Yes, you're \"importing\" non-JS assets into a JavaScript file, and this is Webpack magic [made possible by its loaders](https://webpack.js.org/loaders/).\n\nA final, notable outcome of JavaScript being run both on the server and client is the rise of Server-side Rendering that \"hydrate\" into Clientside Apps - variously known as \"Isomorphic apps\" or, simply, \"SSR\". [Next.js and other Metaframeworks](#metaframeworks---reducing-many-jobs-to-one) take advantage of this for speed, SEO, and a unified JavaScript framework based approach to writing sites and apps (and all the shades of gray between the two).\n\n## Multiple Targets, Multiple Languages: the rise of Transpilers and Compile-to-JS\n\nThe other thing about clientside JavaScript is the incremental rollout of new language features. [ES6 was released in 2015](https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015), a -huge- update that comprised over a decade of work and argument on the language. It made JavaScript a lot more tolerable to write serious apps in.\n\nOn one hand, people wanted to use this syntax right away (or even before release), but they were handcuffed by the fact that they would have to wait for the various JavaScript engines to implement them, and _then_ for the individual browser updates to roll out to billions of users. That would take forever.\n\nSo [Traceur](https://github.com/google/traceur-compiler) and eventually [Babel](https://babeljs.io/) arose to allow people to write modern JavaScript, but that would \"transpile\" (compile from JavaScript to JavaScript) that code to the lowest common denominator understandable by all the engines the developer chooses to target. Similarly for new APIs (as opposed to new syntax, which Babel handles), you need to [polyfill](<https://en.wikipedia.org/wiki/Polyfill_(programming)>) them with tools like [core-js](https://github.com/zloirock/core-js).\n\nYou technically could run these transpilations on their own, but more often than not you were including them somewhere in the plugin chain of your bundler for the creation of your final output JavaScript.\n\nOne issue that divided the community for a long time was whether you should transpile _only your code_ or whether you should transpile _all code including your code's dependencies and so on_. With the former, you risked your app ugly-crashing if the dependencies weren't transpiled to your target browsers (hurting developer experience). The inverse was also a problem - if your dependencies preemptively transpiled to browsers you didn't really care about, their code was also _a lot bigger_ than you actually needed (hurting user experience). \n\nWith the latter, you took your fate in your own hands - at the cost of much longer build times. IMO the consensus has recently shifted to the latter, but with passionate disagreement - [more reading here](https://github.com/facebook/create-react-app/issues/1125#issuecomment-426120762). A final important note on JS compatibility - With the advent of evergreen browsers and the undying nature of legacy browsers, it is now common to use the [module/nomodule](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/) pattern and build twice (one bundle for each group of browser targets, to ensure optimal size for evergreen browsers -and- maximum compatibility for legacy browsers).\n\nOther non-standardized additions to JavaScript gained popularity as well. [React added JSX](https://reactjs.org/docs/introducing-jsx.html) as a way of keeping the HTML-like authoring experience of writing components inside JavaScript files. [Ractive](https://github.com/ractivejs/component-spec), [Vue](https://vuejs.org/v2/guide/single-file-components.html) and [Svelte](http://svelte.dev/) adopted Single File Components that lean on bundlers to compile to JS, CSS, and sometimes HTML. [Babel-Macros](https://www.swyx.io/speaking/babel-macros/) put metaprogramming and compile-time execution inside of Babel.\n\nBy the way - If you're gonna be writing make-believe JavaScript and compiling to JavaScript anyway, **why keep writing JavaScript**? [CoffeeScript](https://coffeescript.org/) led the way to adding a Ruby-like developer experience, eventually supplanted by ES6. [TypeScript](http://typescriptlang.org/) and [Flow](https://flow.org/) added static type annotations and inference atop existing JavaScript syntax. [ReasonML](https://reasonml.github.io/), [Purescript](http://www.purescript.org/), [Elm](https://elm-lang.org/) and [ClojureScript](https://clojurescript.org/) abandoned that familiarity in favor of stronger typing and more functional paradigms. Of these Compile-to-JS breeds, TypeScript currently polls highest at ~60% adoption in [recent surveys](https://2019.stateofjs.com/javascript-flavors/).\n\nAgain - you can compile-to-JS all of these independently, but more likely than not you're also going to want to tie this work to a step in your overall bundler workflow.\n\n## Production Optimizations\n\nThe other job of task runners and eventually bundler plugins, apart from all this **module**, **target**, and **language** related work, is all production optimizations that were usually stuck on to the build pipeline. (Not core to bundling, but usually coupled with it) Here is a nonexhaustive list of optimizations in rough order of importance:\n\n- Reduce JS bundle size: [Strip out comments and minify JavaScript variable names](https://webpack.js.org/plugins/terser-webpack-plugin/). [Google Closure Compiler](https://developers.google.com/closure/compiler/docs/api-tutorial3) deserves special mention as best-in-class here although it is not native to the Webpack ecosystem. You can also [do the same for CSS](https://github.com/NMFR/optimize-css-assets-webpack-plugin) - in fact, utility-first CSS frameworks like [Tailwind](https://tailwindcss.com/docs/installation/#webpack) rely on build tools stripping out unused classes.\n- [Code Splitting](https://webpack.js.org/guides/code-splitting/): Making it trivial to reduce _initial_ bundle size, outputting multiple JavaScript chunks that are only loaded on demand\n- [Image and Font Optimization](http://images.guide/) - these can be very large raw files that you can downsample to just the quality/glyphs you actually use. However, if you stick a bunch of image processing into your build process, especially without caching, you slow it down. Gatsby-Transformer-Sharp does a lot of pre-emptive image processing that you may wish to avoid - [caching can help](https://www.npmjs.com/package/netlify-plugin-gatsby-cache). I [favor one-time work](https://www.swyx.io/writing/jamstack-og-images) but the best approach is probably to use an Image CDN like Cloudinary or [Netlify Large Media](https://www.netlify.com/products/large-media/).\n- [Prerendering or Server Side Rendering](https://github.com/chrisvfritz/prerender-spa-plugin) - so that first-loads of HTML show content instead of having to download and parse JS to be rendered clientside.\n- [Creating HTML files](https://webpack.js.org/plugins/html-webpack-plugin/) that load your generated assets optimally: so you don't have to\n- [Inlining Critical CSS](http://developers.google.com/speed/docs/insights/OptimizeCSSDelivery) - so pages show up with important styles already loaded\n- [Injecting environment variables](https://webpack.js.org/plugins/environment-plugin/) - so you can vary Constants used in your code based on production/staging/other environments\n- [PWA](https://blog.bitsrc.io/what-is-a-pwa-and-why-should-you-care-388afb6c0bad) creation - plugins for an offline-first/cached speed ([1](https://github.com/NekR/offline-plugin), [2](https://github.com/arthurbergmz/webpack-pwa-manifest))\n- [Content Hashing](https://webpack.js.org/guides/caching/) - for cachebusting - less relevant with some modern CDN configurations, but still can be relevant for browser caching scenarios\n- [Tree Shaking](https://webpack.js.org/guides/tree-shaking/) and [Dead Code Elimination](https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80): static analysis for stripping out unused code also for the purpose of reducing JS bundle size - but overrated in terms of actual impact\n\nAs you can see, enough of these are critical to modern web apps that build tools often become critically important for most teams and framework communities.\n\n## Developer Experience\n\nSecondary to Production Optimizations (which impact end users), modern bundlers also offer niceties for Developer Experience (which end users don't see):\n\n- Automatic Dependency Collection - Old school Task Runners and even Google Closure Compiler require you to manually declare all dependencies upfront. Bundlers like Webpack automatically build and infer your [dependency graph](https://webpack.js.org/concepts/dependency-graph/) based on what is imported and exported.\n- [Dev Server](https://webpack.js.org/configuration/dev-server/) - for Single Page Apps and JAMstack apps, there is no running Node server to run locally, so the bundler boots one up for local testing.\n- [Hot Module Replacement](https://webpack.js.org/concepts/hot-module-replacement/) - reduces the feedback loop of code changes by swapping out modules _while an app is running_, without a full reload. Reliant on having a running Dev Server. A higher level of hot reloading preserves the **state** of _components_ while changing them, not just modules - [this is an active area of development in React](https://overreacted.io/my-wishlist-for-hot-reloading/) and [a first class citizen in Elm](https://www.youtube.com/watch?v=Agu6jipKfYw). (See Addendum for more details)\n- [Source Maps](https://bendyworks.com/blog/getting-started-with-webpack-source-maps) - production code isn't human readable after all the production optimizations - bundlers can map source to production code, and browsers can request and display errors pointing to the original source if given a sourcemap. Useful both in production and in development.\n- [Bundle Analyzer/Visualizer plugin](https://www.npmjs.com/package/webpack-bundle-analyzer) - the modern app uses too many modules to manually account for. Visualization and analysis can help identify the biggest points to work on first. [Formidable Labs makes a nice Dashboard](https://github.com/FormidableLabs/webpack-dashboard) for this.\n\n## Metaframeworks - reducing Many Jobs to One\n\nSpecifically for frontend developers using frameworks, all of the above can be a lot to setup just to say \"Hello World\" with best practices. It is natural to want to [subsume these build tools under a single abstraction](https://increment.com/development/the-melting-pot-of-javascript/) to form a new starting point. Dan Abramov, with inspiration from Ember CLI, led the way on this in React with `create-react-app` (this was [the subject of my second ever talk](https://www.swyx.io/speaking/creating-cra)).\n\nIn particular, Server-side Rendering is a pain point and of critical importance for performance while using a front-end framework, leading to [Gatsby](https://gatsbyjs.org/) and [Next.js](https://nextjs.org/) (React), [Gridsome](https://gridsome.org/) and [Nuxt.js](https://nuxtjs.org/) (Vue), and [Scully](https://www.netlify.com/blog/2019/12/16/introducing-scully-the-angular-static-site-generator/) (Angular).\n\nEven stepping outside the frontend web developer role, there is a case for abstracting over build tools, as with [TSDX](https://github.com/jaredpalmer/tsdx/) which helps write TypeScript libraries.\n\n## Conclusion - The Pandora's Box\n\nA small and passionate part of the webdev community is working very hard to make build tools more optional than they are today. Given that modules are the primary/original reason for the rise of build tools, and have since been [standardized in ECMAScript](https://exploringjs.com/es6/ch_modules.html), each runtime is working on making them usable without a build tool. [ES Modules arrived in browsers in 2017](https://jakearchibald.com/2017/es-modules-in-browsers/), and [Node.js unflagged them in Nov 2019](https://twitter.com/mylesborins/status/1194375751774064647) (putting them on track for [widespread use in Node 14 in 2020](https://github.com/nodejs/Release)). [Pika](https://www.pika.dev/registry/) and [Rollup](https://github.com/rollup/rollup) are banking especially hard on the universal, ESM-enabled future.\n\nHowever, legacy browsers still exist, and legacy, battletested code is still in wide use. I'm also not sure how transitive dependencies are handled ([the import map proposal](https://twitter.com/swyx/status/1208820201623437312) may help! but... how would you build your import maps?). But the overriding issue for the \"no-build-tools\" future is that the bar has been raised _so much higher_ than just \"we want modules in JavaScript\", as the rest of this blogpost has painted. We still want asset management, static types, prerendering, image optimization, and whatever else we take for granted in modern web apps. So despite the progress in ESM-everywhere, I don't see a clear path toward it materially impacting JavaScript in the near term.\n\nHere's [V8's advice](https://v8.dev/features/modules#bundle):\n\n> With modules, it becomes possible to develop websites without using bundlers such as webpack, Rollup, or Parcel. It’s fine to use native JS modules directly in the following scenarios:\n>\n> - during local development\n> - in production for small web apps with less than 100 modules in total and with a relatively shallow dependency tree (i.e. a maximum depth less than 5)\n\n[Addy Osmani put it like this](https://twitter.com/addyosmani/status/932494593832075264):\n\n> Imo module bundlers will be necessary for prod builds for a good while yet. In a few years, ES modules perf + modulepreload + H2 Push + Cache Digests might give us a compelling story, but it's a long road ahead. Modules for dev/authoring format may take off in short term.\n\nBuild Tools in JavaScript are a Pandora's Box. We opened them, and from what little I can see, they are here to stay. Hopefully this has been a good intro to what jobs they perform in JavaScript.\n\n## Related Reads\n\nOther reads I recommend on this topic:\n\n- https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack\n- https://www.robinwieruch.de/webpack-advanced-setup-tutorial\n- https://nystudio107.com/blog/an-annotated-webpack-4-config-for-frontend-web-development\n- https://webpack.js.org/concepts/why-webpack/\n- [Blogpost: Why would I use a Webpack?](http://tinselcity.net/whys/packers)\n- [Talk: Unbundling the JavaScript module bundler by Luciano Mammino](https://www.youtube.com/watch?v=WGlT921ixx4&feature=youtu.be)\n- [Webpack and Rollup: the same but different](https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c)\n- [Comparing bundlers: Webpack, Rollup & Parcel](https://medium.com/js-imaginea/comparing-bundlers-webpack-rollup-parcel-f8f5dc609cfd)\n- [ESModules: A Cartoon Deep Dive](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n- [ESModules Support vs Build Tools](https://www.contentful.com/blog/2017/04/04/es6-modules-support-lands-in-browsers-is-it-time-to-rethink-bundling/)\n- [Kyle Simpson on the divergence between Human-written JS and Machine-run JS](https://www.youtube.com/watch?v=lDLQA6lQSFg)\n- [Sean Larkin's Webpack Academy Workshop](https://docs.google.com/presentation/d/1RuTDSvfaEFBFQ-3OiyxtuPTaGhv-xv7OG4jt5mpIdUw/edit#slide=id.g3762099682_0_46) starts with 1 hour on Why Webpack - [view on Frontend Masters](https://frontendmasters.com/courses/webpack-fundamentals/)\n\n## Thanks\n\nThanks to [Sean Larkin](https://twitter.com/theLarkInn/), [Mark Erikson](https://twitter.com/acemarke), [Robin Wieruch](https://twitter.com/rwieruch) and [Joe Previte](https://twitter.com/jsjoeio) for reviewing early drafts of this!\n\n## Addendum on Hot Reloading\n\nI don't have much experience in the details of HMR. These are notes from [Mark Erikson](https://twitter.com/acemarke):\n\n- Module reloading: recompile, push new code to client, allow app to do something\n- \"Plain\" client reloading: just reimport and use affected modules. For React, this is mostly just reimport <App> and re-render.\n- \"Clever\" reloading: attempting to preserve state in the component tree, but this requires much more complex work. React-Hot-Loader works by using Babel to insert `http://module.hot.accept()` and \"proxy components\" around every component it can identify, and moving the state up into the proxy component, but this is fragile. That's why the new \"Fast Refresh\" capability is actually half-built into React itself, with bundler-specific use of the APIs.\n\n[His full explanation of Webpack vs React's Hot reloading is on his blog.](https://blog.isquaredsoftware.com/2017/08/blogged-answers-webpack-hmr-vs-rhl/).\n"
    },
    {
      "slug": "js-tooling",
      "data": {
        "technical": false,
        "title": "Why JavaScript Tooling Sucks",
        "slug": "js-tooling",
        "description": "JavaScript Tooling is just too hard to use, and it's not your fault.",
        "categories": [
          "Tech",
          "JavaScript"
        ],
        "date": "2019-09-15T00:00:00.000Z"
      },
      "content": "\n**JavaScript Tooling is just too hard to use, and [it's not your fault](https://www.theverge.com/2017/5/25/15686870/walt-mossberg-final-column-the-disappearing-computer).**\n\nIf you clicked on this title ready to agree, you are part of the problem. Don't worry, so am I. I work on JavaScript Tooling and I think my tools can be a lot better. \"[Let he who is without sin](https://en.wiktionary.org/wiki/let_him_who_is_without_sin_cast_the_first_stone)\" and all that.\n\nIf you hate-clicked on this title ready to do an Epic Takedown™ of me, don't worry, I don't 100% agree with the premise of the title either. But you can probably find examples in your life where tooling sometimes _does_ suck. As JavaScripters, we spend a lot of time learning how to fix and paper over our tools and less time asking why. (This is rational behavior and the rest of this post proposes some reasons)\n\nIf you clicked on this title with an open mind, you probably don't exist, but welcome anyway.\n\nThese are hypotheses, not presented as objective facts. **I'm trying to explain, not justify**. All my blogposts come with an implicit \"In My Current Opinion\" disclaimer and I am constantly looking to change my mind (someday I'll get around to putting this in a \"Terms of Use\" because some people don't understand the social contract around personal blogging and [epistemic status](https://devonzuegel.com/post/epistemic-statuses-are-lazy-and-that-is-a-good-thing)). There are also massive benefits to JS tooling I don't cover.\n\n## Table of Contents\n\n## JavaScript wasn't made for this\n\n_JavaScript Tooling Sucks because JavaScript wasn't designed with business critical tooling and apps in mind_\n\nJS was famously [created in 10 days](https://en.wikipedia.org/wiki/JavaScript), and back then almost nobody saw that [software would eat the world](https://a16z.com/2011/08/20/why-software-is-eating-the-world/) and then [browser software would eat operating system software](https://blog.jurgen.ca/post/46428131771/a-poorly-debugged-set-of-device-drivers/amp) and then [JavaScript would move out of the browser into operating systems](https://www.youtube.com/watch?v=ztspvPYybIY).\n\nJS' culture derives very much from its original design decisions. Being easy to get up and running opened doors for many programmers, but with it come all the flaws, right down to undefined property access not causing a runtime error and causing the famous \"`undefined` is not a function\" errors. Why I assert original sin has cultural weight is because of the enormous, sometimes morally charged, resistance to adding compile time checks for JavaScript. There are even people who [refuse to use Prettier](https://mobile.twitter.com/evilpingwin/status/1158404492586573824).\n\n[Web Assembly](https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/) may one day free up people who rather not use JavaScript from using JavaScript, but until then, they're stuck here with the rest of us.\n\nWhich leads to...\n\n## Massive Community\n\n_JavaScript Tooling Sucks because it wasn't made for just you alone_\n\nAs the largest non-spreadsheet programming language on Earth, you are guaranteed to have near-religious schisms in everything from code style to software delivery to testing approaches. One of the chief tools is even called Babel, for crying out loud! (This is deliciously ironic [given the story it references](https://en.wikipedia.org/wiki/Tower_of_Babel), on many layers)\n\nA huge community is usually a plus, but people also forget it can have downsides. Having to make everybody happy when it literally means EVERYBODY is a very different and sometimes conflicting proposition from \"do one thing well\".\n\nThe simplest way to make people happy is to add config after config, so that's what we do. However this way lies config hell and still doesn't help tools interoperate. I like Jared Palmer's approach of [paying attention to composition and the 80% usecase](https://palmer.net/blog/render-control). More people should also try tools like [`patch-package`](https://www.npmjs.com/package/patch-package) for maintaining low cost forks.\n\n> 📺Dan Abramov tells the story of [how the Melting Pot of JavaScript came to be](https://increment.com/development/the-melting-pot-of-javascript/) (you can watch the [talk version here](https://www.youtube.com/watch?v=G39lKaONAlA)) and how the way out is less configuration and more toolkits\n\nA huge community is great, until it leads to...\n\n## Moving Target, Moving Goalposts\n\n_JavaScript Tooling Sucks because it wasn't made for one target runtime_\n\nWe don't agree on whether JS libraries should work in both the browser and in Node.\n\nWe don't agree on whether JS tools should [transpile their own dependencies](https://github.com/facebook/create-react-app/issues/1125#issuecomment-264214478).\n\nWe don't agree on how to deal with legacy browsers. As time goes on, this will become less and less of an issue, but we're still in the thick of it. [Create-React-App has had ongoing debates about differential serving for 2 years](https://github.com/facebook/create-react-app/search?q=nomodule+is%3Aissue&type=Issues).\n\nWe don't agree on how to test our tools, if they're tested at all. Kent C Dodds is [doing a lot here with Testing JavaScript](https://testingjavascript.com/) but vast swathes of our tools are completely untested, much less tested on different environments like in Windows (sorry!). Try arguing if we are better off having no tool than having an untested (but working!) tool.\n\nUltimately, we don't agree on the problems our tools are meant to solve. At one extreme, this manifests as beginners asking what's the difference between A and B (which are frequently mentioned as alternatives) and their maintainers replying that A and B are \"orthogonal\". At the other extreme, this causes experts in A (who care a lot about one thing) to yell at experts in B (who are trying to do something else).\n\nThe moment we even come close to agreeing on something, goalposts move, and something else comes up to disagree on. We rather tear each other down on small things we disagree on, more than support and remind each other about the big things we all want, causing burnout.\n\nWhich brings me to...\n\n## No One is in Charge\n\n_JavaScript Tooling Sucks because it is bottom-up, not top-down_\n\nJavaScript is more than just the language, yet there is no \"Javascript SDK\" or \"standard library\".\n\n[TC39](https://github.com/tc39) governs the language (it has flaws - I can't find a source but I think I recall someone commenting that wholistic language design shouldn't be approached on a per-feature, annually scheduled basis), but nobody controls tooling. npm had a shot, but now nobody wants them in charge of anything else. Node is extraordinarily successful, but is so mired in original sin [its creator is now working on a replacement](https://www.youtube.com/watch?v=M3BM9TB-8yA). In the spectrum of [Cathedral vs Bazaar](https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar), JavaScript embraces the Bazaar to the extreme (it also isn't alone, Python is similar, although [Anaconda](https://www.anaconda.com/distribution/) makes it a bit more cathedraic).\n\nYes, we will have a new frontend framework every so often (not every day, nor every month, stop being disingenuous, **it isn't funny making jokes about dimissing people's work without even looking at it**). Yes, we have 3-4 different bundlers that all do different things. Yes we have [file formats nobody uses](https://2ality.com/2017/05/es-module-specifiers.html) (yet?). Yes, we download [3-liner packages 93 million times a month](https://github.com/jonschlinkert/isobject/blob/master/index.js).\n\nThis is extremely wasteful and duplicative and [insecure](https://medium.com/hackernoon/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5) and exhausting and hard to learn.\n\n**We know.** It's also the best way to ensure we have tried and tested ideas before committing them forever to some monolithic thing everyone has to use. If some tool goes bad, we have another waiting in the wings. If the alternative thing is materially better, the incumbent will initially ignore it but eventually try to catch up. It may fail to do so.\n\nI'm not saying JavaScript is a real, perfect-information meritocracy. [\"Use the Right tool for the job\" is a cop-out](https://twitter.com/swyx/status/1171549189064613888) - the vast majority of us don't have time or risk tolerance to try anything other than what everyone else uses.\n\nWhich in fact means that we don't bother checking if we're using the right tool, and can't because our tools use thousands of tools...\n\n## We _Can't_ Take Ownership of Our Tools\n\n_JavaScript Tooling Sucks because it is stacks on stacks of brittle abstraction_\n\nI'll break the writing style of this column so far by relating a recent incident. I can do this because I don't have an editor tut-tutting at me. If I lose you, though, [let me know.](https://twitter.com/swyx)\n\nBy default, all `npm install`s assign packages with the caret (`^`) which matches minor and major versions of a package, assuming that packages follow [semver](https://www.jvandemo.com/a-simple-guide-to-semantic-versioning/). However, [semver is a social contract](https://twitter.com/sophiebits/status/1063601210144387072) - trivially, if any users rely on bugs, then a bugfix is a breaking change, so semver relies on the definition of a bug, which has the very technical definition of \"software not working as we thought we intended\". More importantly, semver isn't enforced in any meaningful way when published, so it can't be relied upon when downloading. Yet that is exactly what we do when we use the caret by default.\n\n[`event-stream` happened](https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident), and a package was removed even though it was on the register, so all JS tooling and apps built on that tooling started failing. Package management security is above my paygrade, but the reason it had so much _impact_ was because of a single character: `^`.\n\nAll my continuously deployed JavaScript builds broke that day, because `flatmap-stream` depended on `event-stream`, and that is in `fs-events`, which everyone depends on, so [Vue](https://github.com/vuejs/vue-cli/issues/3039), [React](https://github.com/facebook/create-react-app/issues/5908), [Angular](https://github.com/angular/angular/pull/27274), and probably everyone else went down. How could a supposedly competitive, massive, varied ecosystem have a single point of failure? I panicked a bit, but knew how to fix it. I imagine a lot of beginners were turned off that day. I imagine some people (like me) had demos to show people my software and ran into this at the first try and immediately got a bad impression like it was my fault.\n\nIt kind of is, but it kind of isn't. npm could fix my scenario above by making default installations pinned versions (apparently the Go ecosystem does this), but that doesn't address the real root of the problem - I didn't know what I was using. That day was the first day I even heard of `flatmap-stream`.\n\nHere is where I get heretical. I'm supposed to tell you it's my fault. That implies it's your fault too, if you've had it happen to you. I originally titled this section \"We _Don't_ Take Ownership of our Tools\".\n\nI changed my mind.\n\nA lot of prominent developers like to say that you should treat `node_modules` like your own code, but that just doesn't ring true, and makes it sound like it's your fault. It's near impossible ([Brian from Begin](https://twitter.com/brianleroux) comes to mind as an exception) to own your entire dependency chain all the way down. [Thomas Young was the Last Man Who Knew Everything](https://en.wikipedia.org/wiki/The_Last_Man_Who_Knew_Everything) and he died in 1829.\n\nRich Harris, He who Kicks Hornet Nests for Fun, also pointed out [the flaws of the small modules approach](https://medium.com/@Rich_Harris/small-modules-it-s-not-quite-that-simple-3ca532d65de4). In particular, he picks on discoverability and software integrity: \"**Everyone has an idea about how to make it easier to find needles in the haystack, but no-one bothers to ask what all this hay is doing here in the first place.**\" He was largely ignored - how do you stop an absolutely massive community in its tracks?\n\nEven if you're the model developer, you are not an island. You will work with people who are not model developers, and who don't own their tools. Therefore, it is a statistical eventuality that you will start using tools you don't know you use. I call this the Hashimoto lemma, after one of [Mitchell Hashimoto's reponses on Why Multicloud](https://www.reddit.com/r/devops/comments/91afzz/why_multicloud/?utm_source=share&utm_medium=ios_app).\n\nBasically, if our entire toolchain/productivity strategy relies on owning every dependency just to be reliable, we should probably explore other ideas. (To be clear: I don't have one. Just thinking out loud.)\n\n## We Treat Toolmakers Like Tools\n\n_JavaScript Tooling Sucks because we don't make them and we don't treat people who make them like people_\n\nYou don't have to know _everything_, but that doesn't mean not caring about the makers behind the tools you use. But this is a real problem, and it is an _epidemic_.\n\nIt may not feel that way, but you are probably an extreme outlier if you spend significant time making JavaScript tooling. The download numbers don't lie. TypeScript has 412. Webpack has 547 contributors. Babel has 757. React has 1331. All of these tools have at least 3 orders of magnitude more users than contributors. And you know there's even a power law within _that_ where most of those contributors just fixed typos and docs (not that this is bad at all!).\n\nIf you are a regular JavaScript Jane or TypeScript Tom, you don't work on tooling. You don't even know or care who the maintainers of the tools you use are. You work at a Fortune 500 company, or a struggling startup, or a flashy digital agency, or you're between jobs and trying to change careers, and you just want what everyone wants: _get stuff to show up on screen_!\n\nThis asymmetry means that a _vast_ other-ness applies when users of tools interact with makers of tools. And because of the relative knowledge difference, as well as just general support goodwill, it's the makers of the tools who often have to bend over backwards to help users diagnose and even fill out basic bug reports.\n\nThis problem extends even more pervasively than bad bug reports, though. JavaScript educators make millions teaching how to use tools, while the toolmakers beg for dollars on Patreon and GitHub. Engineering managers and CTOs make _multiple_ millions while being \"above all this\" and obsessing over [pretty charts](https://www.thoughtworks.com/radar/tools). If you've ever, like them, had a \"wait and see\" approach to tools instead of diving in and checking it out and helping, you've been a part of the problem, like I have. Tools, especially baby ones, don't just get better on their own accord. They need **you** to get better.\n\nWhat's worse is, _there is a rational explanation for all of this_. There _really is_ value in putting together a bunch of things you didn't make and selling it as a cohesive package. It _really is_ wise to be more cautious in some tech choices. But for goodness sake don't stop trying things out and contributing back. And don't ever feel smug about treating toolmakers like tools.\n\nIt's endemic that more junior engineers work on tools while senior engineers tend to sit back and thing about bigger picture things. However I wish we could pass knowledge down better. It's too glib to say \"back in my day we knew how to do software _right_! Kids these days just don't know how to code!\" (Usually leading to some gatekeeping on bootcamps and degrees) It's unrealistic to expect senior people _don't_ move beyond just thinking about tools, because there is so much more to software production and management than tools. But I wish we had better ways to pass down and communicate lessons learned, instead of being snarky on social media.\n\n> 📺Jonathan Blow on [Preventing the Collapse of Civilization](https://www.youtube.com/watch?v=pW-SOdj4Kkk) - and [subsequent discussion from Rich Harris and others](https://mobile.twitter.com/Rich_Harris/status/1139967668662996995)\n\nOf course, nobody's going to change their behavior just because I wrote this, so that leads toolmakers to say... [f\\*\\*\\* you, pay me](https://vimeo.com/22053820).\n\n## Funding\n\n_JavaScript Tooling Sucks because we are still learning how to make great free open source_\n\nI saved the biggest for last. [JavaScript is 97% open source](https://medium.com/npm-inc/this-year-in-javascript-2018-in-review-and-npms-predictions-for-2019-3a3d7e5298ef#49d6), so open source's problems are JavaScript's problems.\n\n> 🗣️As an aside, 97-99% is a fun recurring number in anything to do with the commons. It corresponds to the ratio between consumers and creators of content. And also the amount of DNA we share with chimps.\n\nThe problems with open source maintainership are well documented. There are many, many, many failed experiments with getting funding for open source. (To be clear, a lot of them were bad ideas to begin with) After one of the most recent attempts, [Feross concluded that \"An open source maintainer is a startup founder but with none of the upside.\"](https://twitter.com/feross/status/1172185645705359362) This rings very true, although occasionally open source maintainers do eventually create startups around their work.\n\nSolutions I do dislike:\n\n- Advertising business models (on docs and in my console)\n- Begging on Patreon\n- Begging on Github\n- any form of financial contribution where developers pay out of their own pockets instead of their employers (if applicable)\n- Bounty systems like Gitcoin\n\nSolutions I do like:\n\n- Training (aka React Training)\n- Managed Service (Laravel Forge, Meteor Galaxy)\n- I highly recommend [Joseph Jacks' thinking on \"Open Core\"](https://medium.com/open-consensus/2-open-core-definition-examples-tradeoffs-e4d0c044da7c) and [OSS business models](https://medium.com/open-consensus/3-oss-business-model-progressions-dafd5837f2d). However, do note that all of these are forms of trading off increasingly less open cooperation and software for more money.\n\n![OSS business models](https://miro.medium.com/max/1541/1*xzERBcXu7PtNbzZ8wKM9mQ.png)\n\nMeditations on economics of open business models aside, expecting extrinsic motivation to beat intrinsic motivation is a bad bet. But we can't help it, we're addicted to it. [Dan Pink's Drive](https://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594484805) puts it best:\n\n![Extrinsic promises destroy intrinsic motivation](https://pbs.twimg.com/media/DXF5WoZW4AEfnFW?format=jpg&name=medium)\n\nWith the important caveat that basic needs are taken care of, I do fundamentally agree with DHH that **intrinsic motivation is the best way to create sustainable open source**. You may be financially successful with the OSS business model you pick, but if you are driven by external incentives, then at some point down the line your external incentives lead you to make choices and compromises that aren't to do with solving the problem you set out to solve.\n\n> 📺Do yourself a favor and watch or read DHH's RailsConf 2019 keynote on [Open Source Beyond the Market](https://m.signalvnoise.com/open-source-beyond-the-market/) to understand.\n\n## It doesn't all suck\n\n_JavaScript Tooling doesn't all suck and is much better than we used to have!_\n\nI wanted to leave you with something positive so it's clear I'm not just indiscriminately shitting on everything. There is a LOT of love for our tools today. Just in [the 2018 State of JavaScript alone](https://2018.stateofjs.com/awards/) you can see how Jest, Express, GraphQL are almost universally loved, and I can't find any mention but I'm pretty sure Yarn and Prettier are in there too.\n\nIn the most recent [State of JavaScript survey](https://2018.stateofjs.com/opinions/), _all_ the opinion polls were trending more positive. Make of that what you will:\n\n![https://pbs.twimg.com/media/EEij9ttXoAEarsq?format=jpg&name=large](https://pbs.twimg.com/media/EEij9ttXoAEarsq?format=jpg&name=large)\n\nAs to counter the individual points I made:\n\n- **Design**: JavaScript the language got a lot more serious and usable with ES6, so it is being designed as we go along. Acceptance of TypeScript has also come along nicely and stands at 63% of npm users (not that that is the solution to everything but it is better than what we had).\n- **Community**: We are getting better at establishing Codes of Conduct, GitHub implemented issue templates and reactions to prompt people to work together better. We are constantly learning about better composition and abstraction patterns in the highest stress-test of these patterns there has ever been\n- **Moving Target**: Increasing adoption of evergreen browsers are helping to offer a stable target. Although cross-browser inconsistencies still necessitate abstraction layers, their differences are far smaller and have less impact on tool choice then ever before.\n- **No One in Charge**: This is a feature, not a bug.\n- **Ownership**: I don't have ideas here.\n- **Toolmakers**: We are passing on _some_ knowledge. [Anders Hejlsberg](https://en.wikipedia.org/wiki/Anders_Hejlsberg), with his 35 years of language and tooling experience, is now working on TypeScript and training a generation of tooling engineers. We are actively passing on knowledge at developer conferences - see how [Christoph and Konstantin talk about \"Building High-Quality JavaScript Tools\"](http://talkfrom.com/video?name=building-highquality-javascript-tools), and in particular [what Christoph and team did to save Jest](https://www.youtube.com/watch?v=3YDiloj8_d0).\n- **Funding**: Although I've explained my reservations, there are plenty of initiatives to help address open source funding and they are all needed. I would follow closely [Devon Zuegel of GitHub](https://increment.com/open-source/the-city-guide-to-open-source/) and also plug my friend [Travis Fischer](https://twitter.com/transitive_bs) if you are interested in this.\n\n## Other references\n\n- Seth Godin - [Why is software so bad?](https://www.akimbo.link/blog/s-5-e-14-why-is-software-so-bad)\n"
    },
    {
      "slug": "keyboard-first",
      "data": {
        "technical": false,
        "title": "Keyboard First",
        "slug": "keyboard-first",
        "categories": [
          "Product"
        ],
        "date": "2019-09-05T00:00:00.000Z"
      },
      "content": "\nI enjoyed listening to [Des and Paul's discussion of keyboard-first apps on their podcast today](https://art19.com/shows/intercom-on-product/episodes/10ee6fbe-13ef-48c6-af5e-3477bdbe87e3). They discussed the rise of the `cmd+K` UI paradigm in apps like:\n\n- https://superhuman.com/ (Email Productivity) which i signed up for a couple months ago\n- https://linear.app/ (Issue Tracking)\n- https://height.app/ (Collaborative work)\n- https://quill.chat/ (messaging for teams)\n- Slack\n- https://getcommande.com/ (open any document)\n\nSlack calls it a quick switcher, Linear calls it a Feature Spotlight (after mac osx), Height calls it Height command.\n\nI recently prototyped an Omnibox for Netlify:\n\n![omnibox](/assets/netlify-omnibox.gif)\n\nI like this UI paradigm a lot. I think speed is only one factor of what it offers. It also offers \"constant time execution\". In that whatever I want to do, I don't have to remember or look up what the precise command is, I can just punch in Cmd+K, type in what I want, and hope that the omnibox has what you want.\n\nThey discussed:\n\n- the difference between **tool time** and **task time**. This is why the \"Superhuman of blogging\" probably won't work.\n- focus on where speed improvement will be noticeable\n- We moved away from CLI (as well as chatbots) because of discoverability\n- is it just power users? what happens to IA (Information Architecture - organizing your app's features in a menu and making them easy to find)?\n- Slack has a mix of tool and task time, bc chats are quick and multiple ongoing.\n  - Slack's IA is dead simple\n  - Intercom has messages and inbox and submenus, its much more complex\n- Speed is probably a feature not a product - hard to pitch some software purely on how fast it is\n- You can be so workflow obssessed that you overserve yourself and have a smaller market because of too many peculiarities\n\n\n## Notes from future\n\n- CLUI https://blog.repl.it/clui\n- VSCode and Chrome Devtools use Cmd + Shift + P\n- [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en) turns Chrome Keyboard navigable"
    },
    {
      "slug": "learn-in-private",
      "data": {
        "technical": false,
        "title": "How To Learn In Private",
        "slug": "learn-in-private",
        "categories": [
          "Advice"
        ],
        "date": "2020-01-17T00:00:00.000Z",
        "author": "swyx",
        "description": "Of course I don't think that everything should be public. I don't even think everyone should Learn In Public. The majority of the time you are still learning in private. Here are some thoughts on how to do it well."
      },
      "content": "\n_Essay status: Very raw, still taking additions, would like to add examples and quotes for each. Thanks to [Joe](https://twitter.com/jsjoeio), [Will](https://twitter.com/willjohnsonio) and [David](https://twitter.com/DavidWells) for comments and input._\n\nI'm known for my advice on [Learning in Public](http://swyx.io/LIP). It is easy to assume that I think everybody should put everything in public, or they are Doing Life Wrong.\n\nOf course I don't think that everything should be public. I don't even think everyone should Learn In Public, as I have taken great pains to explain in every [talk](https://www.swyx.io/speaking/learn-in-public-nyc) and [podcast](https://www.swyx.io/speaking/freecodecamp-podcast) I do.\n\nThe more realistic phrasing of \"Learn In Public\" is \"Learn More In Public\", by which I'm merely saying most people would benefit from going a little more public than \"100% Private\", which is the default for the vast majority of people. In practice, this really only means going from 0% Public to maybe 1% or 5% or 10% or 30% Public, so of course the majority of the time you are still learning in private.\n\nSo here are some thoughts on how to Learn In Private well.\n\n## Improving What Goes In\n\n**People over Content**: Follow people over content sources. When you come across a quality blog, podcast, or talk, notice the person behind it and follow what else they do. A lot of how content works these days is through aggregators, like Reddit or Hacker News, or an industry blog or podcast or conference, and the quality may vary quite a lot despite the best curation efforts. Titles and upvotes may be gamed for SEO. But a **quality person** is likely to be quality for life. You already know you are the average of the X people you spend time with - so curate those people. [RSS feeds help here.](https://nitter.net/chriscoyier/status/1214606808125341696#m)\n\nThe expanded form of this is [**Following the Graph**](https://twitter.com/swyx/status/1216519772210388992#m) - not only following people, but following the people _they_ follow (the best way to get in their heads), and tracing _back_ work histories and tracing _forward_ new workstreams. Most things are made by only a small set of prime movers and they are usually (by definition) not hard to find.\n\n**Read Good Books Cover To Cover**: Authors spend a lot of time nailing down details in books because of how permanent it is. They also spend a lot of time _organizing_ the structure and relative weight of the content with some educational goal in mind. If you come across a highly recommended book (or just one that starts off very well), do it the justice of going cover-to-cover. You may get bad chapters or sections, but you won't know til you plow through it. Particularly pay attention to endings, since people often don't make it to the end but some authors put The Good Stuff at the end. Usually this is the \"unimportant details\" that they didn't want to clutter the introduction with. This is especially relevant if you are Intermediate at whatever you're doing. Think about it: Beginners need tutorials as they give the shortest path to success, Experts just need to tinker and keep up to date, but Intermediates need context and clear explanation of details. ([My Tweets about this](https://twitter.com/search?f=tweets&q=from%3Aswyx%20cover%20to%20cover%20))\n\n**Read Source Code**: People often treat the open source movement as \"code that I can use for free\", forgetting the premise that it's also \"code that you can freely fork for your needs\". But we are so spoiled that we even forget that it is \"code that you can read to learn from masters\". As Ryan Florence has noted: [\"I get asked all the time 'how do I level up?' Read code. Read lots of code.\"](https://nitter.net/ryanflorence/status/1119628559767654405#m) It's simple, but not easy. One of Paul Irish's early hits was [10 Things I Learned from the jQuery Source](https://paulirish.com/2010/10-things-i-learned-from-the-jquery-source/) (followed by [11 more things](https://www.youtube.com/watch?v=ARnp9Y8xgR4)) - granted, this was a public talk, but it could easily be private learning. I curate the [list of open source React Project Ideas](https://www.reddit.com/r/reactjs/?f=flair_name%3A%22Project%20Ideas%22) on /r/reactjs for this reason.\n\n**Subscribe to Repos and Issues**: Just like there is [a metalanguage behind the language](https://www.youtube.com/watch?v=_0T5OSSzxms), behind the code, there is metacode - discussions and attempts on Github Repos and Issues by collaborators, all in the open. If Reading Source Code is reading code-frozen-in-time, then subscribing to repos and issues is reading code-in-motion. Since a developer's job is very evidently to put code-in-motion, learning how to do this by watching others is a great idea.\n\n## Getting More Out of What Goes In\n\n**Have a Goal**: You will go further if you put more effort learning one thing than to diffuse your efforts learning random assortments of things. You even gain the superpower of having the permission to _ignore_ things if they're not on-goal for now - you can always come back later if your goals change.\n\nI do believe that Systems are more important than Goals. This whole thing you're reading is a proto-System. But Systems can be focused by Goals. Sometimes you can stuff a system into a goal - [Ultralearning](https://www.scotthyoung.com/blog/ultralearning/) seems to have caught some fire recently as a form of super intense, immersive learning. [Joe](https://twitter.com/jsjoeio) summarizes it as such: \"Set a goal to experiment say with a new technology for 31 days. Check it out. See what you think. Write down what you learn.\"\n\nNote: I'm not saying you have to have a goal at all times. Sometimes undirected learning is fun, and nice, and leads to serendipity.\n\n**Take Notes**: A [syllogism](https://en.wikipedia.org/wiki/List_of_valid_argument_forms):\n\n- There's no point learning anything if you can't recall it - or rather, the more you can recall, the more you actually learned\n- There is a natural limit on how much you can recall at any time\n- So you must take notes to learn more than your brain can hold\n\nThis is currently in vogue as [Building a Second Brain](https://praxis.fortelabs.co/5-steps-to-build-a-second-brain-7eddbae5af95/), but it should be no surprise that \"Personal Knowledge Management\" is a key life habit for knowledge workers. It's not a fad, it's something professionals have always learned to do to get good.\n\nI have a bias toward digital notes, because search is a superpower. But search is no substitute for **organization**, which at its base form is a tagging system, but at its best is a \"minimum spanning taxonomy\" of the subject matter.\n\nFor the same amount of content stored, an organized mind will perform far superior to a disorganized one.\n\n**Spaced Repetition**: Of course you can also just try to increase how much you can recall. [Michael Nielsen is famous for making very bombastic claims about the capacity of Long Term Memory](http://augmentingcognition.com/ltm.html), but the basic principle is sound: use spaced repetition learning. [Anki](https://apps.ankiweb.net/) is the leader here. I'll be honest, I don't do this much. In a way, having a daily habit of pursuing the same topic, and making sure to take searchable notes leads you toward spaced reptition anyway - but of course, I could always do a better job of this because I often have to recall things on the spot in interviews and workshops.\n\n**Deliberate Practice**: A lot has been made of [Gladwell's popularization of the 10,000 hour rule](<https://en.wikipedia.org/wiki/Outliers_(book)>), but it is undisputed that you grow the most when you practice at the edge of your abilities rather than the stuff you already know. Enough said? Enough said. However I wanted to highlight 2 specific ways to home in the exact limits of your ability:\n\n- **Pick Up What They Put Down**: I have called this [the Ultimate Hack for Learning in Public](https://www.swyx.io/writing/learn-in-public-hack), but of course you can also do this in private. Follow up on anything and everything your unknowing mentor says is good, or is yet to be done, or straight up just replicate their work. Which leads to...\n- **The Ben Franklin Method**: I've read this before, but was recently reminded by [Mike White](https://nitter.net/myquite/status/1215340113468755968#m). The \"Ben Franklin\" method is shorthand for a [Dissect and Reconstruct](https://observer.com/2016/12/the-benjamin-franklin-method-how-to-actually-be-a-better-writer/) process for training yourself to notice differences in quality between your output and your input. This is why you think your work sucks - your tastes have zoomed far ahead of your abilities. Ira Glass calls this [The Gap](https://jamesclear.com/ira-glass-failure). The Ben Franklin method is a feedback loop for Closing The Gap.\n  - [**The Feynman technique**](https://fs.blog/2012/04/feynman-technique/) is a similar framing of this, which is more self oriented rather than focused on replicating techniques of others.\n\n## Go Meta\n\n**Active over Reactive**: Active Learning is **Pull-based** - You try to do something, find gaps, and go seek out what you need to get it done. Most learning starts out Reactive - you see something new, you learn it. **Push-based**. The problem is the content industry has swung waaaay too far towards drowning you under a deluge of content. Additionally, Reactive Learning isn't serving your goals - it serves someone else's. Though part of learning is learning what to learn, and Serendipity is a wonderful thing, **Just-In-Case** learning isn't very productive. The right mix of learning will probably include more Active Learning, **Just-in-Time**, than is natural or feels comfortable.\n\nI confess I don't do this well at all and would welcome ideas for how to make active learning more of a habit.\n\n**Compare and Contrast Multiple Perspectives**: I find a shocking number of devs cannot objectively hold competing ideas in their head at the same time. They just loudly state their point of view over and over and over again and attack the weakest argument of their opponents. This is unacceptable to me. The 5th Habit of the 7 Habits is [Seek First to Understand, then To Be Understood](https://www.franklincovey.com/the-7-habits/habit-5.html). You are more effective if you can summarize the _best_ arguments of all major parties in a way that _THEY_ agree with. This is an unjudgmental \"schools of thought\" based mode of learning I wish more people adopted.\n\nAs a bonus, once you can do this well, you also become more persuasive to people who **disagree** with you. Because you took the time to understand them. This is sometimes called [Steel-manning](https://lifehacker.com/utilize-the-steel-man-tactic-to-argue-more-effectivel-1632402742) ([more from Andrew Chen](https://twitter.com/andrewchen/status/1190721336252829696?s=20)), as opposed to [Straw-man arguments](https://en.wikipedia.org/wiki/Straw_man).\n\n**Distinguish Game vs Metagame**: Much of learning is focused on how to do better at the Game you're playing, whatever the game is. But the best players recognize that _the rules of the game_ are changing even while it is being played. If they are smart, or passionate, they are also actively involved in _changing the rules of the game_ while they are playing it. If you don't want to keep \"fighting the last war\", and arriving at the top of your game only to have the game change on you, you must also pay attention to how the game is changing while you play it. Often, this takes the form of realizing that there's a bigger game out there than the one you once thought your whole world.\n\n> See Also: [Big L Notation](https://www.swyx.io/writing/big-l-notation) (expanding on why \"Learn In Public\" is the fastest way to learn)\n\n## Further References\n\n- Sarah Drasner: [Learning to Learn](https://css-tricks.com/learning-to-learn/)\n"
    },
    {
      "slug": "netlify-year-one-360-review",
      "data": {
        "technical": false,
        "title": "Netlify Year One - 360 Review",
        "slug": "netlify-year-one-360-review",
        "categories": [
          "Reflections"
        ],
        "date": "2019-08-31T00:00:00.000Z"
      },
      "content": "\nI thought I would write a quick coda to my [Netlify Year One](https://www.swyx.io/writing/netlify-year-one) Recap. That post was entirely me looking back at myself. It's helpful to see what others said about me at my review.\n\n## What I've Done Well\n\n- Diligent\n- Shares knowledge\n- Hard worker, prolific, motivated\n- Great eye for new features and developer experience\n- Constantly thinking about how to drive Netlify forward in terms of business goals, product features and community engagement\n- Live and breathe the JS and particularly React landscape. Bridge gap with community.\n- Attentive to trends, new developments and the pulse of the community\n- Jump on tasks\n- Articles that are topical and interesting\n\n## What I could Improve\n\n- Communication\n- Communication\n- Communication\n\nBasically people think I:\n\n- move fast and skip steps\n- dont provide enough context in issues or externally\n  - In particular, longer explanations to customers, not imperative: do this, do that\n  - provide more context in GH repos\n- am not engaged in calls/dont value others contributions to conversations/dont pay attention when others are speaking\n- working on too many things at once\n\nPeople want me to turn technical acumen into technical leadership.\n\nI had a comment that \"sometimes has a tendency to pursue his own avenues of interest and focus\". I have no intention to change this.\n\n## My Resolutions from my 360\n\n- TAKE THINGS IN. LISTEN. ATTENTIVE.\n- COMMUNICATE EXPLAIN AT LENGTH AND DELIBERATIVELY.\n- Continue to give thoughtful compliments in public to analyze what I like about what they do, breaking apart what they did.\n"
    },
    {
      "slug": "netlify-year-one",
      "data": {
        "technical": false,
        "title": "Netlify Year One",
        "slug": "netlify-year-one",
        "categories": [
          "Reflections"
        ],
        "date": "2019-08-09T00:00:00.000Z"
      },
      "content": "\n> Update: I have since [left Netlify](https://dev.to/swyx/farewell-netlify-1alo).\n\nThe official date is a bit fuzzy because visas but I joined the Netlify Slack a year ago today as like the 40ishth (🤷🏼‍) employee. I thought it'd be nice to do some public reflections for myself and perhaps also for others thinking of joining. (Just please note that I only speak for myself, wrote this on a friday in a couple hours so I cannot possibly be comprehensive, and also have things I cannot say publicly).\n\nThis isn't just about my work in the past year, its also about the perspectives i've gained from my seat at netlify. I'm just one person, so undoubtedly I don't see things other Netlifiers see and lack context on other stuff. I am pretty much dumping this stream of consciousness style. If something is grossly mistaken, please reach out and I will rectify post haste.\n\n---\n\n## Joining\n\nWhen Mathias first brought up working at Netlify, I was a frontend developer at NYC_HEDGE_FUND. Just getting going with sporadic writing, [egghead.io involvement](https://egghead.io/lessons/react-set-up-storybook-for-react-from-scratch?af=95qfq1) and [#LearnInPublic](https://www.swyx.io/writing/learn-in-public/), yet to even do my first conference talk. I had used Netlify, but basically just to deploy Gatsby and CRA apps and had yet to even know about any of the more advanced Forms/Functions/Identity/etc stuff I now explain to people on a daily basis. So the founders (including everyone that interviewed me like [Phil](https://twitter.com/philhawksworth)) definitely bet early on me and I am eternally grateful. I make no bones about the fact that I would never have considered myself qualified to work at Netlify had they not asked, and so wouldn't even have thought of applying. But for redacted reasons I happened to be in the exact right place to explore leaving when Netlify came knocking.\n\nI dropped everything and went for it.\n\nA story I haven't told much is about -what- job I interviewed for. At the time, Netlify had a policy of bringing in the _person_ and finding the best fit for them. That was really nice, although I don't think it applies so much at current scale and needs. I looked through the open https://netlify.com/careers listings at the time and picked out **Solutions Engineer**. Basically working with Sales, but handling all the technical questions as far as possible. In retrospect this was a terrible choice for me and I think my interview with the Head of Sales at the time was probably the only one that didn't go well. Netlify could have stopped the process at that point, but they persisted, and pointed me towards **DX Engineer**, which, lets be honest, isn't a widely understood job title at all. But I clicked really well with David Wells and Phil Hawksworth (the other DevRel, [Divya Sasidharan](https://twitter.com/shortdiv) was still yet to join at the time iirc) and it had elements of open source engineering as well as developer relations, which I was interested in. Anyway; I was also interviewing at another place at the time, and was fortunate enough that Netlify moved lightning fast to make all this happen in the space of two(ish) weeks to seal the deal.\n\n## The Job\n\nHere is what I saved of [my job desc](https://github.com/sw-yx/README/blob/79a43f89e097b3b6f32482fc4ed18a08febfab49/README.md#my-role) when I joined. These three sentences highlight the scope, and I am still as excited about it today as I was on day 1:\n\n- The DX team is focused on empowering developers (customers & partners) by making it as easy & streamlined as possible for them to build awesome stuff on top of the expanding Netlify Platform.\n- The DX team are the internal dogfooders. They stretch, bend, and break the tools Netlify offer to make things better for the ever expanding group of developers.\n- DX work closely with product, support, docs, users & partners to push the product to new heights, teach users what is possible with the JAMstack, and build tooling/docs/demos to attract people into the Netlify ecosystem.\n\nI can say substantially all of these three points have been met and are fully accurate descriptions of what I do.\n\nThe formal details of the job, though, changed at least twice in the past year. I'm not sure how much I can say about org charts, which move around a lot anyway at a small fast growing company. Up until recently \"the DX team\" was a loose complement of \"Developer Relations\" (hence our combined slack channel was \"#devrel*ish*\", which also is a nice internal pun) and kinda-sorta-not-really part of Marketing. When I joined I remember a pretty awkward and hilarious discussion where our Office Manager and I shared a lot of confusion over where I was in the org chart.\n\nI was mainly glad to just be in it.\n\n## DX ❤️ Product\n\nWith [Sarah joining in May](https://sarah.dev/blog/why-netlify) though, this has become a lot clearer. _sighs of relief_. Sarah, Phil, Divya and myself make up the Developer Experience team (she prefers \"Devex\", I like \"DX\"), with Phil as Principal and Sarah as Head. Divya and I have assigned 3 month rotations on to the product team now run by [Jacob](https://twitter.com/jakecodes), to work on our developer relations by _being developers_. I have scheduled mine for November, and I greatly look forward to it, although I am also a bit cautious about being a \"tourist\" and the need to acclimate to the pre-existing engineering culture. (For example, I am the only outspoken TypeScript fan at the company. Netlify Dev has no TypeScript templates to this day.)\n\nI don't at all expect this will be a problem though. In fact I'm not new to the codebase at all. Pretty much in my first month at Netlify I got the inspiration to dive into the React codebase since I thought it would be of interest to the users some inside baseball on how the platform they use also has some of the same issues they deal with. I immediately ran into the problem that we needed integration test coverage to do some of the stuff I wanted to do. I happened to have met [Gleb Bahmutov](https://twitter.com/bahmutov?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) at a meetup recently, and so wound up leading the initial implementation of Cypress at Netlify, inspiring one of my most popular tweets ever:\n\n![https://mobile.twitter.com/swyx/status/1064742523426430976](/assets/tweet-tests.png)\n\nBased on [meeting Brian Vaughn at React Rally](https://mobile.twitter.com/swyx/status/1034822793295286272), I then also dove into a longstanding issue with our build logging and used his new DevTools Profiler to understand what was going on. I [wrote it up](https://www.netlify.com/blog/2018/08/29/using-the-react-devtools-profiler-to-diagnose-react-app-performance-issues/) and, as a practical testimonial of a new React devtool, people were quite interested in the topic, so it did pretty well! I also looked at [Netlify's usage and philosophical synergy with Immutable.js](https://www.netlify.com/blog/2018/10/05/netlify-and-the-functional-immutable-reactive-deploy/) and made [the case for moving to Immer](https://www.netlify.com/blog/2018/09/12/the-rise-of-immer-in-react/), which I think is the top post I've done on the Netlify Blog.\n\nThe synergy between DX and Product is obvious. However I never felt a part of the Product team (because I wasn't) and didn't want to be randomly adding code review burden on our already overburdened team lead just on my own initiative and no roadmap or prioritization, so I eventually stopped. But it is clearly a very productive area of exploration and I look foward to mining this fertile vein again, this time under formally blessed auspices.\n\n## DX ❤️Sales/Engineering\n\nrecently i've also been performing a small amount of \"field reporting\". I'm naturally pretty immersed in the Gatsby/Nextjs newsflow, and colleagues seem to want to hear about the competitive/SSG landscape from me. So I've been doing that. It's one of those \"feedback loop\" parts of the job that sets DX apart from straight marketing. I will confess that I don't know if its constructive to hear from me vs just hear it straight from the CEO, who generally always has more context. I also believe startups die more by suicide than homicide and it doesnt do us any favors to watch other people all the time.\n\n## Netlify Dev\n\nI helped Mathias, David C, and David W heavily in the lead up to [the Netlify Dev launch in April 2019](https://mobile.twitter.com/Netlify/status/1115632898378534912). I recall the first inkling I ever had about Netlify Dev was [at the Netlify Allhands in January](https://mobile.twitter.com/swyx/status/1088860536156999680). I was more excited about the Addon Marketplace at the time, as I loooove platforms and the \"Netlify = Serverless Heroku\" thesis.\n\n[Things dragged for a bit, and then picked up a lot leading into the launch](https://github.com/netlify/netlify-dev-plugin/graphs/contributors). What I loved about it was that I had pretty much full discretion to build whatever developer experience I wanted into the Netlify Dev CLI plugin (the actual CLI, which ND is embedded in, was managed by Bret Comnes until recently). What scared me about it is that I had any discretion at all for one of the strategic launches of the company. I saw a small demo by David Wells, saw what was left to do, and it was pretty much pedal to the metal from there until launch. There was no product management or docs process, just a small core group of engaged people doing the best they could in the time they had.\n\nI'm not a fan of process that doesn't add value, but I'm equally not a fan of no process, both in the leadup to launch and the subsequent care and feeding. This is something that is hard to do well given infinite resources on a good day, so the fact that we're still figuring things out as a small startup is no surprise. We've hired people now and absorbed it into product team ownership. That was something I was very keen on and I am glad it happened.\n\nI _could_ have volunteered to change my job to formally actually maintain Netlify Dev. That wasn't ever explicitly on the table, but it also wasn't off the table. I made a conscious nondecision not to do that, but I weighed it for a long time. I like my DX role too much, and I didn't know if I wanted a career being primarily a CLI dev. I may yet live to regret this nondecision. [Raees](https://raeesbhatti.com/) has that job now and is far more qualified than I.\n\nOverall I loved it though, and although I don't relish being viewed as a \"spiky\" person, its clear that I did fine under those circumstances and there wasn't anyone else doing what I did. 🤷🏼‍♂️ I learned a _toooon_ about making CLI's and in my usual style [I started writing a cheatsheet for that stuff](https://github.com/sw-yx/cli-cheatsheet/tree-save/master/README.md).\n\nI also started writing about [Templating](https://gist.github.com/sw-yx/6f97b9d7f3efbfad4c8e5b8a14b5bd27) and [CLI state](https://gist.github.com/sw-yx/3af1e264b8460af8897768045b2c229f) which turned into [a fun conference talk](https://www.youtube.com/watch?v=1_w1YWCHXFg).\n\nThere are also other similar opportunities to be had in the DX space as I see it right now, with at least 2 nonpublic projects ongoing I am excited about contributing to. So there's that.\n\nOur subsequent [Netlify Analytics](https://www.netlify.com/products/analytics/) launch was quite a different story. Being primarily a backend thing, with the only frontend part tightly integrated with the App UI, I had 0 part to play in it. It had design and docs input from the get go, has no learning curve apart from the \"click here and pay us money\" button, and launched to smaller fanfare, but, because we charge for it, it makes money and is doing well (surprise! i dont think i can say how well its doing tho :)).\n\nThis compared to the 0 directly attributable dollars Netlify Dev has brought in, together with the increased support burden from Netlify Dev, has made for some very interesting calculus in terms of resource allocation. On one hand, you want to play the long game and solve hard problems. On the other, you want to build things people want to pay for. As an employee, its a little confusing where and how your initiative and efforts will be rewarded too. Fortunately I expect management will be reasonable and realistic about the pros and cons of incrementalism vs moonshots.\n\nMarketplace efforts are a very slow burner. It's a potentially huge money maker, but back-loaded, and getting it going requires a lot of business development time and good partners. We've got a good start.\n\n## Momentum\n\nI think Momentum is a very powerful thing. It's something my college friend and mentor Alex called \"the Mo\", it's something I wrote about in [my investment case for Atlassian](https://sentieo.com/blog/no-high-in-team-why-atlassian-will-10x-or-get-acquired/), and I see it in nonmonetary tech trends too. [The state of JS tracks this over time](https://stateofjs.com/), as well as [HN Hiring trends](https://www.hntrends.com/) too.\n\nI recall the first time I saw \"el Mo\" at Netlify - [JAMstack Conf 2018](https://2018.jamstackconf.com/). Having just joined, I pretty much had no hand in it, but I remember looking at the speaker list and talking to attendees and realizing that \"_no, really, this thing is huge and both people you've never heard of, and people you have, really fucking believe in it_\".\n\nI'm dense in that way - I know what Netlify does for me, but I'm a chump so it doesn't count.\n\nI know about all the online love, but give away a great product for free and effusive love is easy to find.\n\nBut show me real people with real businesses and clients and companies to run and they have the same love? Heck yeah, now I am all in.\n\nIn [my career change into web dev](https://hackernoon.com/no-zero-days-my-path-from-code-newbie-to-full-stack-developer-in-12-months-214122a8948f) I learned extensively from Quincy Larson and Wes Bos and Chris Coyier; and at JAMstack Conf I found myself sitting at the same dinner table as them! WTF? This is a thing, huh?\n\nSeriously, stop reading right now and watch Chris Coyier advocate for the All Powerful Front End Developer. I dont have youtube embeds on this blog yet so here:\n\n> WATCH: [All Powerful Front End Developer](https://www.youtube.com/watch?v=grSxHfGoaeg)\n\nAnd then watch him this year, with [the same thesis on steroids](https://full-stack.netlify.com) (click into the details for the video):\n\n> WATCH: [oooops I guess we’re\\* full-stack developers now](https://full-stack.netlify.com/)\n\nThen see [Ghost loudly advocate for the JAMstack](https://ghost.org/blog/jamstack/).\n\nThen see [Jamund Ferguson bring JAMstack to Paypal.me](https://www.infoq.com/presentations/jamstack-enterprise/).\n\nThen see [Citrix tell their JAMstack story](https://www.netlify.com/blog/2019/06/12/jamstack_conf-nyc-session-recap-citrix-delivers-better-ux-with-less-overhead-using-jamstack-and-netlify/).\n\nThen read [the Hacker News comments on Netlify Dev](https://news.ycombinator.com/item?id=19615546).\n\nThen see [Sarah Drasner reaching _inbound_ to work at Netlify](https://sarah.dev/blog/why-netlify).\n\nThat's The Mo. Netlify has it. I don't know much but I know that much.\n\nThe most awkward part about Netlify is the JAMstack terminology. I have a love hate relationship with it, because it isn't self explanatory but does represent a fundamentally simpler infrastructure that we try to advocate for. It's here to stay because people are adopting it and I'm very fine with that!\n\nIt does make for very strange bedfellows:\n\n- On one hand, \"lol dont overengineer everything\" people like Phil and [Zach Leatherman](https://mobile.twitter.com/zachleat/status/1148924107477663745) and [Sara Soueidan](https://mobile.twitter.com/SaraSoueidan/status/1094214772055334912) love Netlify for its return to simplicity without managing servers. As someone who has wrestled with setting up pm2 on a digital ocean box, I am so glad never to do that undifferentiated heavy lifting again.\n- On the other hand, double digit percents of Netlify sites -are- \"overengineered\" Gatsby sites, which love Netlify because it helps build their complex setups better than Github Pages can, and has good defaults which passes for good DX when compared to AWS.\n- there's also a third contingent of people who use SSGs like Jekyll and Hugo and are generally kinda bemused at all the drama in JS land\n\nIn case it wasn't clear, i'm being ridiculously reductionist in either of the above bullet points and of course there are many other very good reasons and contingents.\n\nI like to explain it this way:\n\n- first watch [Mathias' appearance at Smashing Conf 2016](https://vimeo.com/163522126) explaining why the JAMstack\n- then watch ANY of Phil's talks ([here's one I found off a quick google](https://www.youtube.com/watch?v=B-ku9enw3Fg)) on how he pitches JAMstack, from a perspective of serious agency experience\n- And for me, in March I went to JS.LA and gave a talk titled [JAMstack: The Total Victory of JavaScript](https://www.youtube.com/watch?v=vOUcPI2mljU) to put it in my own words\n- I recently (July) also went to [JSCamp Barcelona](https://jscamp.tech/schedule) to give a souped up version of the same talk.\n- I've also conducted [two workshops on JAMstack and Gatsby](https://github.com/sw-yx/jamstack-jumpstart), at [JSConfAsia](https://2019.jsconf.asia/) and [MidDevConf](https://www.middevcon.com/sessions/jamstack-jumpstart-gatsby-netlify/)\n- as well as made the Gatsby [JAMstack hackathon starter](https://github.com/sw-yx/jamstack-hackathon-starter) after I saw difficulties people had at JAMstackConf 2018. The starter comes [with an accompanying blogpost](https://www.gatsbyjs.org/blog/2018-12-17-turning-the-static-dynamic/) that was very well received and I also picked up maintenance of Netlify's [`netlify-lambda`](https://github.com/netlify/netlify-lambda) and [Netlify Identity OSS tools](https://react-netlify-identity-widget.netlify.com) along the way.\n\nThis isn't an exhaustive list, it's just a smattering of what has come to mind as I learn about and try to interpret and evangelize this trend that is the entire founding thesis of the company I work at. (no big deal!) For a more edited version of all this, [Phil and Mathias recently released a free Oreilly book](https://www.netlify.com/oreilly-jamstack/) about the whole thing.\n\n## Speaking and Writing\n\nI gave [my first conference talk at React Rally](https://www.youtube.com/watch?v=nyFHR0dDZo0) in August last year, just as I joined Netlify, and since Jan 2019 then I have done _checks notes_ 20ish events including podcast and meetup and conference talks, on everything from [JAMstack](https://www.youtube.com/watch?v=vOUcPI2mljU) to [CLIs](https://oclif.io/conf) to [Babel Macros](https://www.youtube.com/watch?v=1WNT5RCENfo) to [React](https://www.youtube.com/watch?v=KJP1E-Y-xyo) to [React](https://www.reddit.com/r/reactjs/comments/9xjnym/reacts_new_defaults_concurrent_react_and_react/) to [React](https://twitter.com/swyx/status/1086153419927089153) to [Learn In Public](https://kentcdodds.com/chats-with-kent-podcast/seasons/01/episodes/you-can-learn-a-lot-for-the-low-price-of-your-ego-with-shawn-wang).\n\nI'm starting to have a love hate relationship with speaking.\n\nI would say I am somewhat experienced at being a speaker now. I'm obviously not the best speaker in the world, nor do I want to be, although Sarah has engaged great speaker training for us and I want to be **good**. But I can get by at a pinch, and have some basic talent.\n\nWhat I like is that now I approximately know who to talk to and what to do and how to prepare and how to behave to get on a conference somewhere and do a passable, maybe even good, job.\n\nIt is extraordinarily good for networking - having that momentary peerage with others waaaay more accomplished than I am. I don't for a second take it for granted or pretend that I am on the same level. But it opens the door, establishes the relationship. And I can go pretty far with just that.\n\nIt is not so great for _reach_. A good size event in our space is like 300-500 people (we don't do the extremely corporate >5k mega events, although we did go to re:invent last year). Online, conference videos maybe get 3-30k views. In exchange for that, we (the company) often (but not always) have to pay for travel, and I personally pay in terms of life disruption (often a lot of out of pocket stuff is spent incidentally on travel as well which I have just sucked up) as well as tanked productivity for pretty much the week leading up to it (although this has gotten a bit better as I start to recycle talks.\n\nThis has made conferences hard to justify in ROI terms apart from a vague \"we want to be present at the important ones\" goal. I don't care to do it one bit; I'm extremely glad we have a capable Head of Marketing now who leads that.\n\nWriting has wider reach: Sarah easily gets 6 figures in eyeballs on any given post. The engagement may not be as deep as in-person or via video, however the financial outlay is WAY less, and the personal cost is less too. So that is the strategy we're pursuing at the moment. as you can see i have no problem spamming thoughts to digital ink :)\n\nI have a -lot- more comments here I am redacting for now. suffice to say that this is my current area of struggle. I don't intend to make this a permanent bugbear though, as this is pretty basic in the grand scheme of things, but I will fess up to the fact that I have yet to really find a workflow and cadence that I REALLY like, that keeps me in flow.\n\nWhen I'm in flow, you'll know.\n\n## Community Engagement\n\nrunning the company Twitter is part of the job. I don't know what the goals are, but I'm a Twitter addict anyway so it's no problem to queue up some nice stuff.\n\nI also do some amount of engagement on community.netlify.com, on our github issues, on Reddit, as well as on my personal Twitter, as well as started [an unofficial Office Hours thing](https://github.com/sw-yx/NetliFridays). All of which is good, but I can't shake the feeling that I wouldn't be missed if I didn't do that.\n\nOSS maintenance and community engagement are the kind of thing that are table stakes for developer experience, but it doesn't make it onto OKRs, nor does anyone try to measure ROI out of that stuff. We do it because we feel responsible for the developer experience, with a safety net of support. I don't have any other way to phrase it, nor do I see any other way to manage it, but I do wish that it counted for more so that incentives align well.\n\n## Remote\n\nThe company is headquartered in SF, I work remotely out of NYC. We're about 50-50 in remote vs SF, across US and EU timezones. I was also a \"slowmad\" for about half of the year as I combined travel with conference speaking.\n\nI have more comments on remote work in a separate post, but the main points to hit are that I love working from home (even moved to a new place with a 24hr coworking space downstairs to facilitate my weird hours) and also that [I hate Slack being central to everything](https://mobile.twitter.com/swyx/status/1120050592263692293). But I'll live.\n\n## Fin\n\nThat's all I can think of for now. I budgeted 2 hours for this and am now at hour 3 so I'm gonna wrap this up and hit send. super psyched for the `redacted` projects coming down the pike, for my product rotation, for new hires coming in, and to continue learning from Sarah and the rest of my team in this weird new job!\n\n_P.S. This post was inspired by [David Wells](https://davidwells.io/blog/netlify-year-one), a great colleague, mentor and friend. Check out his post for more stuff we've done, some of which I supported. I don't think like him so this format doesn't match, but I wrote it my way._\n"
    },
    {
      "slug": "no-code-lie",
      "data": {
        "technical": false,
        "title": "\"No Code\" Is A Lie",
        "subtitle": "Why Coders should take a second look at \"No Code\" tools",
        "slug": "no-code-lie",
        "categories": [
          "Reflections",
          "No Code"
        ],
        "date": "2019-10-11T00:00:00.000Z",
        "canonical": "https://webflow.com/blog/no-code-is-a-lie"
      },
      "content": "\n\\_Originally published on [the Webflow blog](https://webflow.com/blog/no-code-is-a-lie).\n\nDevelopers often mistake the \"No Code\" movement to mean \"No Coders\" or \"Not for Coders\". As a developer, I used to either regard \"No Code\" as a threat, or dismiss \"No Code\" tools as something beneath me, something you only resort to if you, well, can't code.\n\nBut there is an open secret behind the current generation of \"No Code\" tools - **it's ALL code**.\n\n\"No Code\" tools generate code. \"No Code\" tools run on _mountains_ of code. \"No Code\" tools can even interact with your code. They still require technical users - people who can debug, people who can think in abstractions, and, above all, people who know how to glue just the right tools together in the right way to produce business value.\n\nIf you're thinking that that set of skills sounds like what developers do, you'd be right. Just like \"serverless\" just means \"not your servers\", \"no code\" just means \"not your code\".\n\n## The API Economy + \"No Code\" = The GUI Economy\n\nYou may have heard of [the API Economy](https://a16z.com/2018/03/09/api-world-summit/) - the idea that as software increasingly [eats the world](https://techcrunch.com/2016/06/07/software-is-eating-the-world-5-years-later/), a whole generation of software companies are arising to specialize in individual hard problems in software so you don't have to. The average person on the street will never hear of Stripe or Twilio, but they may be customers of some startups which in turn are customers of Stripe or Twilio for payments or communication.\n\nWhere developers used to be responsible for the full stack of code and integration needed to make these capabilities possible, API companies make adding commoditized functionality as easy as dropping in a few lines of code. This makes sense on multiple dimensions: it transforms a high _fixed, upfront, uncertain_ cost, into a _variable, deferred, predictable_ expense, and a specialized service is likely to be more robust and cheaper (due to scale) than a self-written one. This is hugely beneficial for both sides, which has resulted in an entire economy of API's blossoming for every \"hard problem\" imaginable:\n\n![https://monsoonblockchain.org/wp-content/uploads/2019/03/https-blogs-images.forbes.com-louiscolumbus-files-2017-04-api-bessemer-venture-partners.jpg](https://monsoonblockchain.org/wp-content/uploads/2019/03/https-blogs-images.forbes.com-louiscolumbus-files-2017-04-api-bessemer-venture-partners.jpg)\n\n_Source: [Byron Deeter](https://twitter.com/bdeeter) from [Bessemer Venture Partners](https://www.slideshare.net/ByronDeeter/state-of-the-cloud-2017-72021644)_\n\nOne (unforeseen?) outcome of the API economy is how hugely enabling it has been for individual developers as well. Suddenly, if you understood HTTP and REST, you now had access to the PhD-level search capabilities of [Algolia](https://www.algolia.com), or the nationwide banking relationships forged by [Plaid](https://plaid.com/). This isn't a threat to developers, nor is it something \"real\" developers wouldn't use - it just redefined what the job is. Instead of doing the same undifferentiated heavy lifting every other developer does, the developer can now focus on writing just the core code the business needs to deliver on its unique value proposition, leaving other specialists to deliver on theirs. With this reduction in the surface area of responsibilities, you might expect some threat to the tune of \"APIs are taking our jobs\" or \"Platforms are taking our jobs\". However, Developer salaries _rose_, instead of fell, through this API Economy transformation.\n\nThis is the context with which I now approach the current \"No Code\" movement.\n\nWhere developers used to be responsible for writing the code to link together business logic and various APIs together, they can now do it visually. When you look at Zapier's interface:\n\n![https://www.process.st/wp-content/uploads/2016/01/what-is-zapier-select-filters2.png](https://www.process.st/wp-content/uploads/2016/01/what-is-zapier-select-filters2.png)\n\n_Source: [Process.st](https://www.process.st/what-is-zapier/)_\n\nand see users literally manipulating Boolean logic to get their work done, it is hard to deny that they are coding their business logic in terms that the machine understands. It just doesn't look like a coder's idea of coding.\n\nIt is no secret that Graphical User Interfaces (GUI's) are more intuitive and easier to use for more people than verbose API documentation that then require additional engineering resources to write the code needed to take advantage of it. So the next generation of tools are all-in on this idea - deliver their core functionality with a GUI for direct manipulation as well as interlinking with other tools. Even heavily developer-focused companies like [Netlify](https://https//www.netlify.com/products?utm_source=blog&utm_medium=webflow-swyx&utm_campaign=devex), where I work, have heavy investments in GUIs, with an extensive [design system](https://storybook.netlify.com/) to boot. An additional benefit of a GUI focus, particularly with web apps, is the ability to use the software while on mobile, the primary computing platform of our time.\n\nI'll dub this **the GUI Economy**. Just like the API movement before it, it will allow a larger concentric circle of people (who don't identify as developers, but are nevertheless technical) to build and interact with software, and yet it will be less a threat to developers than an enabler. This is what we discuss next.\n\n## Visual Developer Tools\n\nAt first, a developer might resist the idea that visual tools can help in coding. But once you look for it, you see it everywhere.\n\n![https://i.ytimg.com/vi/0BzinTi8Z7A/maxresdefault.jpg](https://i.ytimg.com/vi/0BzinTi8Z7A/maxresdefault.jpg)\n\n_Source: [Dark](https://darklang.com/)_\n\n**Visual Development Environment**. With a [51% market share](https://insights.stackoverflow.com/survey/2019#technology), the most popular development environment these days is [VS Code](https://code.visualstudio.com/), despite only being released in 2015. What explains it's meteoric rise in popularity over simpler code editors like [Notepad++](https://notepad-plus-plus.org/downloads/), [Atom](https://atom.io/) and [Sublime](https://www.sublimetext.com/)? Among other things, it offers a point and click interface for search, file navigation, type hints, customizing settings, adding extensions, and so on. That is what it and other full featured IDE's provide over simpler tools. In fact, [Dark Lang](https://darklang.com/) recently coupled IDE and language, taking the IDE and visual coding metaphor to an even higher level by guaranteeing you can't write invalid code because the IDE won't let you. Nobody argues that this is less legitimate coding.\n\n![https://i.imgur.com/3pEB0B3.png](https://i.imgur.com/3pEB0B3.png)\n\n_Source: [XState](https://xstate.js.org/docs/)_\n\n**Visual State Machines**. Similarly, there is a widespread movement to [embrace statecharts](https://statecharts.github.io/) and visually designed state machines governing app logic. This visualizes complex state transitions and makes missing holes due to bad planning painfully obvious. Changes in business logic due to changing business requirements are intuitively added, validated, and translated to the view layer in a consistent manner. With the [xstate Viz tool](https://xstate.js.org/viz/) created by [David Khourshid](https://twitter.com/davidkpiano), you can visually simulate any transitions and side effects to your state machine. Nobody argues that this is a less legitimate way to model state machines - in fact, [quite the opposite](https://www.youtube.com/watch?v=VU1NKX6Qkxc).\n\n![https://cli.vuejs.org/ui-analyzer.png](https://cli.vuejs.org/ui-analyzer.png)\n\n_Source: [Vue CLI](https://cli.vuejs.org/guide/cli-service.html#using-the-binary)_\n\n**Visual Command Line Interfaces**. At first this seems an oxymoron. Aren't Command Line Interfaces (CLI's) the canonical opposite of GUI's? Recently, this line is being blurred in creative and interesting ways. The [Vue CLI](https://cli.vuejs.org) created by [Guillerme Chau](https://twitter.com/akryum) led the way building a full desktop app layer atop their CLI, to ease discoverability and visualization. But the desire to graphically represent code execution state and options is as old as CLI's - from [the most basic spinners](https://github.com/sindresorhus/ora#readme) to [navigable, interactive forms and templates](https://github.com/enquirer/enquirer/) to [writing entire layout engines and interactive renders with React](https://github.com/vadimdemedes/ink). Nobody argues that this is a less legitimate way to execute code!\n\n![https://www.portalzine.de/wp-content/uploads/sites/3/2019/02/visbug_browser_design_tool.jpg](https://www.portalzine.de/wp-content/uploads/sites/3/2019/02/visbug_browser_design_tool.jpg)\n\n_Source: [Visbug](https://github.com/GoogleChromeLabs/ProjectVisBug)_\n\n**Visual Interface Editing**. The \"What You See Is What You Get\" (WYSIWYG) experience is one fraught with history. Because this is a particularly thorny problem, early attempts like FrontPage and Dreamweaver weren't particularly great at producing human readable and maintainable code. But web technologies have grown a lot since - [Firebug](https://blog.getfirebug.com/) allowed direct editing of sites 12 years ago, has a modern clone in the [Visbug](https://github.com/GoogleChromeLabs/ProjectVisBug) project led by [Adam Argyle](https://twitter.com/argyleink), and even has a built-in solution in the [`document.designMode`](https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode) Browser API. Of course, [Webflow](https://webflow.com) is leading the vanguard in terms of \"No Code\" web design/authoring tools, even coming with integrated CMS and Ecommerce solutions. Nobody should argue that this is a less legitimate way to write UI's!\n\nAt the heart of all this is Developer Experience. At the end of the day, developers are humans too - we respond the same positive way to GUI's that the rest of our users do. If we learn to treat visual tools as friends instead of enemies, they can become massive productivity boosters for us as much as they do for our friends who don't do traditional coding. If anything, we should be _better_ at it than them, because we are professionally trained to understand how to design and maintainable systems, and know the right questions to ask to figure out where abstractions start and end.\n\n## Creation over Code\n\nThe old, tired debate in programming is that of [\"convention over configuration\"](https://en.wikipedia.org/wiki/Convention_over_configuration), or vice versa. What it misses is that these are more or less evolutionary ways of shifting the responsibility of code between toolmaker and tool user. You can do it poorly, or you can do it well. At the end of the day, it is still code, and the end user doesn't really care what you used and how much you wrote.\n\nGallons and petabytes of physical and digital ink have been spilled over progressively higher levels of abstractions in programming, from the earliest days of GOTO to the imperative/declarative divide, or the more recent movement from object oriented to functional paradigms. We've layered code on top of more code to make it easier and safer and more expressive, but through all this there has been no objectively measurable improvement in developer productivity from the point of view of the user.\n\nMaybe we've reached the limit of what increasing abstractions within code can do. To get to the next level, we have to abstract _over_ code. Maybe instead of putting code at the center of our universe, with more code as the solution to every problem, we should emphasize _creation_ instead, and consider everything that helps us get there.\n\n\"No Code\" isn't just something for website and app creators. It also presents tremendous opportunities for creators of developer tools.\n\nI work at Netlify, which helps developers build and host JAMstack sites and apps. Netlify isn't classically considered a \"No Code\" tool, because you almost certainly need to code to create most of the sites that people create with Netlify. However, from the perspective of front-end developers, who form the majority of the audience of Netlify, it is \"No Code\" in one very important way: the back-end. Netlify takes on the responsibility of hiring and managing a world-class platform, product, and support team managing Kubernetes deployments, CDN cache invalidation, and incident respnse. On the flip side, all the backend concerns of Continuous Deployment, setting up a CDN, getting an SSL certificate for secure HTTPS hosting, configuring custom domains, and a dozen other important yet boring best practices, are abstracted away, enabling front-end developers to create and deploy their sites on par with world-class full-stack teams.\n\nIf you are an entrepreneur seeking to make a dent serving developers, a reliable approach for traction is enabling an underserved segment of creators to do their thing, just a lot easier, with a No Code interface for all the incidental complexity that usually gets in their way.\n\n## Not All Roses\n\nI don't want to leave you with a mistaken impression that I am saying everything is automatically better with a \"No Code\" layer. It is still early days in this movement, and there are plenty of hard problems left to solve in this paradigm shift.\n\nYou will always have more programmatic power with code than with GUIs, even though we have started figuring out how to program control flow in GUIs. When is it better to stay inside GUIs, and when is it better to drop down, eject, or export to code? Can we make it a reversible instead of irreversible process?\n\nDiscoverability is easier with GUIs, but information density, expressiveness, and often speed is sacrificed. How does app design evolve in the era of No Code tools? Many code tools work offline, whereas No Code Web GUIs often don't by default. How important is this?\n\nGUIs are expensive to write (the furious innovation in frontend frameworks is proof positive that we aren't done yet), so No Code tools, themselves, which are often GUIs that create GUIs, are even more expensive and hard to create. How can we make them simpler, cheaper, and more accessible by default?\n\nThese are all unanswered questions and I look forward to all that we will discover about them in coming years.\n\n## Conclusion\n\nI'll confess my selection of title was somewhat clickbaity, but if you're a developer, product manager or technical founder, you've probably seen yourself in some of these debates raised in the perception of \"No Code\" and the challenges and opportunities it presents. Mostly, I wanted to, once and for all, completely demolish the misperception that \"No Code\" means no code is involved or that it is not for people who can code. I think this movement is a tremendously positive-sum win-win for both coders and noncoders alike, and the sooner we realize this, the more productive we can all become to use technology to solve actual hard problems in the world.\n\n---\n\n## Meta\n\n### Discarded\n\nIn every\n\n- scaffolding\n- design tools -> design system pull out components\n- no need translation -> single source of truth\n- bezier curve\n\n### Webflow Guidelines\n\nhttp://voiceandtone.webflow.io/patterns/blog-posts\n\n1. Who’s your audience? Developers who are dismissive of Webflow bc it is \"no code\"\n1. What will they get out of your article? Look at Webflow as a tool instead of a threat\n1. Why should they read it? They are getting hung up on Webflow based on identity.\n1. How will they act on it? They will try to use Webflow as an exportable design tool\n1. When: does some current event or topic make it relevant? none\n1. What’s your target keyword/keyphrase? This helps ensure a topic's relevant. \"No code\"\n1. What graphics/videos/audio would help you make your point? At minimum, your article should include at least 3 to 5 images. \"No idea\"\n1. What structure will you use? Our posts have strong structure with frequent subheads. Consider outlining before you write. see above\n\n- Title: \"No Code\" Is A Lie\n- Subtitle: Why Coders should take a second look at \"No Code\" tools\n- Lede: |\n  Developers often mistake the \"No Code\" movement to mean \"No Coders\" or \"Not for Coders\". But there is an open secret behind the current generation of \"No Code\" tools - it's ALL code. \"No Code\" tools generate code. \"No Code\" tools run on mountains of code. \"No Code\" tools still require technical users - people who can debug, people who can think in abstractions, and, above all, people who know how to glue just the right tools together in the right way to produce business value.\n- Hero image\n- At least 3 subheads to provide structure and easy takeaways\n- At least 3 images for body content: whenever possible, use a screenshot, GIF, or other graphic that illustrates your point, as opposed to a generic photo.\n- Link generously, but not in the first few paragraphs.\n\nIf citing data or quotes, always link to the source\nTry to link to 3 other Webflow blog posts or pages\nAlways embed links in clear language that communicates the topic of the destination page. Never embed links in the word \"here.\"\n"
    },
    {
      "slug": "no-code-rpa",
      "data": {
        "technical": false,
        "title": "\"No Code\" vs RPA",
        "subtitle": "Is Robotic Process Automation just Enterprise™ NoCode?",
        "slug": "no-code-rpa",
        "categories": [
          "No Code"
        ],
        "date": "2020-02-09T00:00:00.000Z",
        "description": "RPA seems to be NoCode Enterprise Edition™ and the pricing disparity is wild. But there are real differences and I am trying to note them down here."
      },
      "content": "\nI [spent some time](https://twitter.com/swyx/status/1226678489832730624) looking into RPA ([Robotic Process Automation](https://en.wikipedia.org/wiki/Robotic_process_automation)) today. RPA seems to be Enterprise Edition #NoCode and the pricing disparity is wild. But there are real differences and I am trying to note them down here.\n\n## No Code Players\n\n\"No Code\" tools are typically in the $50-$300/mo range. Here are some players people consider in the NoCode space:\n\n- Workflow Automation\n  - [Zapier](https://zapier.com/) - \"Easy automation for busy people. Zapier moves info between your web apps automatically, so you can focus on your most important work.\"\n  - [Parabola](https://parabola.io/) - \"Hand off your routine data tasks by describing them in Parabola. Build once, reuse infinitely.\"\n  - [Integromat](https://www.integromat.com/en) - \"Integromat is the most advanced online automation platform. We've redefined work automation so everyone can get back to what matters the most.\"\n  - [Retool](https://retool.com/) - \"Retool gives you building blocks, which you can assemble into any custom internal tool.\"\n- NLP/OCR\n  - [Instabase](https://about.instabase.com/) - Optical Character Recognition, Data Classification & Extraction, Natural Language Processing\n  - [Rossum](https://rossum.ai/) - \"The next generation invoice data capture tool that works without any specific rule or template setup. Thanks to artificial intelligence.\"\n- Spreadsheets 3.0\n  - [Airtable](https://airtable.com/)\n  - [Smartsheet](https://www.smartsheet.com/)\n- Site Builders\n  - [webflow](https://webflow.com/)\n  - [Carrd](https://carrd.co/)\n  - [Mendix](https://mendix.com)? unsure what they really do\n- App builders\n  - [Adalo](https://www.adalo.com/)\n  - [Glide](https://www.glideapps.com/)\n  - [Google AppSheet](https://www.appsheet.com/)\n\n## Comparison with RPA\n\nRPA does \"Workflow Automation\" and \"NLP/OCR\" stuff more than the latter \"Site Builders\" and \"App Builders\" stuff. But what they DO do, is very focused on the enterprise usecase. For example:\n\n- [Excel Automation](https://www.youtube.com/watch?v=MBl-3Yb30FA&t=5491s)\n- [PDF Automation](https://www.youtube.com/watch?v=MBl-3Yb30FA&t=9986s)\n- [Citrix Automation](https://www.youtube.com/watch?v=MBl-3Yb30FA&t=13553s) (!!!)\n- Orchestrator, ReFramework for doing stuff at sales\n- [Inferencing and Learning bots](https://www.youtube.com/watch?v=MBl-3Yb30FA&t=30320s)\n\nThey are typically Windows apps, rather than web apps, reflecting the audience.\n\nRPA *STARTS* at $1k/mo and seem to avg $5-8k/mo:\n\n- [UiPath](https://www.uipath.com/)\n- [Blue Prism](https://www.blueprism.com/)\n- [Automation Anywhere](https://www.automationanywhere.com/)\n- [Microsoft Power Automate](https://flow.microsoft.com/en-us/)\n\nI also notice that Sales are handled by affiliates like [Edureka](http://edureka.co/), they don't do self service sales like \"No Code\" tools.\n\n## Comparison Table\n\n|       | No Code | RPA   |\n|-------|---------|-------|\n| Price range ($/mo) | 50-300    | 1-8k      |\n| Sales style      | Self Serve        | Affiliate/\"Call us\"       |\n| Jobs to Do     | Automate + Site/Apps | Automate with existing tools       |\n\n## High Level Thesis\n\nI think RPA justifies its high cost by automating away the even higher cost of dreary boring human work. There is a lot of [TPS report filing](https://www.mentalfloss.com/article/57338/what-tps-report) out there in the world. The less you have to rip 'n replace systems, and the more you can just rip 'n replace humans who work with those systems, that's what you want to go with.\n\nNoCode tools are more greenfield - startups and smaller cos want to grow topline, so there is a more site/app building focus."
    },
    {
      "slug": "not-manager",
      "data": {
        "technical": false,
        "title": "Why I Won't Choose To Be A Manager",
        "subtitle": "How Charity Majors helped me close a door",
        "slug": "not-manager",
        "categories": [
          "Reflections"
        ],
        "date": "2019-09-26T00:00:00.000Z"
      },
      "content": "\nI recently decided that I will not _choose_ to be a manager. This is how I arrived at that conclusion.\n\n## Being asked\n\nWhen [Sarah joined Netlify](https://sarah.dev/blog/why-netlify) as my new manager, one of her first actions was to ask me if I wanted to be a manager when I grew up.\n\nThat was the first time I had ever been asked this in my professional life. Granted, I have had a very nontraditional career, so there really hasn't been much opportunity between my career changes.\n\nI wasn't ready to reply. As a very analytical person who tries his damndest to be fair, I can often argue both sides. On one extreme, I've been told I lack \"Emotional Intelligence\" and communication skills. I'm definitely an introvert and don't get along with everybody. On the other, I've been praised for my moderation work in r/reactjs and have actually (undeservedly?) been considered for a management job at a company I respect.\n\n## Why I was interested\n\nI am a strong believer that fixing systems can have far more impact than any individual contributor, and, as someone who isn't _ever_ going to be the best coder I know, I will admit I am hesitant to define myself purely by technical competency - technologies change, but people and organizational dynamics don't. Isn't it better to specialize in something you can endlessly scale and build a career/brand in? (I love [the Bezosian idea of investing in things that won't change](https://www.goodreads.com/quotes/966699-i-very-frequently-get-the-question-what-s-going-to-change) rather than trying to guess what will). Code is a means to an end for me: I will not cry if I don't get to code anymore, especially if it means unblocking people smarter than me to do more than they or I could do individually.\n\nAbove all, having had a series of managers over the years, and observed and swapped stories on others, I was mostly of the impression that the state of management, especially in tech, is _really terrible_. Like, laughably so.\n\nDon't read this as some sort of self delusional, grass-is-greener, Monday-morning-quarterbacking type \"I'm amazing so I can do that better\" bravado. That isn't what I mean. I mean that managers are failing their teams at really basic common sense shit. Shit like micromanaging details while being clueless about the broader context of how they fit in the company and roadmap. Shit like completely ignoring cognitive and unconscious biases in hiring and 1:1 and team communication. Shit like setting and forgetting OKRs. I could go on, but you get my drift. It's not all their fault either, the lack of training and awkward transition from developer to manager is well documented.\n\nThe bar is _low_. For every [Will Larson](https://lethain.com) and [Camille Fournier](https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897) I can probably find you dozens of... less effective managers. I score as a manager on [Nick Caldwell's Voight Kampff test](https://hackernoon.com/a-voight-kampff-test-for-identifying-engineering-managers-bb8512c70857). I have flaws, but could I do better than the median manager? It's quite possible. And if I can, shouldn't I? Don't I owe it to myself, and future teams I might work with, to try to find out?\n\nI will also confess that I am cynical about compensation and career structure. Literally everyone makes the right mouth sounds around trying to make an IC career path as good as one in management. Few actually succeed.\n\nRepresentation and being an ally also matters. David Brunelle thinks [wanting to challenge existing power structures](https://www.davidbrunelle.com/2019-09-12-reasons-to-try-management/) is a good reason to be a manager. The [Bamboo ceiling](https://en.wikipedia.org/wiki/Bamboo_ceiling) is real, and I know from many DMs that being an outspoken, (outwardly) confident Asian in tech has helped others in their own lives.\n\n## Charity's Charitable Chart\n\nThere was no more talk of the matter until Charity Majors dropped her epic list of [17 Reasons Not to be a Manager](https://charity.wtf/2019/09/08/reasons-not-to-be-a-manager/).\n\nFor the record, I don't think she did the profession any favors. She did a great favor for individuals considering a career in management, like me, but on the whole the career path of engineering management already had a net negative rap from what I'd seen.\n\nOf course it is a fact that \"There are fewer management jobs\" (Reason 3). This isn't mutually exclusive from the fact that we are in really short supply of good engineering managers, and managers of managers. [I don't know of any company _not_ looking for a VP of Eng](https://mobile.twitter.com/swyx/status/1158466756777783296).\n\nIt's really lame to reconsider a career path because of a blogpost, but I'll confess that is pretty much what I did. Really it was a great opportunity to revisit a question I have only considered, at best, once a year. What resonated with me, from Charity's list:\n\n- Point 6: ENGINEERS CAN BE LITTLE SHITS.\n  - Yes. Sometimes I am one of them. I don't look forward to having to deal with me when I am in a Mood.\n- Point 8: A MANAGER’S TOOLSET IS SMALLER THAN YOU THINK.\n  - As much as I've studied influence and persuasion, I have very little. I consciously spend more time on external influence than internal as I dislike telling other people what to do, and also don't care to push anything on to people that they don't intrinsically want to accept.\n- Point 11: MANAGEMENT IS JUST A COLLECTION OF SKILLS, AND YOU SHOULD BE ABLE TO DO ALL THE FUN ONES AS AN IC.\n  - True, although there is a gestalt effect of having scale and high level context.\n  - I especially don't like hiring, because I err on the side that many things can be learned/taught on the job while most tech hiring simply does not work that way.\n- Point 13: IT WILL TAKE UP EMOTIONAL SPACE AT THE EXPENSE OF YOUR PERSONAL LIFE.\n  - One of my favorite jobs was my time trading currency options, when, after I was done with work, I could walk away and never take work home with me. I probably don't have enough emotional space/stability to support others when they need it most.\n- Point 15: MEETINGS.\n  - Oof. Yeah, I don't love them. Half of Sarah's week is just meetings. This one alone is almost a dealbreaker, if you abstractly consider management as just a series of meetings punctuated by emails and slack messages scheduling more meetings.\n\nI didn't agree with everything, and I was fine with some of the other points. But I agreed with enough. Objectively, my own behavior at Netlify and in prior companies has revealed that I would not enjoy being in management at best, and at worst, I would cause so much pain and cognitive dissonance that I would not last long.\n\nI'll make a couple of observations that I think don't get addressed well in this conversation:\n\n- Saying that the main reason to get into management is to help nurture others' careers is the politically correct answer, but it isn't very helpful for prospective new managers (who have no direct evidence to work with) and feels like it comes from an assumption of privilege (of things being not-on-fire) and having bigco-level options and opportunities rather than the tight constraints of a startup.\n- Almost without exception, \"going into management\" in any of these conversations means going into **middle** management. Yes, being a [shit umbrella](https://roadmunk.com/blog/shit-umbrella/) is part of the job, but the organization can definitely wear you down and limit what you can do with unending shit.\n\n## Not By Choice\n\nI very consciously phrase my decision as not _choosing_ to be a manager, rather than not being a manager period. Given the above, I think I and the people I work with would be less well off if I were to choose to \"go into management\". In the immortal words of Shakespeare the VP of Dramatic Engineering:\n\n> [Some are born managers, some achieve managerness, and some have managerness thrust upon 'em](https://www.sparknotes.com/nofear/shakespeare/twelfthnight/page_110/)\n\nI won't choose to do it, but if I am so unlucky as to _have_ to do it, you better believe I will do the best I can.\n\n## References\n\n- http://keavy.com/work/thriving-on-the-technical-leadership-path/\n"
    },
    {
      "slug": "perfect-restaurant",
      "data": {
        "technical": false,
        "title": "The Perfect Restaurant",
        "slug": "perfect-restaurant",
        "categories": [
          "Rants"
        ],
        "date": "2019-11-05T00:00:00.000Z"
      },
      "content": "\nThis is a *rant* of uninformed thoughts and theories about running a restaurant.\n\n## Setting\n\nI'm writing this from Newark Airport Terminal B, where I just had a very unsatisfactory meal at one of the in-terminal restaurants.\n\nThis restaurant was a standard table-service Italian restaurant, the only one that serves hot food in this section of the terminal, so they have a captive audience of x000's flowing through every day. They must pay a lot for this position.\n\nHowever it is suboptimally run:\n\n- The restaurant seats about ~100 at a time\n- I observed a very long wait time to get seated. A party of 4 was told they needed 20 minutes. about 10 people in line at any time to get seated.\n- I myself, a single seater, took about 10 minutes to get seated.\n- I then took another 5 minutes to get a waiter's attention\n- after giving my order, it took about 20 minutes to get served my food\n- after my food, I got the waiter to get me the bill, and spent another 10 minutes getting her to take my card and then signing the bill\n- which means, of the ~1 hour i was there, more than 40 minutes were just waiting around for shit to happen.\n\nArguably the seats are non negotiable, and the cuisine is a given. However I often entertain the fantasy that I could run a restaurant to run more efficiently, make more happy customers, and make a lot more money. \n\n## The Waiter\n\nFor example, we need to drastically reduce the responsibilities of the waiter as they are probably the most obvious bottlenecks to turning over the tables. Here are the Jobs to Be Done of a waiter:\n\n- Explain/recommend food (rarely used)\n- Take orders\n- Serve Food\n- Serve Bill/Take Card/Cash\n- Deliver Card/Change\n- Clear Tables\n\nFor the waiter, the more jobs to do, the more training must be done, and all of these jobs are juggled among a number of customers. For the customer, each of these are blockers in their path from entrance to food to departure.\n\nWe could reduce the jobs to:\n\n- Explain/recommend food (rarely used)\n- Serve Food\n- Clear Tables\n\n...making the overall job more of a \"busboy\" than \"waiter\". For a high-end restaurant, this would of course destroy the experience, but let's be real, you're not really going for fine dining in an airport terminal, and some of us (me) actually prefer fewer blocking interactions.\n\nFor the rest, the restaurant could invest in a PWA or tabletop ordering system like [Ziosk](https://www.ziosk.com/).\n\n## Audience Segmentation\n\nProbably the biggest immediate unlock in terms of revenue is getting rid of the implicit assumption that every customer wants to be seated. If I didn't have an hour to spare, I would not be a customer of this restaurant. This seems like a lost opportunity. In fact if I misjudged the restaurant and went in with only 30 minutes to spare, I would likely have a very stressful time.\n\nShake Shack does a great job of this segmentation idea. Even though it is not a regular table service dine-in restaurant, it establishes a \"drinks and shakes\" line and an \"everything\" line. This recognizes the fact that people only want a drink are faster to order and serve compared to people who want both drinks and food. This contributes to increased overall turnover, as well as customer happiness because those with lower specific needs are treated accordingly.\n\nWe can apply this model to the airport restaurant by having a special \"quick service\" aisle at the counter. This would feature a section of grab-n-go food and drinks. This serve a much wider audience, and additionally any food prepared in-house can be batched (and therefore made a good deal faster as well).\n\nAt the extreme, this half-and-half model might in fact end up with the restaurant turning into a fast food (or \"fast casual\") restaurant if that is successful enough.\n\n## Misc\n\nA grab bag of other ideas I like:\n\n- reducing the number of menu choices not only makes it easier to stock inventory and to batch produce, but also reduces [paradox of choice](https://en.wikipedia.org/wiki/The_Paradox_of_Choice) for the customer and therefore turns over tables faster\n- combined payment/loyalty services across restaurants\n- no tipping\n- every item in a category has the same price\n\n## The Perfect Restaurant\n\nTo be clear, I don't mean \"perfect\" as in universally the best. Obviously hole-in-the-wall, crappily run restaurants can be downright amazing. I just mean \"perfect\" in terms of capital/operational efficiency. There are two existing models of restaurants which I like a lot in terms of capital efficiency:\n\n- [Cloud kitchens](https://thespoon.tech/sorry-techcrunch-cloud-kitchens-arent-an-oxymoron/) - restaurants with no \"front of the house\" and just go all in on delivery\n- but if you must have a front of the house: Ichiran Ramen has the best model\n\nIchiran takes the normal table layout:\n\n![https://cdn.vox-cdn.com/thumbor/rotfkUOln3GTqZVCxBGoVVRodqk=/0x0:3000x2004/1200x675/filters:focal(1260x762:1740x1242)/cdn.vox-cdn.com/uploads/chorus_image/image/64047807/20161020-Ichiran-13.0.0.1476987280.0.jpg](https://cdn.vox-cdn.com/thumbor/rotfkUOln3GTqZVCxBGoVVRodqk=/0x0:3000x2004/1200x675/filters:focal(1260x762:1740x1242)/cdn.vox-cdn.com/uploads/chorus_image/image/64047807/20161020-Ichiran-13.0.0.1476987280.0.jpg)\n\nand turns it into booths:\n\n![https://cms.qz.com/wp-content/uploads/2019/04/ichiran.jpeg?quality=75&strip=all&w=1600&h=900](https://cms.qz.com/wp-content/uploads/2019/04/ichiran.jpeg?quality=75&strip=all&w=1600&h=900)\n\nThese things are as amazing as they are controversial. The seats are arrangeable so that a slot of 4 seats can be taken up by 1 and 3 people, or 2 and 2, or 4 people, whereas at a typical restaurant even 1 person at a 4 seat table often means it is unavailable to others. The singular, uncomfortable focus of it means you are there just to eat and you don't dally. The menu choices are spartan.\n\n![https://images.squarespace-cdn.com/content/v1/5a42805a32601ef9384a031d/1557054552749-MUOUC2IR8AXFY2JQ6FPJ/ke17ZwdGBToddI8pDm48kO2EirJcbJ_u9gbpM6ANlFNZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpziOZQ1Gd-lJE91aJwIJmrKhZ9cq5_x7u6xs3JK1_D-juDmDgpvm6LDYr_IkTm9h6I/Ichiran++Ramen+for+Solo+Diners_Midtown+NY_NYC_K.Martinelli+Blog_Kristen+Martinelli.png](https://images.squarespace-cdn.com/content/v1/5a42805a32601ef9384a031d/1557054552749-MUOUC2IR8AXFY2JQ6FPJ/ke17ZwdGBToddI8pDm48kO2EirJcbJ_u9gbpM6ANlFNZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpziOZQ1Gd-lJE91aJwIJmrKhZ9cq5_x7u6xs3JK1_D-juDmDgpvm6LDYr_IkTm9h6I/Ichiran++Ramen+for+Solo+Diners_Midtown+NY_NYC_K.Martinelli+Blog_Kristen+Martinelli.png)\n\nThe key genius though, is the floor layout:\n\n![https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTxVrlL3SBqn7UIwNV7HfktS8-p54Q4f85GsbzizDbqGutXGODSAQ&s](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTxVrlL3SBqn7UIwNV7HfktS8-p54Q4f85GsbzizDbqGutXGODSAQ&s)\n\nDiners are arranged along one long corridor and waiters can see which need attention by way of buzzer - there is no need to navigate through tables of guests."
    },
    {
      "slug": "platinum-rule",
      "data": {
        "technical": false,
        "title": "The Platinum Rule",
        "subtitle": "and the Silver Rule",
        "slug": "platinum-rule",
        "categories": [
          "Reflections"
        ],
        "date": "2020-02-18T00:00:00.000Z",
        "description": "You've heard of the Golden Rule? \"Treat others as you want to be treated.\" Introducing the Platinum and Silver Rules."
      },
      "content": "\nYou've heard of the Golden Rule: **Treat others as you want to be treated**.\n\nI think it's incomplete. I think people actually operate by a higher standard. I propose the Platinum Rule: **Treat others as THEY want to be treated.**\n\n## The Platinum Rule\n\nTo understand how I got here, you have to understand that I have some particular personality traits that make the Platinum Rule relevant for me. I prefer directness. My bar for \"done\" is lower than yours. I like self aware people and humor. I prefer tough love.\n\nThis means I prefer shipping an imperfect thing and iterating rather than lining up my ducks in a row. This means I don't engage in [compliment sandwiches](https://www.wikihow.com/Use-the-Compliment-Sandwich-to-Critique). This means I make fun of myself and anything I strongly identify with, which can sometimes include people I work with. This means I often am too harsh on something I care about.\n\nSome of you are reading and nodding and don't see what's wrong. That's what's wrong.\n\nSuppose you ridiculously simplify human preferences down to More Particular vs Less Particular, and human interaction down to how you treating others vs how you want to be treated. The Golden Rule would advise More Particular humans to treat others like they want to be treated, which is a higher standard (however you define it) than Less Particular humans. This is fine, they just end up very considerate. However, if the Less Particular people were to take this advice, they would come up complete assholes to More Particular humans, who would be unable to work with them.\n\nHence, the Golden Rule is broken. It was made by a More Particular person who doesn't realize it.\n\nIt [doesn't really even matter](https://nassimtaleb.org/tag/minority-rule/) what the relative quantities of More Particular vs Less Particular people are - if these people are to work together, then they must coexist under a different social contract.\n\nI propose the Platinum Rule to be that contract: **Treat others as THEY want to be treated.**\n\nOn one hand this seems like basic human decency: Of course you should be considerate of others' feelings. Use their pronouns. Respect their agency and freedom.\n\nOn the other, it can seem FAR too accommodative - what if people abuse the system and want to be treated unreasonably well? Double standards exist everywhere when it comes to self interest. Well, a line must be drawn somewhere.\n\nIt's imperfect, but probably the right balance of where you and I should operate is somewhere *in between* the Golden Rule (extreme self-centered empathy) and the Platinum Rule (extreme other-centered accommodation).\n\n## The Silver Rule\n\nWhile noodling on this on a plane I also thought of a nice coda to this message. If the Platinum Rule is \"better\" than the Golden Rule, what would a Silver Rule look like? (*i like stretching ideas like this, I [took that from Brian Chesky](https://uxdesign.cc/applying-airbnbs-11-star-framework-to-the-candidate-experience-3f0b9c4e68a3)*)\n\nA Silver Rule would be something that is often treated as secondary to the others, but still important and valuable. And in the format of \"Treat x as X wants to be treated\".\n\nHere's my proposal for a Silver Rule: **Treat yourself as you treat others**. A nice inversion of the Golden Rule.\n\nIn [Gretchen Rubin's Four Tendencies Framework](https://www.businessinsider.com/gretchen-rubin-the-four-tendencies-framework-2017-4), she splits people by how they respond to inner and outer expectations, which seems very apropos to this topic. **Questioners** are most in need of the Platinum Rule. But **Obligers** probably need the Silver Rule most. \n\nSelf care must not give way to self sacrifice.\n"
    },
    {
      "slug": "post-graduation",
      "data": {
        "technical": false,
        "title": "Post Graduation Mindmap",
        "slug": "post-graduation",
        "categories": [
          "Advice"
        ],
        "date": "2019-02-21T00:00:00.000Z"
      },
      "content": "\nWhat are all the things you can do to improve as a developer after graduating from college or bootcamp?\n\nI made a little mindmap, focused on webdev but also based on surveying student interests in general.\nThe goal is NOT to do all of these, but to know what's out there -to- be learned and to have some method to our madness.\n\nSome recommended resources and advice are included inline, but always feel free to [ping me](https://twitter.com/swyx) for further recommendations on any topic as this list is not exhaustive.\n\nMy golden piece of advice for everything is to [Learn in Public](https://www.swyx.io/writing/learn-in-public/). Seriously, try it. In terms of HOW you should weight these 3 things, it is tempting to go heavy on the learning, but try to be more balanced. See also [my thoughts on specifically what to do after a bootcamp, with specific recommendation on hours spent](https://github.com/sw-yx/ama/issues/1).\n\n## Things to Learn\n\n- Languages\n  - Python\n  - Java/Kotlin\n  - Go, Rust\n  - TypeScript\n  - C/C++\n  - Elm\n  - Swift\n  - https://www.hntrends.com\n  - https://octoverse.github.com/projects#languages\n  - https://insights.stackoverflow.com/survey/2018/\n  - https://stackify.com/popular-programming-languages-2018/\n- Build tools ([Know your tools!](https://www.swyx.io/writing/know-your-tools/))\n  - Babel\n  - webpack vs rollup\n  - Git\n  - npm publishing/running/scripting\n  - CI/CD\n- Backend\n  - AWS (Architect, Developer)\n  - Serverless framework\n  - Security?\n  - Machine Learning\n  - Firebase\n  - Netlify\n  - Testing\n- Frontend\n  - Other Frameworks: Vue\n  - Dataviz\n    - D3\n    - vis.gl\n    - Victory\n  - CSS\n    - [CSS in Depth](https://www.amazon.com/CSS-Depth-Keith-J-Grant/dp/1617293458)\n    - [CSS Secrets](https://www.amazon.com/CSS-Secrets-Solutions-Everyday-Problems/dp/1449372635)\n  - Web Design\n    - https://github.com/sdras/design-for-developers\n    - https://medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-1-559d4e805cda\n    - https://refactoringui.com/\n  - Advanced Interaction\n    - React DnD, React-beautiful-dnd\n    - Accessible Modals (react-modal)\n    - Autocomplete/typeahead (Downshift)\n  - Testing\n    - Jest\n    - Mocha/Chai\n  - 3D\n    - Three.js\n    - Aframe\n  - Custom Animation\n    - popmotion\n    - react-spring\n  - Simple Animation\n    - http://animista.net\n    - http://daneden.github.io/animate.css\n    - http://tobiasahlin.com/spinkit\n    - http://www.transformicons.com/docs.html\n    - http://leaverou.github.io/css3patterns\n    - http://march08.github.io/animated-burgers\n    - react kawaii\n  - GraphQL\n    - Apollo\n    - urql\n    - Relay\n  - UI toolkits\n    - http://material-ui.com\n    - https://reactstrap.github.io/\n    - https://designsystemsrepo.com/\n- Misc\n  - React Native\n  - Unity\n  - Music (Tone.js)\n  - Wordpress\n  - Bash scripting\n  - Computer Networking\n    - https://github.com/alex/what-happens-when\n\nAdvice\n\n- Dont be afraid to pay, esp Egghead and Frontend Masters, but also books\n- Follow people and principles over individual tech\n- Open and edit node_modules\n- Cover your bases, but [Specialize in something](https://www.swyx.io/writing/specialize-in-the-new/)\n\n## Things to Build\n\n- Personal Projects/Apps\n  - Personal pain points\n  - dont try too many new things\n  - hook into nostalgia/pop culture/comedy\n- Open Source Libs\n  - https://www.firsttimersonly.com/\n  - https://hacktoberfest.digitalocean.com/\n  - [Redux](https://github.com/reduxjs/react-redux/issues/1177)\n  - Babel\n  - start with docs\n  - Github issue triage, reproduction\n  - make it something you use\n\nAdvice\n\n- [Clone Open Source Apps](https://www.swyx.io/writing/clone-open-source-apps/)\n\n## Things to Do\n\n- Interview prep\n  - CTCI\n  - YDKJS\n  - Leetcode\n  - Algoexpert\n  - Codewars\n  - Interviewcake\n  - HackerRank\n  - Pramp\n- Networking\n  - Twitter\n  - Coffee/Video Chats\n  - Meetups and Conferences\n  - Slacks\n- Answering questions\n  - Stackoverflow\n  - Github issues\n  - Reddit beginner questions\n- Writing/Creating\n  - Draw\n  - Write\n  - Youtube\n\nAdvice\n\n- [Dont call yourself a programmer](https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/)\n"
    },
    {
      "slug": "private",
      "data": {
        "technical": false,
        "title": "Private Conversations are Private",
        "subtitle": "I messed up. Mea culpa.",
        "slug": "private",
        "categories": [
          "Reflections"
        ],
        "date": "2019-10-27T00:00:00.000Z"
      },
      "content": "\nI recently made a mistake. I make many, but this involved someone important to me and to people I know, so it stands out among the general cacophony of my many other failures. I wanted to own up to what I did, explain how I handled it, and in general take ownership of the problem.\n\nI won't discuss who or what this is about, so don't bother asking. It isn't important to this piece. I'm just working through my own failure for self improvement and to make this an explicit policy of this blog.\n\n## What I Did\n\nI met this person at a social event, and had a very enlightening conversation with them on something they are an expert on. I thought it was fascinating and illuminating, and so subsequently publicly wrote down what we talked about and what I thought about it (a mixture of just internalizing the message but also responding to what I understood of it as I thought it was an important topic).\n\nThis was unethical and a bad idea, because it made a private conversation public without explicit consent. It irreversibly broke trust, upset the person involved and put them in potential trouble with their employer and professional contacts, and further impacted other people we are both related to.\n\n## How I Handled It\n\nWhen they got in touch, I actively listened to their concerns and offered to take the post down. They didn't demand it, but I took the post down of my own accord because I regretted my mistake and did not want to cause further damage than I had already caused. I apologised to them and related people concerned.\n\nI got lucky that the damage was rather contained. It could have been a lot worse and potential cause for firing, on both sides. Instead I got to mostly apologize profusely and have my personal relationships damaged. I won't always be this lucky in future.\n\n## Why I Made This Mistake\n\nNone of the below excuses what I did. I am just trying to identify proximate steps I can take so I can prevent future recurrence.\n\nBefore publishing, I did consider asking for consent/review, but did not, and this split second decision, which didn't feel weighty at the time, was the critical wrong decision to make. In fact, I thought *not* asking was preferable, in a tremendous lapse of judgment. I don't lack for mentors to consult on these things, but the fact that I didn't realize this was so important also meant I didn't think to ask for a second opinion. In future, I should more proactively consult mentors when in any doubt.\n\nA deeper why, that also doesn't excuse what I did, is that I have not held myself to journalistic standards, on this blog or anywhere else. I understand what obtaining \"on the record\" consent is, for card-carrying journalists, but I just didn't view *myself* as subject to that on my own blog (again, this isn't something I previously gave any thought at all to). I actively promote #LearnInPublic, and have generally enjoyed the privilege to write up my learnings and reflections on anything I want. However, this was the first involving private views of a specific individual (regardless of how much personal and professional mix), not publicly sourcable anywhere else, and I should have realized that this is a completely different type of content which I do not have any unilateral right to make public.\n\nBasically I made a rank error, an extreme rookie mistake as a \"new\" blogger. I expect better of myself and my lapse in judgment will cloud my relationships and work for some time. I can't undo that but I can admit to and learn from it.\n\n## Explicit Policy\n\nAs this blog becomes more of a \"thing\", whatever this thing is, I will need to set rules like this for myself to follow so that people I interact with don't get hurt. So, despite the obvious common-senseness of it all, I will make it an explicit policy here and everywhere else I work: \n\n**Private Conversations are Private.**"
    },
    {
      "slug": "recap-2020-jan",
      "data": {
        "technical": false,
        "title": "Jan 2020 Recap",
        "slug": "recap-2020-jan",
        "categories": [
          "Reflections"
        ],
        "date": "2020-02-05T00:00:00.000Z",
        "description": "a belated recap, highlighting my best writing over the past couple months"
      },
      "content": "\nHello mailing list friends!\n\nFirst things first: **This mailing list will be changing frequency.** I will be sending updates once a week instead of once a month, starting next Friday. Just wanted to give a heads up because it does change the expectations I originally set.\n\nThe good news is that I'm doing this because I'm writing a lot more. I didn't have much to report for December (didn't end up getting very far with Rails, just didn't spark joy), but hit a good streak in January writing something every day. \n\nSome highlights from the past 2 months:\n\n- **Technical**\n  - [Why I Enjoy Svelte](https://www.swyx.io/writing/svelte-why): Reasons I enjoy Svelte, despite not using it for work\n  - [Svelte Zen Garden](https://www.swyx.io/writing/svelte-zen-garden): reigniting the Zen Garden era with modern technology\n  - [Optimistic, Offline-First Apps](https://www.swyx.io/writing/svelte-amplify-datastore): This is my attempt adapting an Amplify DataStore tutorial to Svelte\n  - [Best Practice Open Source Repo Setup](https://www.swyx.io/writing/oss-repo-setup): Quick and simple ways to set up Open Source Repos with Best Practices\n  - [The Many Jobs of JS Build Tools](https://www.swyx.io/writing/jobs-of-js-build-tools): A discussion of why JS developers use build tools like Webpack and what we do with them, for new JS developers.\n- **Non Technical**\n  - [Favorite Podcasts](https://www.swyx.io/writing/fave-podcasts): 250 Podcasts I enjoy listening to\n  - [Two Words](https://www.swyx.io/writing/two-words): The best way to sell to, brand, persuade, or inspire people is to condense your idea down to Two Words.\n  - [Collapsing Layers](https://www.swyx.io/writing/collapsing-layers): As Moore's Law ends, devices multiply, and software becomes critical to life, we must take another look at our full stack for continued gains in efficiency, reliability and security.\n  - [CFP Advice](https://www.swyx.io/writing/cfp-advice): Some thoughts on writing your first few CFPs\n  - [The Ultimate Hack for Learning In Public](https://www.swyx.io/writing/learn-in-public-hack): for people wanting to #LearnInPublic faster\n\nI'm still in my product rotation at work, so I haven't done any speaking. In fact this year I'm mostly only doing remote talks, trying to travel less. (Hit me up if you organize a remote event!)\n\nThat's it from me. All the best for your February, all 29 days of it!\n"
    },
    {
      "slug": "recap-nov-2019",
      "data": {
        "technical": false,
        "title": "Nov 2019 Recap",
        "slug": "recap-nov-2019",
        "categories": [
          "Reflections"
        ],
        "date": "2019-12-03T00:00:00.000Z"
      },
      "content": "\nHello mailing list friends!\n\nThis month was a rough transition as I transitioned from speaking to learning and changed teams. I attended Chrome Dev Summit and Webflow's NoCodeConf (several people hit me up for takes, let me know if you have thoughts or questions) and then flew home to celebrate my little sister turning 21 :)\n\nSpeaking/writing schedule was accordingly light - I did share what I've done with the [Svelte Site Generator](http://npm.im/ssg) at the Svelte Society NYC meetup, and did a recap of my [Concurrent React from Scratch](https://www.swyx.io/speaking/react-from-scratch) talk for a local React meetup. Probably the highlight of the month was being invited to do a podcast with Software Engineering Daily, [one of my favorite podcasts](https://www.swyx.io/writing/faves-se-daily), but it's not out yet.\n\nI also gave a workshop on creating Node CLI's with [Egghead.io](https://egghead.io/s/26zf5), and have just got done rerecording them as individual guided lessons. The full recordings will be released in December! Something I definitely didn't expect would happen to me this year is becoming so interested and passionate about Node CLI's. I guess it came out of learning a ton about CLI tools and doing a bunch of thinking around CLI Developer Experience working on [Netlify Dev](https://news.ycombinator.com/item?id=19615546) this year.\n\nPart of what gives me any confidence at all in what I'm doing is the encouragement from people I look up to like Jeff from SEDaily and Joel at Egghead, as well as other mentors who've taken time to help me even when I screw up badly. I often feel like I would do better if I spent less time with my head up my own ass and more time internalizing the advice I get and just doing that. If I fail even with this much help, there's really no excuse.\n\nFor December I'm interested in learning some Rails (Netlify's backend is partly Rails) and also trying out React-Native-Web for a small side project. I'd also like to write more, with a good deal more drafts and \"paddling under the water\" before the final output. My confidence took a huge crash this month and I need to shake it off and get back on the horse. I am exploring using [Notion](https://www.notion.so/?r=8f6ced99cc964a9eb3ae619763866293) to do this, the personal plan looks really good for this.\n\nThat's it from me. All the best for your December and let me know if there's anything you'd like me to write about!\n"
    },
    {
      "slug": "recap-oct-2019",
      "data": {
        "technical": false,
        "title": "Oct 2019 Recap",
        "slug": "recap-oct-2019",
        "categories": [
          "Reflections"
        ],
        "date": "2019-11-02T00:00:00.000Z"
      },
      "content": "\nHello mailing list friends!\n\nOctober was almost the total opposite of September - Conference season came back in full force and I was back to doing a bunch of talks, with even a 4 conference week. I did finally release the large tutorial project I worked on in Sept.\n\nIn Nov I'll be rotating on to the product team for the next 3 months.\n\n- Talks:\n  - [Complete Intro to Netlify in 3.5 Hours](https://www.swyx.io/speaking/netlify-freecodecamp-intro) - a collaboration with FreeCodeCamp.\n  - STAR Apps (at [All Things Open (20 min)](https://www.swyx.io/speaking/star-apps-allthingsopen) and [SV Code Camp (1 hr)](https://www.swyx.io/speaking/star-apps-svcodecamp)) - a talk-length fleshing out of [my CSS Tricks article](https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/) from earlier this year.\n  - [Concurrent React from Scratch](https://www.swyx.io/speaking/react-from-scratch) - an even more ambitious followup to my well received [Getting Closure on Hooks](https://www.swyx.io/speaking/react-hooks) talk from June, this time introducing the basics of React Fiber, Time Slicing, and Suspense from scratch. The video isn't up yet but I've put the code up.\n- Podcasts:\n  - [JAMstack & Serverless with Netlify](https://devmode.fm/episodes/jamstack-serverless-with-netlify) - I found the DevMode.FM podcast recently and started being a vocal fan, and they invited me on to explain Netlify.\n  - [ReactConf Preview](https://www.swyx.io/speaking/react-podcast-suspense) - chantastic invited me back on the React Podcast (yay repeat appearance!) to recap what we knew about Concurrent React. I was very wrong about Relay, but everything else was roughly right.\n- Writing:\n\n  - [Donating $10k to FreeCodeCamp](https://www.swyx.io/writing/donating-to-freecodecamp) - my response to FCC's call for donations, which has been picked up for a [#PayItBackwards campaign](https://www.freecodecamp.org/news/payitbackwards-alumni-donation/) for FCC's 5 year anniversary.\n\n  I haven't had much time to continue work on swyx.io yet. Mark Erikson gave me important feedback about the UX of the site, and conversations with Jared Palmer and closely studying 11ty have helped me narrow down what I want to do for SSG so I also put up a [roadmap](https://github.com/sw-yx/ssg#project-roadmap) for what I want to see. I'll present this at the new Svelte meetup on monday. (another thing I started in October)\n\nThat's it from me. All the best for your November and let me know if there's anything you'd like me to write about!\n"
    },
    {
      "slug": "recap-sept-2019",
      "data": {
        "technical": false,
        "title": "Sept 2019 Recap",
        "slug": "recap-sept-2019",
        "categories": [
          "Reflections"
        ],
        "date": "2019-10-01T00:00:00.000Z"
      },
      "content": "\nHello mailing list friends!\n\nSeptember was the first month in a long time I didn't do any talks (I was a guest on a couple of podcasts!). As you'll see, I poured my energies into blogging, while at work my time was quite eaten up by a large video tutorial project that should be released soon.\n\nSome highlights and commentary:\n\n- [Static Svelte: JavaScript Blogging with 93% less JavaScript](https://www.swyx.io/writing/svelte-static) - I rewrote my blog to Svelte/Sapper to feel out the developer experience. While Svelte delightfully fast and small and feature complete for this goal, I immediately missed the data pipelining experience from Gatsby. Static export is surprisingly not as simple as \"just run SSR once for every route\". It is too easy to fetch data extremely inefficiently, and I ran head first into this. I wrote about this pain in [Bad Ways to Get Data](https://www.swyx.io/writing/bad-ways-to-get-data).\n- [Why I Won't Choose To Be A Manager](https://www.swyx.io/writing/not-manager) is a reflection on career paths prompted by a Charity Majors blogpost and weighing that against my own mixed feelings on the impact of management versus my flaws and preferences.\n- After a [lazy joke tweet about left-pad](https://twitter.com/swyx/status/1173260769041035264), I felt guilty about making fun of JS, so I wrote [Why JavaScript Tooling Sucks](https://www.swyx.io/writing/js-tooling) for myself and other JS devs to think through why we're in [the mess we're in](https://www.youtube.com/watch?v=lKXe3HUG2l4). I think it is slowly getting better and the correct response to \"JavaScript sucks lol\" is _not_ to give up.\n\nI also wrote some things for work:\n\n- [Git-Centric Workflow](https://www.swyx.io/writing/netlify-git-centric)\n- [Using Next.js as a Static Site Generator for Netlify](https://www.swyx.io/writing/netlify-nextjs-ssg)\n- [JAMstack for Indie Hackers](https://www.swyx.io/writing/netlify-jamstack-indiehackers)\n\n**Reader Question**: Right now I'm posting this \"work content\", where the reader profile is more beginner oriented, alongside \"personal content\", where I expect everyone to be at least at my level or better, and understanding that I'm pushing myself and [learning in public](https://www.swyx.io/writing/learn-in-public). Does this mix confuse or annoy you when you [visit my site](https://www.swyx.io/writing/)? What are good ways to handle this? I'm definitely keen on having my site be a central place to find all my work regardless of target audience, but I haven't necessarily figured out the \"Information Architecture™\".\n\nOctober is a busy month. I'm hosting [the first Svelte Society meetup](https://www.meetup.com/Svelte-Society/events/zwkkjryznbcb/) today, and then speaking at/attending conferences in NY/NJ, Raleigh, San Francisco, and London. I don't have an events page up yet but feel free to reply if you'd like to meet!\n\nThat's it from me. All the best for your October and let me know if there's anything you'd like me to write about!\n"
    },
    {
      "slug": "scaling-coding-communities",
      "data": {
        "technical": false,
        "title": "Scaling Coding Communities",
        "slug": "scaling-coding-communities",
        "categories": [
          "Reflections"
        ],
        "date": "2020-02-04T00:00:00.000Z",
        "description": "People who can scale coding communities are 🔥 🔥 🔥"
      },
      "content": "\nI just came off organizing [Svelte Society 4](https://www.downtomeet.com/Svelte-Society-NYC/Svelte-Society-NYC-4-Fab-Feb-1162378) today.\n\nI'm a complete newbie at this, and am completely stretched thin, but I am excited by the challenge.\n\n[I recently tweeted](https://twitter.com/swyx/status/1221983495242674176):\n\n> People who can scale code: 🔥\n>\n> People who can scale communities: 🔥 🔥\n>\n> People who can scale coding communities: 🔥 🔥 🔥\n\nOf course this is a little bit self serving given my React and TypeScript community work. But I do wonder about the multiplicative potential of such a concept. \n\nYou can write the best code in the world but if you don't rally people around to use it then it is going to have limited impact.\n\nYou can rally people and have great impact with no code at all.\n\nBut if you rally people who can code and wield software (and hardware) to their respective purposes..."
    },
    {
      "slug": "slowmad-qna",
      "data": {
        "technical": false,
        "title": "Slowmad Q&A",
        "slug": "slowmad-qna",
        "categories": [
          "Reflections"
        ],
        "date": "2019-08-19T00:00:00.000Z"
      },
      "content": "\nThe other thing about [Netlify Year One](https://www.swyx.io/writing/netlify-year-one) that people are generally interested in is my experience of remote work. As I put it [recently](https://mobile.twitter.com/swyx/status/1154916667606130689):\n\n> I’ve been working remotely for almost a year, about 70% of which I was in NYC, and the rest I have spent as a “slowmad” in SF, Hawaii, Mexico, and Singapore. Convos with @ossia, @ggallynn, et al made me realize there’s enough interest for a blogpost. What would you like to know?\n\nHere are my takeaways. TL;DR: it wasn't all roses! I am settled into a long term lease now in NYC and it was a fun travel season while it lasted.\n\n## Table of Contents\n\n## What is a \"slowmad\"?\n\nI think the idea of a \"digital nomad\" is very overrated. Travel isn't something to be glorified. It can be very disruptive and I don't get as much out of sightseeing as I could just browsing the wikipedia page of the thing (lame, I know). I like getting to know a place, traveling for a purpose, meeting people. Slow travel. I like the Slowmad idea.\n\n## Some Context?\n\nNetlify is my first remote job. This was very gratifying as I got into webdev partially because of the optionality of being remote, and to go remote so soon was certainly an unexpected turn of events.\n\nOf course, I had some reservations, because in theory getting some in-person mentorship in the early days is better. However my first job and anecdotal evidence indicated that this probably wasn't all it was cracked up to be anyway. So I went for it.\n\nI interviewed and was hired entirely remotely - my first time meeting the founders or indeed any Netlify employees was after I was already hired. The interview process I have recounted in the [Year One](https://www.swyx.io/writing/netlify-year-one) post, but probably the clincher was a mutually agreed take home project which I threw myself into for an entire weekend. We had a Slack channel open and I took it on myself to communicate every step of my process, including my roadblocks, and I believe that was a key part of what they liked. (I obviously agree with this decision)\n\nI think having good documentation and erring on the side of overcommunication is very important for a remote job. Fill in the blanks on the arguments here, I'll probably agree with all of them.\n\n## Why So Much Travel?\n\nSome of it was not by choice, much of it was. When I switched jobs my nonimmigrant status required me to return home to Singapore for the fastest way to get a new visa. My lease in Long Island City happened to be coming due, my ex-roommate was moving out, and winter was coming. So I simply let the lease expire, put my stuff in storage, and left for warmer climes with my two suitcases.\n\nI didn't know it then, but I wouldn't see the rest of my stuff for another 7 months.\n\nOnce I had my visa, I mixed [conference travel](https://www.swyx.io/about) with slow-madding (this not an exhaustive account, I had a few weeks here and there in some halfway house or friend's place in NY):\n\n- I spent January in SF for some conference and the Netlify All-hands.\n- February was in Hawaii with JSConfHi and working out of a delightful coworking space.\n- March was my only PTO to date for a Socorro dive trip (planned for over a year) with dive buddies and extended stay in Mexico, with stopovers in LA, SF, and Florida for speaking/work.\n- April and May was my first time back in NYC (having entirely skipped out on cold season), but I knew I would be traveling again (including a brief trip to Bangalore) and didn't want to commit to a place so I found a dirt cheap, really crappy (the floor creaked when I walk around, and the roommate yelled at me if I didn't push my chair back in after a meal) sublet in Journal Square. During these two months I actively scouted and found my heart setting on my current place.\n- June brought me back to Singapore for my big JSConfAsia talk (which Netlify did not support) and associated events, and then to Toronto and finally back to NY/NJ. I had more travel planned, but nothing that intense, so I decided to finally launch the roommate hunt and finally sign my first long term lease for a place since leaving SF 3 years ago.\n\nWhat can I say? NY real estate has not been kind to me and isn't cheap for a single adult.\n\n## I'd like to know your biggest day to day challenges in finding good places to stay that also have reliable Internet & other amenities.\n\nThis is actually pretty easy! I always go for a [Hostelling International](https://www.hihostels.com/) hostel if one exists because I know they prioritize good internet, charging points, and a kitchen at affordable rates. Failing which I would recommend splitting up where you stay and where you work, for example getting a co-working space like [Impact Hub](http://www.impacthubhnl.com). For me it is important that it is 24 hours as I am a night owl.\n\n## What are some things you wish someone had told you your first month? What was the biggest challenge? What was easier than u thought it would be? What are the top things you _need_ to do this successfully?\n\n**It's not going to be cheap and living out of a suitcase isn't fun**. My current apartment building, with a gym and living room and bbq pool deck, is $1750 a month. That's $58 a night. If you're not committing to a long term place you are going to be paying **higher** rates for **shorter** terms for **worse** living conditions. In NYC the best value for money is [HI NY](https://hinewyork.org) between \\$70-90 a night depending on the night for bunk beds with no safety or privacy. You often can't cook so you'll be eating out more and that costs more of course.\n\nThis is self inflicted, as I chose not to go to cheap places for the most part, to do more speaking engagements and meet more people in places we wanted to focus on. There's another version of this that involves swinging through Thailand, Indonesia, or Columbia for next to nothing but none of these cheap countries coincide with work related things. I don't regard that kind of travel as appropriate for this job.\n\n**Find a coworking space.** No, you won't do fine in a coffee shop or using the hostel wifi sitting in your bunk bed.\n\n**Leave the microphone at home**. You won't have privacy to record jack shit.\n\n**Make all your meetings.** This isn't something I wish someone had told me, it is just a rule I made for myself and largely stuck to. Remote travel is something you choose to take on on your own time. The company should by and large not care where you are but your end of that bargain is making all the meetings you are supposed to do regardless of timezone or what else you have going on (within reason). This demonstrates you are responsible enough to handle the travel aspect of the job. Nobody asked me to commit to this, but I do think this is important to uphold the implicit contract between you and your company.\n\nSticking to this rule regardless of timezone was probably my biggest challenge as I am a very flow-state driven person and can drive myself to many 3am nights working on a thing.\n\nI don't think anything was easier than I thought it would be, but maybe because I didn't come at this with much prior expectations.\n\n## Transition from Corporate Life: Anything different from in office and remote?\n\nWhat a tough question to answer! I have three transitions to discuss here: transition to remote, transition to a small company, and transition to a public facing job.\n\n**Remote**: I think commuting every day, having lunches with your team every day, being able to see everyone leaving for the day, that is \"normal\" corporate life. Small talk, watercooler talk, body language, stocking up on office stuff, whiteboarding, all of that happens in a real office.\n\nWhen you go remote you transition from that routine to something a lot more ephemeral. People have to _announce_ that they're leaving for the day, if they even bother to do that. Most of the time if your coworkers have Slack on their phone they're in a perpetual state of \"maybe always being around\". (A subtle trick/reason why employers like having Slack, is the FOMO from missing chats and pings and thereby implicit longer availability hours).\n\nWe've loosely tried to do \"virtual coffee chats\" where I suggested adopting [KnowYourTeam](https://knowyourteam.com/) style get-to-know-you convos. It's nice and I work with great people but you can't help the awkwardness of a scheduled social conversation.\n\n**Startup**: Another transition that has nothing to do with remote-ness is the \"big company to small startup\" transition. My prior job was at a large company of about ~2k devs, although I worked in a small unit of about 100, the culture was very much one of overwhelming structure and top down rule by fiat (with often Dilbert-level results which I am afraid I can't share for fear of libel). I went from that to being employee ~40 with constantly shifting management structure and a lot of self driven work with implicit trust that I will do my best in the best interests of the company. I have worked in a previous startup of this size so I knew how it was, so there wasn't much culture shock.\n\nI guess what is important is we all seem to have a personal preference for the smaller company feel. It's less pay and more ownership. A pretty poor trade if you look at \\$ per hour, but higher in terms of self actualization.\n\n**Public**: One last transition I made in this job is the public nature of my job in particular. In my previous job I had to apply for clearance to speak in public, due to financial regulations, despite my content having nothing to do with the company whatsoever. I did my writing and speaking on nights and weekends in my own time. Now I am _encouraged_ to write and speak on company time. I think this builds [portable capital](https://www.swyx.io/speaking/learn-in-public-nyc) and assign a significant amount of nonmonetary value to this opportunity.\n\n## How do you maintain focus?\n\nCoworking space is important, but also I constantly have earphones on me. I switch between Airpods, Apple Beats X, and my Bose QC 35's and that helps me tune out pretty much anything. Only restricting travel to weekends is also helpful so that it doesn't disrupt the work week.\n\n## How do you resist the temptation to stay at home where the snacks are?\n\nEasy. I had no home.\n\n## I consider community/camaraderie an important aspect of work. Does it get lonely while working remotely? How do you deal with it?\n\nI don't think I do this well. I was a lone ranger for much of my travel. Although I did actively participate in every local meetup at every location, beyond that I rarely came out of my shell. [Hosteling International](https://www.hihostels.com/) will organize team events and movie nights, I basically only took part in this while in SF because they seemed the most welcoming. This lack of established social group is one reason I keep coming back to NYC.\n\n## How far ahead do you plan travel? What do you do to find places? How big is your support network in places you go?\n\nI plan travel between 2 weeks to a month out. I really like how [Hosteling International](https://www.hihostels.com/) caters to needs of remote workers so I typically check if there's an HI in that location first. I don't usually have any support network but all the places I go to speak English.\n\n## Where did you feel most productive, where less and why? Why choose NYC as a base and not somewhere else?\n\nI felt most productive in Hawaii (explained below), and least in Mexico (explained below). NYC is my base because it was where I was hired and I have supported the NYC tech scene for a while now. I also have college and past work friends in NYC and in general love and know the city well. Even then I feel I have much to explore and grow with the Greatest City In the World™.\n\n## What inspirations did you get by working from different places?\n\nI think Hawaii was my favorite non-home spot (I consider NY and SG home). I found a [24 hour coworking space](https://impacthubhnl.com/) that did wonders for my productivity, being able to work whenever I wanted, with great Hawaiian food and weather. I powered through my work and the first half of my Machine Learning course while there. I even got to speak at a local meetup and a local bootcamp and give some inspiration to fellow folks, or on another day also going for a great morning dive and be back at work in the afternoon. Hawaiians feel the dissociation from the mainland very strongly and all the techies want to leave to go to \"tech hubs\" (their term). I think thats true for junior talent, but I think Hawaii is a very good spot for remote workers if they can handle the occasional 7am meeting due to timezones. Traffic is a nightmare and the Honolulu Rail project is an embarrassment.\n\nMexico was a lot about partying and getting wasted. I didn't like it very much but it was cheap (\\$15/night hostels!) and my friends were there.\n\nI didn't spend long in LA, but I really liked JS.LA. In general I feel like the tech scene is really good in LA. [Ben Horowitz is forever going on about how tech and entertainment have a lot of similarities](https://a16z.com/2018/09/25/michael-ovitz-entertainment-culture-negotiation-talent/), and you can feel it speaking with people there. A good mix of startups, agencies, ecommerce, social media, even Google has a big presence there now. Toronto is a nice runner up in this category.\n\n---\n\nPhew that was a long list and helped me work though a lot of reflections! I hope that answered some questions, I know my experience is going to be very different from others who've also traveled-and-worked so please know that you ought to shape your own remote work journey the way that fits best for you. I definitely don't feel like I've got it figured out but I've got a bunch of experience under my belt now.\n"
    },
    {
      "slug": "two-words",
      "data": {
        "technical": false,
        "title": "Two Words",
        "subtitle": "The Secret of Viral Ideas",
        "slug": "two-words",
        "categories": [
          "Ideas",
          "Marketing"
        ],
        "description": "The best way to sell to, brand, persuade, or inspire people is to condense your idea down to Two Words.",
        "date": "2020-01-25T00:00:00.000Z"
      },
      "content": "\n## The Power of Two Words\n\nI've been observing a pattern in marketing and microcopy. I'm not sure if it's a [McLuhanite](https://en.wikipedia.org/wiki/The_medium_is_the_message) product of our times, or if it is a truth that has always been with us ([Carpe Diem?](https://en.wikipedia.org/wiki/Carpe_diem)). But it exists, and it is powerful, and once you see it you will see it everywhere:\n\n> The best way to sell to, brand, persuade, or inspire people is to condense your idea down to **Two Words**.\n\nThat's it, that's the idea. Everything down to Two Words. Even the idea of Two Words.\n\n## Table of Contents\n\n## The Law of Two Words\n\nEvery idea attempts to condense itself until it hits Two Words. Those ideas which cannot are replaced by ones which can.\n\n## What?\n\nI first noticed the **Two Words** phenomenon when thinking about why some taglines catch on more than others. With admittedly a lot of effort, [Dharmesh Shah](https://twitter.com/dharmesh) and [Brian Halligan](https://en.wikipedia.org/wiki/Brian_Halligan) were able to obsolete an entire generation of marketing software by inventing [Inbound Marketing](https://www.hubspot.com/inbound-marketing).\n\nAll of a sudden, it became clear to marketers that top of line CRMs were insufficient. Marketers could educate each other what inbound marketing was - the phrase itself implied the existence of outbound marketing, and the natural desirability one over the other was obvious but not too obvious. It allowed people to carve out [sections of the new real estate created](https://www.google.com/search?q=types+of+inbound+marketing), benefiting them but also growing the entire category.\n\nYou see this a lot with books as well. Taleb popularized the idea of the [Black Swan](https://en.wikipedia.org/wiki/The_Black_Swan:_The_Impact_of_the_Highly_Improbable). Seth Godin made a career out of unforgettable imagery with [Purple Cow](https://www.amazon.com/Purple-Cow-New-Transform-Remarkable/dp/1591843170). Of course, we don't have to stick to the color gimmick: Peter Drucker brought the [Effective Executive](https://www.amazon.com/Effective-Executive-Definitive-Harperbusiness-Essentials/dp/0060833459) in vogue, James Carse wants us to play [Infinite Games](https://www.amazon.com/Finite-Infinite-Games-James-Carse/dp/1476731713), and Robert Kiyosaki, despite his 4 word book title, tellingly sells his idea at [RichDad.com](https://www.richdad.com/). Amazon is the [Everything Store](https://www.amazon.com/Everything-Store-Jeff-Bezos-Amazon-ebook/dp/B00BWQW73E), Facebook is the [Social Network](https://en.wikipedia.org/wiki/The_Social_Network). Techbros are particularly fond of the [Miracle Morning](https://www.miraclemorning.com/) and VGR's [Premium Mediocre](https://www.ribbonfarm.com/2017/08/17/the-premium-mediocre-life-of-maya-millennial/). Even as you read this, people are enthusiastically telling their friends about the benefits of [Radical Candor](https://www.radicalcandor.com/) and [Digial Minimalism](https://www.amazon.com/Digital-Minimalism-Choosing-Focused-Noisy/dp/0525536515), the threats of [Surveillance Capitalism](https://en.wikipedia.org/wiki/Surveillance_capitalism), and making themselves better via [Atomic Habits](https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/0735211299). Kanye literally began his career with [Two Words](https://genius.com/Kanye-west-two-words-lyrics).\n\nBrands? Andy Rachleff pitchess Wealthfront as [Self-Driving Money](https://www.youtube.com/watch?v=mpB8yZSv7r0). Apple is for people who [Think Different](https://www.youtube.com/watch?v=cFEarBzelBs), Tesla stands for [Sustainable Transport](https://www.tesla.com/blog/mission-tesla).\n\nPolitics? [Frank Luntz](https://en.wikipedia.org/wiki/Frank_Luntz) has it down to a science. You've heard of _death taxes_, _energy exploration_ and _climate change_ because of him.\n\nIn Marie Kondo’s books, she uses the Japanese word ときめく (tokimeku) as her guiding principle, literally “to flutter,” “to throb,” “to palpitate,” or “to beat fast,” as your heart would when it feels excited. When Cathy Hirano translated _The Life-Changing Magic of Tidying Up_, she considered “bring pleasure,” “speak to your heart,” “brighten your world,” “give you a thrill,” and “make you happy” in translating _tokimeku_. [She settled on \"Spark Joy\" and the rest is history](https://www.dictionary.com/e/what-does-marie-kondo-mean-when-she-says-spark-joy/).\n\nBut **Two Words** isn't just for people trying to sell you things. It scales right down to identities.\n\nIf you can pitch _yourself_ in two words, you stand an extraordinarily good chance of being remembered and called on for your area of expertise. Neil deGrasse Tyson delights in being your [Personal Astrophysicist](https://www.vice.com/en_us/article/3bj7yn/neil-degrasse-tyson-is-your-and-everyone-elses-personal-astrophysicist-1026). In How I Met Your Mother, Barney Stinson takes pride in the fact that he has [a \"guy for everything\"](https://www.youtube.com/watch?v=r5wsiMRYm2Y). This is the ultimate faux luxury - making people feel better/smarter/more powerful by the mere fact that they know you. Taking gender out of it, you want to be everybody's go-to person for your thing. Hence the [Points Guy](https://thepointsguy.com/), the [RideShare Guy](https://therideshareguy.com/). You don't even need to be the World Expert on your thing. Just plant your flag, put out your bag signal, make it easy for people to know what to call on you for. I have been \"the **\\_\\_** guy\" in my office for everything from Excel to food recommendations.\n\nWhatever you are into, whatever your field is, look at the successful movements that are going on and spot the Two Words:\n\n- Developers might like the idea of being a [Indie Hacker](http://indiehackers.com/) or [Digital Nomad](https://en.wikipedia.org/wiki/Digital_nomad). They explain Rust to each other as enabling [Fearless Concurrency](https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html). I often explain [Netlify](https://www.netlify.com/) as [Serverless](https://serverless.com/) [Heroku](https://www.heroku.com/). Everyone uses [Open Source](https://en.wikipedia.org/wiki/Open_source).\n- Business minded startup folks are [Growth Hackers](https://andrewchen.co/how-to-be-a-growth-hacker-an-airbnbcraigslist-case-study/) and [Product Managers](https://medium.com/pminsider/the-history-and-evolution-of-product-management-part-1-23cb7a858f05). John Cutler almost regrets the virality of [Feature Factories](https://news.ycombinator.com/item?id=22335738).\n- Mottos: Naval tells us to [Productize Yourself](https://nav.al/productize-yourself), gather \"Specific Knowledge\". Bezos reminds shareholders it is always [Day One](https://www.forbes.com/sites/quora/2017/04/21/what-is-jeff-bezos-day-1-philosophy/). Don Valentine wants us to keep in mind [Who Cares?](https://sequoiacap.com/article/remembering-don-valentine/)\n- Musicians embrace [Hillbilly Flamenco](https://sive.rs/hillbf) and [\"power-pop\"](https://sive.rs/trshr)!\n- The Health-conscious might be into [Intermittent Fasting](https://www.healthline.com/nutrition/intermittent-fasting-guide), [Quantified Self](https://en.wikipedia.org/wiki/Quantified_self), or even [Weight Watchers](https://www.weightwatchers.com/us/).\n- General socio-political movements can often take this form: [Lean In](https://leanin.org/), [Be Better](http://www.bebettermovement.com/), [Time's Up](https://timesupnow.org/), [Me Too](https://en.wikipedia.org/wiki/Tarana_Burke)\n- [Time Well Spent](https://www.ted.com/talks/tristan_harris_how_a_handful_of_tech_companies_control_billions_of_minds_every_day?language=en) became [Humane Technology](https://humanetech.com/)\n- Greta Thunberg's [School Strike for Climate](https://time.com/person-of-the-year-2019-greta-thunberg/) became #ClimateStrike.\n\nFrom the last example, it can be tempting to conclude that the hashtag, SEO, and online communication in general have contributed to this trend of ignoring nuance and condensing complex ideas and systems down to two words. That's surely partially true, but I think the reasons for the Two Words phenomenon is more fundamental.\n\n## Why Does It Work?\n\nIt is no secret that [brevity is powerful](https://www.goodreads.com/quotes/tag/brevity). So why not shrink everything to One Word?\n\nI think One Word ideas are possible, but can be too vague. You can run a campaign on [Hope](https://en.wikipedia.org/wiki/Barack_Obama_%22Hope%22_poster) or write a bestseller on how we are all [Hooked](https://www.amazon.com/Hooked-How-Build-Habit-Forming-Products/dp/1591847788), but the words in themselves don't really explain your specific point of view on the world. You could try to go for an acronym, or a portmanteau, but good ones are rare and take a while to get acceptance.\n\nFor maximum virality, ideas should be:\n\n- Easily memorable/quotable\n- Self explanatory\n- But still open to interpretation and therefore being co-opted and therefore being spread\n- Repurposable by others (e.g. who want to carve out subsections of your idea)\n- Different - sets itself apart from the norm in some way\n- Important\n\nThe easiest way to attach yourself to something important and yet differentiate yourself is to add a word to an existing important word. Hence: _Inbound_ Marketing. _Servant_ Leadership. _Atomic_ Habits. Bonus points if you imply that _not_ doing your thing would be ridiculous. Who's against [Effective Altruism](https://www.effectivealtruism.org/)? Is anyone _for_ InHumane Technology?\n\nThe Two Word Idea is the **Minimum Viable** Concept.\n\n## Free Words\n\nTwo Word ideas don't literally have to be Two Words.\n\nPrepositions, Conjunctions, and other articles are \"free\" as in they don't really count. \"Just Do It\", \"Good to Great\", \"Crossing the Chasm\", [Disagree and Commit](https://www.inc.com/justin-bariso/it-took-jeff-bezos-only-three-words-to-drop-the-best-advice-youll-hear-today.html) or [Learn in Public](https://www.swyx.io/writing/learn-in-public/) anyone? VC Idea Pitches are often mocked as derivative [X for Y](https://andrewchen.co/x-for-y-startup-ideas/) cargo culting. It works.\n\nNumbers could be free too. The [4-Hour Workweek](https://fourhourworkweek.com/) hyphenates the number.\n\nSome words are used so frequently together they tokenize to basically be one word. DevOps. Web Design (ergo _Responsive_ Web Design).\n\nUsually, successful many-word ideas have a Two Word Core. [The Law of Shitty Clickthroughs](https://andrewchen.co/the-law-of-shitty-clickthroughs/) isn't about \"The Law of\". Nobody wants to be the Poor Dad in **Rich Dad, Poor Dad**.\n\n[The 7 Habits of Highly Effective People](http://www.quickmba.com/mgmt/7hab/) might win the prize for longest Two Word idea. Of course, these days, it just gets shortened to \"7 Habits\" 😉.\n\n## How to Figure Out Your Two Words\n\nTwo Words is the ultimate microcopy. It is at once trivial, yet important (by sheer memetic value). Obviously it has high marketing value, but finding a good Two Words to hang your hat on for the life of your idea is not easy. [As Naval says](https://twitter.com/naval/status/1133452743614451712):\n\n> Become the best in the world at what you do. Keep redefining what you do until this is true.\n\nAuthenticity is critical - nobody can compete with you at being you.\n\nOne way to figure it out is have people repeat back your idea in their words, after you give your spiel. Your words don't matter, theirs do. You don't need to adopt exactly what they use, but a message that doesn't take after repeated attempts is a problem.\n\nYou can't force these things on people. Two Word ideas perform best when they give people the words to describe something they already want to talk about. There has to be some _innate_ agreement to it already. And it's a viral loop - if the words come unbidden, people think of your idea/brand naturally. This is why Nike's heavily invests in **Just Do It** - it comes up even without talking about sport apparel.\n\n## In Memoriam\n\nThis post is dedicated to Clay Christensen, who pointed out the [Innovator's Dilemma](https://en.wikipedia.org/wiki/The_Innovator%27s_Dilemma), and Leila Janah, who showed that the best method of poverty alleviation is to [Give Work](https://www.leilajanah.com/book).\n\n## Resources\n\n- \"X your Y\": https://twitter.com/nathanbarry/status/1221996517797425152?s=20\n- Mental models that are all 2 words: https://twitter.com/G_S_Bhogal/status/1225561131122597896\n\n## Appendix: One Worders\n\nExceptions to the rule are noteworthy because of their rarity.\n\n- Nir Eyal - hooked, indistractable\n- Ultralearning\n- Dan Pink - Drive (really about intrinsic motivation). when. to sell is human.\n- Essentialism [https://tim.blog/2019/01/09/greg-mckeown-essentialism/](https://tim.blog/2019/01/09/greg-mckeown-essentialism/)\n- The Secret\n- Outliers - gladwell\n- Quiet - susan cain introverts\n- Mindset - carol dweck: really about growth mindset!\n- Vulnerability - brene brown\n- Principles - dalio\n- Originals - adam grant\n\nWhat puts all these in common? I haven't figured it out yet.\n\n## Appendix: List of Two Worders\n\nThis is a living list - I will update as I go. [Tell me good candidates for the list!](https://twitter.com/swyx)\n\n- Movements: indie hacker, digital nomad, intermittent fasting, life hacking, lean in, me too, times up, weight watchers, artificial intelligence, machine learning, growth hacker, product manager\n- Brands:\n  - Just Do It\n  - inbound marketing\n  - personal astrophysicist\n  - tristan harris: humane technology\n  - think different\n  - under armor: i will\n- Company Names\n  - Lucid Chart\n  - Under Armor\n  - Pager Duty\n- mottos:\n  - naval: productize yourself, specific knowledge\n  - effective altruism\n  - don valentine: Who Cares? (thanks rauchg)\n  - vgr: premium mediocre\n  - jocko willinck: extreme ownership\n  - carpe diem\n  - bezos: disagree and commit. day one.\n  - open source\n  - samasource - give work\n  - digital minimalism\n- books:\n  - radical candor\n  - everything store\n  - surveillance economy\n  - black swan\n  - atomic habits\n  - rich dad\n  - purple cow\n  - effective executive - peter drucker\n  - miracle morning\n  - innovator's dilemma\n  - infinite games\n  - chicken soup for the soul?\n- concepts\n  - narrow waist/ internet protocol\n  - kant: categorical imperative\n  - servant leadership\n  - spiritual leadership??\n  - law of shitty clickthroughs\n  - gatsby - content mesh\n  - rails - convention over configuration\n  - dev ops\n  - responsive webdesign\n  - inclusive components\n- three worders\n  - getting things done\n  - time well spent\n  - just do it\n  - one important thing\n  - why we sleep\n  - start with why\n  - highly effective people\n  - microsoft: Be What's Next\n  - totota: let’s go places. mercedes: The best or nothing. bmw: Ultimate Driving Machine. tesla: sustainable transport\n"
    },
    {
      "slug": "waterfall",
      "data": {
        "technical": false,
        "title": "Waterfall",
        "subtitle": "What Software, Business, and the Chainsmokers have in common",
        "slug": "waterfall",
        "categories": [
          "Reflections"
        ],
        "date": "2019-09-22T00:00:00.000Z"
      },
      "content": "\nThe worlds of software, business, and music use the word \"Waterfall\" incredibly differently and they are completely ignorant of each other. I figured I would make a quick note to compare and contrast them!\n\nSo anyway; here's Waterfall:\n\n## Music\n\nI was listening to [the latest Switched on Pop today, on Charli XCX and the Future of Music](https://podbay.fm/podcast/934552872/e/1569139200) and was fascinated by Charli's story of how music executives are all excited by [the Chainsmokers' waterfall strategy](https://www.theverge.com/2019/9/20/20836846/charli-xcx-new-album-streaming-spotify-dani-deahl-future-of-music). I'm always looking out for [McLuhanisms](https://en.wikipedia.org/wiki/The_medium_is_the_message) and the clear evolution of music in response to the streaming era is a prime example, however this was the first time it was articulated as a _release_ strategy and not just a songwriting strategy.\n\nTo the Chainsmokers, this is specifically [creating a gradual “waterfall” of music by releasing one song a month, gradually building to an end-of-year 12-track album](https://popcrush.com/the-chainsmokers-second-album-new-releases-chart-success/) (original article is [behind the Billboard paywall](https://www.billboard.com/articles/business/8257719/inside-the-chainsmokers-plan-rethink-album-cycle)). Here the waterfall is cumulative, where each new release reinforces previous ones, and it refreshes artists at the top of their profiles and on your feeds. **\"The idea is that albums are built, not dropped.\"**\n\n## Business\n\n[Waterfall market entry](http://www.baltic-legal.com/market-entry-strategy-waterfall-eng.htm) is also cumulative, but represents a military-like strategy of focusing all resources on one entry point, and conquering that and learning from it before moving on to the next thing. We don't use this term often today but every location-bound startup does this when they launch in new cities ([sometimes, too ambitiously!](https://www.wired.com/2015/10/why-homejoy-failed/)).\n\nFunny enough, this conception of waterfall probably has the strongest correlation with the physical waterfall analogy, because the same mass of water stops at each point along the way.\n\nThe idea is sound, just not very relatable, because you have to be a specific subset of business and at a specific stage of growth for this to be relevant.\n\n## Software\n\nWaterfall is perhaps most famously known in software as a common punching bag for Agile/Lean startups. Here, waterfall isn't something aspirational, it's often a laughing stock. Oh, you don't release every 6 weeks/2 weeks/day/hour/minute? How quaint. Often, shitting on Waterfall is really an excuse for throwing out process, vision, substantive feedback and product management altogether, as well as keeping tech workers in a permanent state of manic nihilism (\"I have no idea what I'll be working on next week!\" vs \"I have no idea if what I do this week means anything\").\n\nIt is also approached as a software production philosophy rather than as a product/feature release and marketing philosophy. Maybe Software can learn a thing or two from Business and Music.\n\n## More\n\n- https://martinfowler.com/bliki/WaterfallProcess.html\n"
    },
    {
      "slug": "writing-advice",
      "data": {
        "technical": false,
        "title": "writing Advice",
        "slug": "writing-advice",
        "categories": [
          "Advice"
        ],
        "date": "2020-01-18T00:00:00.000Z",
        "published": false,
        "description": "Some thoughts on writing your first few writings"
      },
      "content": "\nann handley: https://www.youtube.com/watch?v=FYLVFK12ERY\n- up goer five text editor\n- whats in it for them\n- skip the running start\n- \"screw and do\" - one main point, one call to action, must be clear\n\n\nhttps://twitter.com/nbashaw/status/1237131727635501056?s=20\nWhen I sent people drafts of my posts for feedback, I never knew what to say if they asked \"what kind of feedback would be helpful?\"\n\nNow I use the \"ABCD\" framework:\n\n- what's Awesome?\n- what's Boring?\n- what's Confusing?\n- what Didn't you believe?\n\n(credit to \n@shl\n for this!)\n\n\n https://danluu.com/corp-eng-blogs/\n https://twitter.com/michael_nielsen/status/1237871186752573442 terry tao\n\n\nPG: writing usefully: http://paulgraham.com/useful.html, http://www.paulgraham.com/talk.html\n\n Stephen King: on writing https://www.amazon.com/dp/B000FC0SIM/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1\n\n Scott Adams: https://dilbertblog.typepad.com/the_dilbert_blog/2007/06/the_day_you_bec.html\n\n\n\n\n## How to write well?\n\n- Writing well\n\t- AIDA - attention interest desire action\n\t- get to the point, add rhythm https://twitter.com/david_perell/status/1127348174404890625\n\t- more tips: https://twitter.com/david_perell/status/1116485842615377921\n\t- talk like you write: http://www.paulgraham.com/talk.html\n\t- rapid prototyping: https://terrytao.wordpress.com/advice-on-writing-papers/write-a-rapid-prototype-first/\n\t- writing for work: https://danluu.com/corp-eng-blogs/\n\t- better writer: https://dilbertblog.typepad.com/the_dilbert_blog/2007/06/the_day_you_bec.html\n- The Benefits of Writing A Lot For My Software Career\n"
    }
  ],
  "podcasts": [
    {
      "title": "Svelte Radio Episodes",
      "slug": "svelte-radio",
      "categories": [
        "Svelte"
      ],
      "venues": "SvelteRadio",
      "date": "2020-05-12T00:00:00.000Z",
      "url": "https://anchor.fm/svelteradio/",
      "description": "I joined the Svelte Radio podcast together with Antony and Kev from Svelte Society.",
      "instances": [
        "https://anchor.fm/svelteradio/episodes/Post-Svelte-Society-Day-eduktc",
        "https://anchor.fm/svelteradio/episodes/In-Defense-of-The-Modern-Web-eehprp",
        "https://anchor.fm/svelteradio/episodes/TypeScript-Language-Tools-ef1hrv"
      ]
    },
    {
      "title": "Software Sessions Podcast - Learning in Public",
      "slug": "software-sessions-podcast",
      "categories": [
        "Careers"
      ],
      "venues": "SoftwareSessions",
      "date": "2020-06-17T00:00:00.000Z",
      "github": "https://gist.github.com/sw-yx/02c28094f7d898554deee1ba7f96a502",
      "url": "https://www.softwaresessions.com/episodes/learning-in-public/",
      "url2": "https://media.transistor.fm/b2abc441.mp3",
      "description": "I chatted with Jeremy Jung, host on Software Engineering Radio and now Software Sessions, about Learn in Public and the Coding Career Handbook!"
    },
    {
      "title": "Dev Career Advice for the Coronavirus Recession",
      "slug": "recession-prep-tanay",
      "categories": [
        "Careers"
      ],
      "venues": "TanayPratap",
      "date": "2020-05-09T00:00:00.000Z",
      "url": "https://open.spotify.com/episode/1oj0Kpnt8xzk2vCBm6t3LE",
      "description": "I chatted with Tanay Pratap about what new entrants to software engineering in India can do given the Coronavirus Recession"
    },
    {
      "title": "Svelte and Community on JAMStack Radio",
      "slug": "jamstack-radio-svelte",
      "categories": [
        "Svelte"
      ],
      "venues": "JamsackRadio",
      "date": "2020-02-26T00:00:00.000Z",
      "url": "https://www.heavybit.com/library/podcasts/jamstack-radio/ep-51-community-over-code-with-shawn-wang-of-netlify/",
      "desc": "A 30 min chat about Svelte, Netlify, and Coding Communities, with Brian Douglas on his podcast. Brian was previously the only Devrel at Netlify so there is some ancestry going on here!",
      "description": "In episode 51 of JAMstack Radio, Brian joins Shawn Wang to discuss his role as a developer experience engineer at Netlify, the open-source JavaScript framework Svelte, and scaling community above code."
    },
    {
      "title": "Marketing Yourself - ProdReady Podcast",
      "slug": "codingcareer-prodready",
      "categories": [
        "Careers"
      ],
      "venues": "ProdReadyPodcast",
      "date": "2020-07-07T00:00:00.000Z",
      "url": "https://www.productionreadypod.com/episodes/marketing-yourself-your-products-by-learning-in-public-w-shawn-wang",
      "description": "Hot off the launch of his new book, Shawn sits down to talk with me about personal marketing via working in public. We go into detail about how he wrote a book with the most insane bibliography you've ever seen and made $25,000 on launch day.",
      "notes": "I chatted with Glenn Stovall twice - the audio was lost the first time 😂\nThis is maybe the 3rd podcast I got purely from the Marketing Yourself essay so this is really great."
    },
    {
      "title": "Coding Careers - AQOC Podcast",
      "slug": "codingcareer-aqoc",
      "categories": [
        "Careers"
      ],
      "venues": "AQOCPodcast",
      "date": "2020-07-13T00:00:00.000Z",
      "url": "https://aquestionofcode.com/71-how-should-developers-market-themselves-shawn-wang/",
      "desc": "Charming chat with 2 british brothers! 1 experienced engineer and 1 just changing careers and learning to code",
      "description": "This week we're joined by Shawn Wang, Senior Developer Advocate at AWS and author of the excellent Coding Career Handbook. Shawn is a career-switcher; he transitioned into tech in his early thirties after a career in finance. He has written a lot about how aspiring devs can better accelerate their careers, and his views are nuanced and full of wisdom that's very relevant to all aQoC listeners (no matter what stage you're at in your career)."
    },
    {
      "title": "Coding Career Handbook - Newline Podcast",
      "slug": "codingcareer-newline",
      "categories": [
        "Careers"
      ],
      "venues": "NewLinePodcast",
      "date": "2020-07-18T00:00:00.000Z",
      "url": "https://podcast.newline.co/episodes/cracking-the-coding-career-with-shawn-wang",
      "desc": "In this wide-ranging conversation we talk about the differences between a Jr and Sr engineers, how to find strength in your weaknesses, and how to capture your daily ideas and use them to supercharge your career.",
      "notes": "It was a dream to chat with Amelia Wattenberger on her new podcast. I've admired her work for a long time. I wish I had asked them more questions as they are experienced book authors, but then again, I was the guest.\nI love their backlog of questions as well."
    },
    {
      "title": "How, when, and why to use the JAMstack",
      "slug": "devmode-fm-jamstack-panel",
      "categories": [
        "JAMstack"
      ],
      "venues": "Devmode.FM",
      "date": "2019-11-04T00:00:00.000Z",
      "url": "https://devmode.fm/episodes/how-when-and-why-to-use-the-jamstack",
      "desc": "In this episode, we have a round­table dis­cus­sion with a vari­ety of expe­ri­enced web devel­op­ers who are at dif­fer­ent stages of using the JAM­stack, from not at all, to exploring/​experimenting, to using to deliv­er client projects to production."
    },
    {
      "title": "JAMstack & Serverless with Netlify (DevMode.fm Podcast)",
      "slug": "devmode-fm-jamstack",
      "categories": [
        "JAMstack"
      ],
      "venues": "Devmode.FM",
      "date": "2019-10-28T00:00:00.000Z",
      "url": "https://devmode.fm/episodes/jamstack-serverless-with-netlify",
      "desc": "My first appearance on Devmode.fm talking about jamstack",
      "description": "On this episode, we talk to Shawn ​“swyx” Wang from Netli­fy about the JAM­stack & Server­less rev­o­lu­tion in fron­tend development.\nWe dis­cuss what exact­ly Netli­fy is, and how you can lever­age the Edge, Build, and Dev aspect of it to make your devel­op­ment process more enjoyable.\nWe talk about the chal­lenges of main­tain­ing Author Expe­ri­ence (AX) in the age of sta­t­ic site gen­er­a­tors, using Live Pre­view func­tions in a CMS or ser­vice to help out.\nWe also talk about how JavaScript edge work­ers will gain sen­tience as Skynet, and the AI lan­guage mod­el that was so dan­ger­ous they could­n’t release it."
    },
    {
      "title": "Swyx Mix - Learn In Public",
      "slug": "ducktapes-podcast",
      "categories": [
        "Learn In Public"
      ],
      "venues": "Ducktapes",
      "date": "2019-08-26T00:00:00.000Z",
      "url": "https://anchor.fm/ducktapes/episodes/Swyx-Mix-e517kc",
      "desc": "I had a lot of fun talking with John and Tiffany. they're a good crew! and passionate about music obviously.",
      "description": "This week, Shawn \"Swyx\" Wang joins us in the Duck Pond to take a deep dive into his coding philosophy \"Learning in Public.\" We take some time to discuss his role at Netlify, how he got started in coding (after a full career in a different industry!), and of course Jack White comes up."
    },
    {
      "title": "Leaving a $350K/year job to learn coding",
      "slug": "freecodecamp-podcast",
      "categories": [
        "Learn In Public"
      ],
      "venues": "FreeCodeCamp Podcast",
      "date": "2019-04-15T00:00:00.000Z",
      "github": "https://gist.github.com/sw-yx/f7b8ef5843475db994f05ae55f8cd464",
      "url": "https://www.freecodecamp.org/news/shawn-wang-podcast-interview/",
      "desc": "We talk about \"learning in public\" and his transition into tech from finance, where he left behind a job that paid him US $350,000 per year.",
      "description": "the title overly focuses on the finance career, but this is much more about learn in public and the freecodecamp journey. plenty of links supplied!"
    },
    {
      "title": "You Can Learn A Lot For The Low Price Of Your Ego",
      "slug": "kentcdodds-podcast",
      "categories": [
        "Learn In Public"
      ],
      "venues": "Kent C Dodds Podcast",
      "date": "2019-08-05T00:00:00.000Z",
      "url": "https://kentcdodds.com/chats-with-kent-podcast/seasons/01/episodes/you-can-learn-a-lot-for-the-low-price-of-your-ego-with-shawn-wang",
      "desc": "Shawn Wang talks about how learning in public was the single best thing he did for his career.",
      "description": "You can learn in private, or you can learn in public. 99% of developers work and learn privately in the shadows, so why shouldn't you? Something magical happened when Shawn started creating resources and sharing what he learned in public. More advanced people began to help him by correcting him when he was wrong. By learning publically, he was able to both teach and learn at the same time!",
      "comments": "This was actually recorded in March, I think, when I was in Tampa ahead of VueConf. I recall frantically driving back to do the recording and getting stuck in traffic and texting Kent that I would be late! I don't like driving so this was a high stress period."
    },
    {
      "title": "Be Wrong with Shawn Swyx Wang",
      "slug": "react-podcast",
      "categories": [
        "React"
      ],
      "venues": "React Podcast",
      "date": "2019-02-20T00:00:00.000Z",
      "url": "https://reactpodcast.simplecast.fm/36",
      "desc": "A disussion about strategies for being a lifelong learner in React.",
      "description": "A disussion about strategies for being a lifelong learner, how to get started in React, the growth of React's API surface area, Hooks, Suspense, Concurrent Mode, designing APIs, and the future of React."
    },
    {
      "title": "The Suspense is Almost Over - React Podcast",
      "slug": "react-podcast-suspense",
      "categories": [
        "React"
      ],
      "venues": "React Podcast",
      "date": "2019-10-22T00:00:00.000Z",
      "url": "https://reactpodcast.com/69",
      "desc": "A Pre-ReactConf Concurrent React Rundown with Swyx",
      "description": " ## Links\n*   [STAR Apps: A New Generation of Front-End Tooling for Development Workflows](https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/) on CSS-TRICKS *   [STAR Apps](https://www.swyx.io/speaking/star-apps-svcodecamp/) at SV Code Camp by Swyx *   [JAMStack](https://jamstack.org) — A modern architecture — Create fast and secure sites and dynamic apps with JavaScript, APIs, and prerendered Markup, served without web servers *   [Beyond React 16 | JSConf Iceland 2018](https://www.youtube.com/watch?v=nLF0n9SACd4) Dan Abramov's introduction to Async React (eventually Concurrent React) at JSConf Iceland 2018 *   [Fiber Reconciler](https://reactjs.org/docs/codebase-overview.html#fiber-reconciler) doc on reactjs.org *   [React Fiber Architecture](https://github.com/acdlite/react-fiber-architecture) — a gist by [Andrew Clark](https://twitter.com/dan_abramov) *   [A Cartoon Intro to Fiber](https://www.youtube.com/watch?time_continue=3&v=ZCuYPiUIONs) — a talk by [Lin Clark](https://twitter.com/linclark?lang=en) at React Conf 2017 *   [Dan's Tweet](https://twitter.com/dan_abramov/status/1184987041676845056) on ConcurrentMode and how it informs other React APIs *   [Building The New Facebook With React and Relay](https://conf.reactjs.org/event.html?frank) — an upcoming talk by [Frank Yan](https://twitter.com/frankyan) and [Ashley Watkins](https://twitter.com/catchingash) on Building The New Facebook With React and Relay *   [Building the New Facebook.com with React, GraphQL and Relay](https://www.youtube.com/watch?v=WxPtYJRjLL0) — talk at F8 2019 about facebook.com v2 *   [Relay](https://relay.dev) — A JavaScript framework for building data-driven React applications *   [Apollo Client](https://www.apollographql.com/docs/react/) — A complete state management library for JavaScript apps *   [URQL](https://formidable.com/open-source/urql/) — Universal React Query Library is a blazing-fast GraphQL client, exposed as a set of ReactJS components *   [Getting Closure on Hooks](https://www.swyx.io/speaking/react-hooks/) — Swyx demonstrating a simple mental model for hooks at JSConf.Asia 2019 *   [[Umbrello]React Flare](https://github.com/facebook/react/issues/15257) — Github issue for tracking the React DOM implementation of the experimental React Events API *   [React Fire: Modernizing React DOM](https://github.com/facebook/react/issues/13525) — Github issue for tracking React DOM modernization *   [React Native for Web](https://github.com/necolas/react-native-web) — Run React Native components and APIs on the web using React DOM. A library by [Nicholas Gallagher](https://twitter.com/necolas) *   [Dominic Gannaway](https://twitter.com/trueadm) — React Core team member working on React Flare and React Fire *   [The Case for React Native Web Singularity](https://www.swyx.io/writing/react-native-web-singularity/) A post by Swyx on React Native for Web as a template for a future React developer experience *   [SVELTE](https://svelte.dev) — Cybernetically enhanced web apps *   [glimmer](https://glimmerjs.com) — Fast and light-weight UI components for the web With the attention to detail you've come to expect from Ember *   [All you need to know about Ivy, The new Angular engine!](https://blog.angularindepth.com/all-you-need-to-know-about-ivy-the-new-angular-engine-9cde471f42cf) — An article that seems to suggest it has everything you need to know about a thing I know nothing about"
    },
    {
      "title": "Learning React and TypeScript in Public",
      "slug": "reactroundup-podcast",
      "categories": [
        "Learn In Public"
      ],
      "venues": "React Roundup",
      "date": "2019-08-13T00:00:00.000Z",
      "url": "https://devchat.tv/react-round-up/rru-074-learning-react-and-typescript-in-public-with-shawn-swyx-wang/",
      "desc": "One of my better podcast discussions of Learn In Public. The sequence of how this one happened was pretty fun. I noticed an a11y fight on Twitter, and posted about it on the Netlify slack. then Leslie picked up the torch and [wrote a blogpost about it](https://www.netlify.com/blog/2019/02/25/accessibility-is-not-a-react-problem/). That got her invited onto the podcast and she became a panelist. And then she invited me. and now we're here.",
      "description": "Today’s guest Shawn Wang is a career changer starts off the show about how he got from finance to programming. The panel talks about how they each got started in programming. Shawn explains his Learn In Public manifesto. They discuss the benefits of learning in public and how concepts like Cunninham’s Law and lampshading can be a good thing. Shawn talks about the differences between inbound and outbound marketing. The two biggest benefits of learning in public is that people will come to help you, it helps you to build capital, and it os the fastest way to learn. They discuss the balance between sharing too little and oversharing."
    },
    {
      "title": "No Code JAMstack with Shawn Wang",
      "slug": "sedaily-nocode",
      "categories": [
        "No Code"
      ],
      "venues": "SEDaily",
      "date": "2019-12-19T00:00:00.000Z",
      "url": "https://softwareengineeringdaily.com/2019/12/19/no-code-with-shawn-wang/",
      "desc": "We know that no-code tools can create value. But how do they fit into the overall workflow of a software company? How should teams be arranged now that knowledge workers can build certain kinds of software without writing code? And how should no-code systems interface with the monoliths, microservices, and APIs that we have building for years?",
      "description": "- [Podcast Link](https://softwareengineeringdaily.com/2019/12/19/no-code-with-shawn-wang/) - [Download Podcast](http://traffic.libsyn.com/sedaily/2019_12_19_SwyxLowCodeJAMStack.mp3)\n## No Code\n- Why is no code interesting to Software Engineers? - Business opportunity - Developer productivity - Should no code users be worried about platform lockin? - Yes - We have to understand what the good abstractions are and where complexity overtakes convenience - Software Engineers have a unique advantage here - What duties should no code platforms fulfil? just UI layer? Shopify store? What are the borders? - Nothing definite yet - [Webflow Blogpost: No Code is a Lie](https://webflow.com/blog/no-code-is-a-lie) - But everything can have a GUI layer - leading the API economy to transform into the GUI economy - Even the Vue ecosystem has added a [UI on top of their CLI](https://cli.vuejs.org/dev-guide/ui-api.html) - State machines in UI Development - [David Khourshid at React Rally](https://www.youtube.com/watch?v=VU1NKX6Qkxc) - visual IDEs are winning over text editors - [Bret Victor - the Future of Programming](https://vimeo.com/71278954) - **EDIT: THINGS I FORGOT TO MENTION** - Shopify and Wordpress are basically No Code platforms on top of Rails and PHP - there is also a trend of big platforms implementing internal no-code solutions: - [Slack Workflow Builder](https://slack.com/intl/en-sg/help/articles/360035692513-Guide-to-Workflow-Builder) - [Asana No Code solution](https://webflow.com/nocodeconf/session/making-automation-feel-more-human) - [Salesforce No Code](https://webflow.com/nocodeconf/session/progressive-enhancement-a-mindset-for-designing-no-code-platforms) - [iOS Shortcuts was an acquisition](https://thesweetsetup.com/ios-shortcuts-guide/) - What is available in the GUI economy? - CSS - CMS - Ecommerce - PaaS - As developers, we use no code tools in our daily work - Nobody wants to use Passport.js anymore, we rather farm it out to Okta and Auth0\n## JAMstack\n- What is the JAMstack? - [Jamstack Conf](https://jamstackconf.com/) - [Jamstack.org](http://jamstack.org/) - [GitHub Pages](https://pages.github.com/) - How do you compare JAMstack to No Code? - Very comparable - JAMstack is 'No Code backend' - serves frontend developers - But there are more people who just aren't developers at all - Non developers need a bit more handholding - frontend devs can at least help debug - JAMstack vs No Code is similar to Figma vs Canva - What code are you writing in the JAMstack? - Frontend + Glue code - In a No Code stack, you have to find your own frontend - heavily overlapping paradigms - Can go from No Code to JAMstack often, but not other way round - Are enterprises building JAMstack applications? - Sites: - [Citrix's migration story](https://www.netlify.com/blog/2019/06/12/jamstack_conf-nyc-session-recap-citrix-delivers-better-ux-with-less-overhead-using-jamstack-and-netlify/) - [Trinet on Netlify](https://is-this.netlify.com/trinet.com) - Ecommerce: - [Loblaw's migration story](https://www.youtube.com/watch?v=6VGu4PvEBag) - [Popeye's migration story](https://www.youtube.com/watch?v=dKBDUhGi76o) - [Nike agency story](https://www.youtube.com/watch?v=2rA_ucpQ_Fk) - Apps: - Paypal - [Bringing JAMstack to the Enterprise](https://www.infoq.com/presentations/jamstack-enterprise/) - [FreeCodeCamp is built on Gatsby and Netlify](https://dev.to/ossia/how-freecodecamporg-uses-the-jamstack--a-single-api-server-to-help-millions-of-people-learn-to-code-every-month-4d5g) - JAMstack as the counterpart to serverless - Precompilation in the JAMstack - help me understand Gatsby - Gatsby < React < JS - Gatsby helps give a good default Webpack config for performance - Webpack allows modules, preprocessing of code and images etc - Having build steps has problems, but is a net benefit for users by shipping more optimal - Gatsby allows you to pull in data pipeline aka content mesh\n## Code\n- React vs Vue - Vue easier to start with - React has more jobs - FB dogfoods React - React as a universal UI language - Tom Dale - [Compilers are the new Frameworks](https://tomdale.net/2017/09/compilers-are-the-new-frameworks/) - Difference between SSR and Compiling - SSR generates HTML - Compiling framework runtime/footprint - React is trying to help optimize overall app footprint\n## Career\n- Learning in Public - Essay https://www.swyx.io/writing/learn-in-public/ - Talk https://www.swyx.io/speaking/learn-in-public-nyc - The Internet rewards spiky people - [DHH Apple Card story](https://www.bloomberg.com/news/articles/2019-11-09/viral-tweet-about-apple-card-leads-to-probe-into-goldman-sachs) - [Sophie Alpert $600 story](https://twitter.com/sophiebits/status/1193686558206877696?lang=en) - [David Perell: Naked Brands](https://www.perell.com/blog/the-future-of-finance) - [React TypeScript Cheatsheet](https://github.com/typescript-cheatsheets/react-typescript-cheatsheet) "
    },
    {
      "title": "Work in Progress Podcast",
      "slug": "wip-podcast",
      "categories": [
        "Learn In Public"
      ],
      "venues": "Podcast",
      "date": "2019-09-15T00:00:00.000Z",
      "url": "http://wipp.buzzsprout.com/397696/1708216-wipp-002-shawn-wang-from-finance-to-tech",
      "desc": "A 90 minute chat about my career change with Dana and Angela! It was an honor to be one of the first batch of interviews for a new podcast.",
      "description": "In this episode of our podcast we interview Shawn (@swyx) who made the leap from finance to tech. What started as a career reflection combined with burnout prompted him to seek a different path."
    },
    {
      "title": "Infinite Building",
      "slug": "egghead-podcast",
      "categories": [
        "Advice"
      ],
      "venues": "Egghead",
      "date": "2018-08-15T00:00:00.000Z",
      "url": "https://egghead.io/podcasts/swyx-shawn-wang-on-infinite-building?af=95qfq1",
      "desc": "Chatting about Infinite Learning vs Building, JS fatigue, and Impostor Syndrome",
      "description": "Tune in to hear Shawn talk about what it means to be an infinite learner and builder and how he uses this approach to further his career."
    },
    {
      "title": "Productivity in Tech",
      "slug": "productivity-in-tech-podcast",
      "categories": [
        "React"
      ],
      "venues": "Productivity in Tech",
      "date": "2017-11-13T00:00:00.000Z",
      "url": "https://www.stitcher.com/podcast/kevin-miller/productivity-in-tech-podcast/e/52208723?autoplay=true",
      "desc": "Perhaps my first ever guest appearance on a podcast - talking about career change and my bootcamp experience.",
      "description": "In this conversation, we talk about Shawn's experience as a code school student and learn more about this growing source of alternative education."
    },
    {
      "title": "State of JS with Sacha Greif (SEDaily)",
      "slug": "software-daily-sacha-greif",
      "categories": [
        "JS"
      ],
      "venues": "SEDaily",
      "date": "2017-08-09T00:00:00.000Z",
      "url": "https://softwareengineeringdaily.com/2017/08/09/state-of-javascript-with-sacha-greif/",
      "desc": "My first time GUEST HOSTING a podcast - SE Daily - and reaching out to Sacha was nervewracking!",
      "description": "Sacha Greif is an independent designer and developer most prominent in his roles as co-author of Discover Meteor and community builder at Sidebar.io, a design newsletter with over 35,000 subscribers, and Hacker News Kansai. He is currently best known in the Javascript community as the maintainer of VulcanJS, and for his annual State of Javascript survey which is now open for 2017. In this episode, Shawn Wang guests hosts a discussion about both projects and Sacha’s thoughts on independent web design and development."
    }
  ],
  "talks": [
    {
      "title": "Concurrent React From Scratch",
      "slug": "react-from-scratch",
      "categories": [
        "React"
      ],
      "desc": "Cloning Concurrent React with React Fiber and discussing Time Slicing and Suspense",
      "description": "In this talk, we’ll create an effective mental model of Concurrent React by building a tiny clone of React! We will start with a blank js file and learn about how React renders components, schedules Time-Slicing updates with a Work Loop, add Hooks, and end off with a mini-clone of Suspense!",
      "github": "https://gist.github.com/sw-yx/f94dcb03adc7252ac0b735d7ba242890",
      "instances": [
        {
          "venue": "Egghead",
          "date": "2020-05-29T00:00:00.000Z",
          "video": "https://egghead.io/lessons/react-eggheadtalks-concurrent-react-from-scratch?af=95qfq1"
        },
        {
          "venue": "ByteConf React",
          "url": "https://www.bytesized.xyz/react-2020",
          "date": "2020-05-02T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=yeyiA9U8Ep8&feature=youtu.be"
        },
        {
          "venue": "ReactAdvanced London",
          "url": "https://reactadvanced.com/",
          "date": "2019-10-25T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=dFO4m7Y-yhs"
        },
        {
          "venue": "EngineersSG",
          "date": "2019-11-29T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=8opFTK2shAc"
        }
      ]
    },
    {
      "title": "Open Source Your Knowledge",
      "slug": "open-source-knowledge",
      "categories": [
        "LearnInPublic"
      ],
      "github": "https://gist.github.com/sw-yx/f5a509d5f4a54fff0ad50aa57d620848",
      "description": "We all believe in the power of open source for code. But when we open source our knowledge, we can get the same benefits and it will last longer than any line of code that we will ever write.",
      "instances": [
        {
          "venue": "BelgiumJS",
          "date": "2020-04-08T00:00:00.000Z",
          "slides": "https://docs.google.com/presentation/d/1XKbq4HcHW4_D4BrZeEE4ggB4p6XO4OBqXLeAt1Grsio/edit#slide=id.g8316066824_0_186",
          "video": "https://youtu.be/XoATf7xGoUY"
        }
      ]
    },
    {
      "title": "The Operating System of You",
      "categories": [
        "Careers"
      ],
      "description": "Developers are mostly humans that run the same \"hardware\". Therefore most performance differences, especially the ones we can control, are down to our \"OS\" - our conscious prioritization and processing - and \"firmware\" - our unconscious personality and reactions. What can we do to better take care of our \"hardware\", and what does running better \"software\" look like?",
      "instances": [
        {
          "venue": "CascadiaJS",
          "slides": "https://docs.google.com/presentation/d/1z43axgETtWGqPFlRDmqU11gb3aJnEH0y3MgSV5fchpM/edit?usp=sharing",
          "url": "https://2020.cascadiajs.com/speakers/shawn-wang",
          "video": "https://www.youtube.com/watch?v=D-Sj6jo4o1I",
          "date": "2020-09-01T00:00:00.000Z"
        },
        {
          "venue": "BelgiumJS",
          "video": "https://www.youtube.com/watch?v=IzK4IxHv3W0",
          "slides": "https://docs.google.com/presentation/d/1iHi3tULjAWeMpfjzpKtix-vzRItRSC4P_Osl0hkm_aY/edit?usp=sharing",
          "date": "2020-06-23T00:00:00.000Z"
        }
      ]
    },
    {
      "title": "JAMstack Chat with Amazon Pay India Team",
      "slug": "jamstack-amazon-pay-india",
      "categories": [
        "Jamstack"
      ],
      "description": "A recorded casual chat I had with the Amazon Pay India team on JAMstack topics. The audience is a mix of technical and nontechnical team members, so this is a more high level/introductory overview.",
      "github": "https://gist.github.com/sw-yx/7dfb9eee760ea948b15cdf2fcdcb9629",
      "instances": [
        {
          "venue": "YouTube",
          "date": "2020-07-23T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=AXiodji_8Ec"
        }
      ]
    },
    {
      "title": "Coding Careers",
      "categories": [
        "Careers"
      ],
      "published": true,
      "description": "A general talk about the Coding Career Handbook",
      "instances": [
        {
          "venue": "Vincit",
          "video": "https://www.youtube.com/watch?v=iBwjAZvJhvI",
          "slides": "https://docs.google.com/presentation/d/1VsWoNEMzLeHllMUBn7Ti9Ed0j0r9wDXSaiTZ7K-vspw/edit?usp=sharing",
          "date": "2020-06-24T00:00:00.000Z"
        },
        {
          "venue": "Summer of Shipping",
          "date": "2020-07-09T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=F7AP7tfsM1Y",
          "desc": "A chat with Summer of Shipping students about Coding Careers - a slightly updated version of the Vincit Devs talk I gave.",
          "description": "A chat with Summer of Shipping students about Coding Careers - a slightly updated version of the Vincit Devs talk I gave. Philip Liao is doing a great thing with this program and the students asked good questions."
        },
        {
          "venue": "Fullstack Academy",
          "date": "2020-04-16T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=QFHO2-8fGtM",
          "description": "I chatted with David and Nimit, founders of the bootcamp where I started, about React and all the soft skills stuff I've been working on."
        },
        {
          "venue": "IncludeJS",
          "date": "2020-04-14T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=1ayI9j57VlQ",
          "desc": "I chatted with Eva on #LearnInPublic, teaching and career change!",
          "description": "Eva is a self-taught web developer, community organizer, cat & dog owner. 🐈 🐕\nSwyx (https://twitter.com/swyx) is a career changer, creator, developer, teacher and avid learner. Check out his website here.\nTogether we will be discussing career change, Free Code Camp, #LearningInPublic, online communities (such as ReactJS community on Reddit), the importance of writing and note-taking (and creating your second brain), public speaking and cats! #becauseCatsRAwesome "
        }
      ]
    },
    {
      "slug": "react-rally-metalanguage",
      "title": "Growing a Meta-Language",
      "categories": [
        "React"
      ],
      "desc": "My React Rally 2020 talk on Dialects, Distros, Devtools, and the React SFC idea",
      "description": "7 years after release, React reaches millions of developers and billions of users. Its ideas have influenced other frameworks, even those in other languages like Swift UI and Jetpack Compose. What’s next? The community has been hard at work innovating in React formats, metaframeworks, and developer tooling. This fits an established pattern of how developer languages grow, and likely forms a roadmap for React in the Third Age of JavaScript.",
      "instances": [
        {
          "venue": "ReactRally",
          "github": "https://gist.github.com/sw-yx/dedf23e25e6955d29968b5eecd7d749e",
          "url": "https://www.reactrally.com/speakers",
          "date": "2020-08-15T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=18F5v1diO_A",
          "slides": "https://docs.google.com/presentation/d/1sBb7KjhSOiONML61fnYwkVI-7yzJCoP-Zgs6E37T-nY/edit?usp=sharing"
        }
      ]
    },
    {
      "title": "State of /r/ReactJS",
      "slug": "react-survey-2019-talk",
      "categories": [
        "React"
      ],
      "desc": "Presenting Results from the 2019 /r/ReactJS survey",
      "description": "Presenting Results from the 2019 /r/ReactJS survey",
      "instances": [
        {
          "venue": "ThisDotMedia",
          "url": "https://www.swyx.io/writing/react-survey-2019/",
          "date": "2020-02-19T00:00:00.000Z",
          "slides": "https://docs.google.com/presentation/d/1M-JUtp9I5_gSk8OpV9Adk9sYzhoU-VNcwz9RUJ1-8Sw/edit#slide=id.p",
          "video": "https://youtu.be/RCtqCDiNLvU?t=190"
        }
      ]
    },
    {
      "title": "What's New in React",
      "slug": "react-whats-new",
      "categories": [
        "React"
      ],
      "description": "The React ecosystem is extremely fast moving and it can be hard to keep up. In 2019, the STAR thesis – Design Systems, Static Typing, Smart APIs, and Static/Server Rendering – mostly worked out. Is it over? What's next? Let's take stock of how React is evolving in 2020, and take some guesses at what you should be checking out and investing in.",
      "instances": [
        {
          "venue": "IonicConf",
          "date": "2020-06-24T00:00:00.000Z",
          "slides": "https://docs.google.com/presentation/d/1s2mcumHDA-sSCf9eDWNGnVfApgtGwRBhI4fV4i4nFkU/edit?usp=sharing",
          "video": "https://www.youtube.com/watch?v=Qox56z4xH6o"
        },
        {
          "venue": "IonicConf livestream",
          "date": "2020-06-24T00:00:00.000Z",
          "video": "https://youtu.be/xh-B-AtsLJc?t=3944"
        }
      ]
    },
    {
      "title": "Marketing Yourself as a Dev",
      "slug": "reacteurope-podcast",
      "categories": [
        "Careers"
      ],
      "description": "I chatted with Patrick, founder of React Europe, about the Marketing Yourself blogpost.",
      "instances": [
        {
          "venue": "React Europe",
          "date": "2020-04-20T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=bcca0VCJe9Q&list=PLCC436JpVnK31LZG2cNINhlEQ1KTm39BR&index=15"
        }
      ]
    },
    {
      "title": "Data Fetching For Developers Who Are New to Svelte And Wanna Learn To Do Other Stuff Good Too",
      "slug": "svelte-data-fetching",
      "categories": [
        "Svelte"
      ],
      "repo": "https://github.com/sw-yx/svelte-data-fetching",
      "desc": "my first talk for svelte society online conf :)",
      "description": "Here at the Svelte Society For Developers Who Are New to Svelte And Wanna Learn To Do Other Stuff Good Too, we teach you that there's more to life than making really, really ridiculously good-looking apps. You can also make them with a lot less code.",
      "instances": [
        {
          "venue": "SvelteSociety",
          "date": "2020-04-26T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=_K7LRy6IP_4"
        },
        {
          "venue": "SvelteSociety",
          "date": "2020-04-26T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=nR8XRpin4OI&feature=youtu.be"
        }
      ]
    },
    {
      "title": "Svelte for React Devs",
      "slug": "svelte-for-react-devs-js-morocco",
      "categories": [
        "Svelte"
      ],
      "description": "A livecoded introduction to Svelte for React Devs",
      "instances": [
        {
          "venue": "YouTube",
          "date": "2020-05-30T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=iUbBm5YhJfY&feature=youtu.be"
        }
      ]
    },
    {
      "title": "Intro to Svelte and Svelte Ecosystem",
      "slug": "svelte-intro-ecosystem",
      "categories": [
        "Svelte"
      ],
      "github": "https://gist.github.com/sw-yx/28fe6da657660fec0d15fa2fa8c35f1c",
      "url": "https://www.eventbrite.com/e/javascript-and-friends-online-meetup-svelte-tickets-90472245923",
      "description": "Svelte is an exciting, newer JavaScript framework that was designed from the ground up with compilation and developer experience in mind. Yet the compiler can be a black box - how can a tiny framework ship so many features? This talk is a deep dive into Svelte's compiler and runtime to demystify this brilliant approach to solving the tradeoff between DX and UX.",
      "instances": [
        {
          "venue": "JSandFriends",
          "date": "2020-02-19T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=XQi4kd-6SSQ&feature=youtu.be"
        }
      ]
    },
    {
      "title": "Svelte Preprocessors and How to Write Them",
      "slug": "svelte-preprocessors",
      "categories": [
        "Svelte"
      ],
      "description": "Svelte is a superset of HTML - but what if we don't want to write HTML? In this livecode talk we explore how Svelte preprocessors work, letting you write Sass, Pug, and even TypeScript inside of your Svelte comopnents!",
      "instances": [
        {
          "venue": "SvelteSociety",
          "date": "2020-06-11T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=QCrpZBsCSq8"
        }
      ]
    },
    {
      "title": "Svelte and the Great Space Elevator",
      "slug": "svelte-space-elevator",
      "categories": [
        "Svelte"
      ],
      "slides": "https://docs.google.com/presentation/d/1fTdTyCVdiHC7PvyYRzmessS09TfLFDXEk50aRhb-JRM/edit#slide=id.g82f12b5bf5_2_290",
      "description": "Modern JS frameworks have run into a quandary - what we write is what we ship. Despite our best efforts at minifying and treeshaking, we cannot fight the fact that adding features means adding JS bundle size. This means we are often trading off user experience against developer experience for every fatiguing decision we make. But it doesn't have to be this way. As Tom Dale predicted, Compilers are the new Frameworks. Svelte is an exciting, newer JavaScript framework that was designed from the ground up with compilation and speed. In this talk, we'll look under its hood to understand how it works, so you know when and why you'd want to use it in future. Don't worry, it isn't Rocket Science!",
      "instances": [
        {
          "venue": "SvelteSociety",
          "date": "2020-04-17T00:00:00.000Z",
          "video": "https://youtu.be/atOIxTHylF8"
        }
      ]
    },
    {
      "title": "Intro to Svelte Stores",
      "slug": "svelte-stores",
      "categories": [
        "Svelte"
      ],
      "slides": "https://docs.google.com/presentation/d/1WbHCfA8dxX09xrIhXQeHx3DWNxoy8Y0VN6U5iOMnkOw/edit",
      "description": "A proper introduction to Svelte Stores",
      "instances": [
        {
          "venue": "SvelteSociety",
          "video": "https://youtu.be/zq6PpM5t3z0?t=360",
          "date": "2020-01-08T00:00:00.000Z"
        }
      ]
    },
    {
      "title": "Getting Closure on Hooks",
      "github": "https://codesandbox.io/s/izqhl",
      "slug": "react-hooks",
      "categories": [
        "React"
      ],
      "desc": "Cloning the React Hooks API in raw JS",
      "description": "The design of React Hooks requires a good understanding of closures in JavaScript. In this talk, we’ll reintroduce closures by building a tiny clone of React! This will serve two purposes – to demonstrate the effective use of closures, and to show how you can build a Hooks clone in just 29 lines of readable JS. Finally, we arrive at how you get Custom Hooks and the Rules of Hooks out of this incredible mental model!",
      "url": "https://2019.jsconf.asia/#program",
      "instances": [
        {
          "date": "2019-03-30T00:00:00.000Z",
          "venue": "Reactathon (Lightning Talk)",
          "video": "https://youtu.be/Wt4kuspJIxY?t=3236",
          "url": "https://twitter.com/swyx/status/1100809424963219456"
        },
        {
          "venue": "JSConf Asia",
          "date": "2019-06-18T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=KJP1E-Y-xyo"
        },
        {
          "venue": "Livestream",
          "date": "2019-06-18T00:00:00.000Z",
          "video": "https://youtu.be/9jWwO7McMbU?t=9451"
        },
        {
          "venue": "Rehearsal",
          "date": "2019-06-18T00:00:00.000Z",
          "video": "https://youtu.be/6zDQBnbGQx8"
        },
        {
          "venue": "Meetup",
          "date": "2019-06-18T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=il43iId9JQA"
        }
      ]
    },
    {
      "title": "I can Babel Macros (and So Can You!)",
      "slug": "babel-macros",
      "categories": [
        "Babel"
      ],
      "desc": "An introduction to Babel Macros and how they can solve DX vs UX tradeoffs",
      "description": "Babel macros are a new way to solve DX and UX tradeoffs by metaprogramming to write code the way that is best for you while delivering code that is best for the user. Case in point, JSX - but why stop there? In this talk we explore how I wrote babel-blade to solve the double declaration problem in clientside GraphQL libraries, and how to get started writing your first babel macro!",
      "github": "https://gist.github.com/sw-yx/9e0d62b60ea8b5711ced2bb2f97b43ec",
      "misc": [
        {
          "cfp": "Hi organizers! Babel is a core part of the JS ecosystem, and I think still very underexplored/underappreciated because of the perception that it is hard to get into and limited to transpiling JSX and TC39 proposals. With the increasing adoption of babel-plugin-macros (adopted by large ecosystems like React) the addressable space for babel has -exploded-. Essentially making it possible to move computation and metaprogramming from run time to build time making for faster apps -and- a better developer experience! I want to tell the world!!"
        }
      ],
      "instances": [
        {
          "venue": "JSConfHI",
          "date": "2019-02-07T00:00:00.000Z",
          "url": "https://www.jsconfhi.com/schedule/",
          "video": "https://www.youtube.com/watch?v=1WNT5RCENfo"
        }
      ]
    },
    {
      "title": "Adaptive Intent-based CLI State Machines",
      "slug": "intent-based-cli",
      "categories": [
        "CLI"
      ],
      "github": "https://gist.github.com/sw-yx/3af1e264b8460af8897768045b2c229f",
      "desc": "Oclif does a lot of nice things, like offering flag and argument parsing, help documentation, and pluggability. That's good for the CLI developer. But what about the CLI user? Instead of viewing our CLI's as simple harnesses for procedure calls, how can we add an intelligent layer to interpret to user intent and guide them down a pit of success? How can we make our CLI's improve using information gained over time?",
      "instances": [
        {
          "venue": "OclifConf",
          "url": "https://oclif.io/conf",
          "date": "2019-05-31T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=ZueoIYnHiaI&feature=emb_title"
        },
        {
          "venue": "OclifConf",
          "url": "https://oclif.io/conf",
          "date": "2019-05-31T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=1_w1YWCHXFg"
        }
      ]
    },
    {
      "title": "Introduction to TypeScript",
      "slug": "intro-to-typescript",
      "categories": [
        "TypeScript"
      ],
      "url": "https://mobile.twitter.com/swyx/status/1166487148331184128",
      "desc": "a 1hr netlify workshop introducing people to TS",
      "description": "TypeScript is a megatrend in JavaScript, going from 46% of npm survey respondents in 2018 to 62% in 2019. This is an introduction to TypeScript for those familiar with JavaScript with a Q&A at the end. A 1hr internal Netlify lunch & learn.",
      "instances": [
        {
          "venue": "Netlify",
          "date": "2019-09-03T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=YDK8sYCgbDw"
        }
      ]
    },
    {
      "title": "JAMStack Jumpstart - Gatsby + Netlify",
      "slug": "jamstack-jumpstart",
      "categories": [
        "JAMstack"
      ],
      "url": "https://2019.jsconf.asia",
      "github": "https://gist.github.com/sw-yx/6ea04fd9b594a56a840dd650863626bb",
      "desc": "A 3-4hr workshop to introduce JAMstack and get started with Gatsby and Netlify",
      "description": "There is a lot of developer and investment interest in JAMStack technologies, from the serverless movement to new authentication models to continuous atomic deployment to the static site generator renaissance. But with so many new terms and options, it is hard for people to figure out where to start. This workshop will teach developers to set up a simple but state of the art Gatsby and Netlify stack, which lets people create blazing fast sites and apps with React and GraphQL, backed up by a continuous deployment and serverless platform complete with authentication and CMS. It has never been easier to get a great Lighthouse score, or to deploy complex, secure webapps for free.",
      "instances": [
        {
          "venue": "JSConfAsia",
          "date": "2019-06-15T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=s-l99ZzR77k"
        },
        {
          "venue": "JSConfAsia",
          "date": "2019-06-15T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=PoqWF9BKtOE"
        },
        {
          "venue": "MidDevCon",
          "date": "2019-08-26T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=PoqWF9BKtOE"
        }
      ]
    },
    {
      "title": "The Rise of JAMStack",
      "slug": "jamstack-rise",
      "categories": [
        "JAMstack"
      ],
      "url": "https://oredev.org/",
      "desc": "An introduction to the JAMstack from a historical perspective as the next evolution from LAMP and MEAN stacks",
      "description": "20 years ago, Michael Kunze coined the LAMP stack to describe the success of open source architecture on the web, but it also betrayed the server-centric world of the time. 5 years ago, Val Karpov described the MEAN stack as a JavaScript centric alternative straddling frontend and backend worlds. A lot has happened since then. React rose to dominance, AWS Lambda started the Serverless movement, the \"API economy\" arose to serve developers, and Static Site Generators came back in a big way. What is driving this new stack of Javascript, APIs, and Markup?",
      "misc": [
        "You will learn about the historical context of developer focus and product differentiation moving from backend to frontend",
        "You will be able to explain the problems with serverful architecture",
        "You will have a better understanding of the growing startup and open source ecosystem building around the JAMstack",
        "You will be able to explain what exactly the fuss is about the JAMstack"
      ],
      "instances": [
        {
          "venue": "Oredev",
          "date": "2019-11-07T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=QgKvRylmPfk"
        }
      ]
    },
    {
      "title": "JAMStack - The Total Victory of JavaScript",
      "slug": "jamstack-victory-jsla",
      "categories": [
        "JAMstack"
      ],
      "desc": "An introduction to the JAMstack from a historical perspective and how it finally lets JS \"win\"",
      "description": "A lot has happened in the five years since Val Karpov coined the MEAN stack to describe \"Full Stack\" Javascript stacks. React rose to dominance, AWS Lambda started the Serverless movement, and Static Site Generators came back in a big way. What is driving this new stack of Javascript, APIs, and Markup? This is the story of how a JAMstack cynic finally turned into a believer.",
      "instances": [
        {
          "venue": "JS.LA",
          "url": "https://js.la/events/2019/",
          "slides": "https://www.slideshare.net/ShawnWang36/jamstack-the-total-victory-of-javascript-jsla-feb-2019",
          "date": "2019-02-28T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=vOUcPI2mljU"
        },
        {
          "url": "https://jscamp.tech/",
          "venue": "JSCamp",
          "date": "2019-07-19T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=WVayQ66AGa4",
          "slides": "https://noti.st/swyx/gl7P6h/jamstack-the-total-victory-of-javascript"
        }
      ]
    },
    {
      "title": "Learn In Public",
      "slug": "learn-in-public-nyc",
      "categories": [
        "LearnInPublic"
      ],
      "description": "Developers are used to the idea of constant learning, especially in the fast moving Javascript ecosystem. But how often do we take a step back from learning to consider -how- we learn? In this talk we explore how Learning in Public can accelerate your career, bring value to your professional network, and ultimately make you a better developer, with examples all drawn from personal and other experience.",
      "github": "https://gist.github.com/sw-yx/505d15ed3e7febdab3aa3d25ee81f652",
      "instances": [
        {
          "venue": "VueNYC",
          "date": "2019-07-31T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=znNxtSbuBjI"
        },
        {
          "venue": "JRDevSG",
          "date": "2019-06-20T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?time_continue=6&v=-f-rZepNKW0",
          "desc": "An unrehearsed, raw, off the cuff talk about the LearnInPublic philosophy for internal Shopee developers. First ever nontechnical talk."
        },
        {
          "venue": "JRDevSG",
          "date": "2019-12-12T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=GxdhfnzuamY&feature=emb_title",
          "desc": "An unrehearsed, raw, off the cuff talk about the LearnInPublic philosophy for the JrDevSG crowd."
        }
      ]
    },
    {
      "title": "Complete Intro to Netlify in 3.5 hours",
      "slug": "netlify-freecodecamp-intro",
      "categories": [
        "Netlify"
      ],
      "url": "https://www.netlify.com/blog/2019/10/07/complete-intro-to-netlify-in-3.5-hours/_",
      "github": "https://gist.github.com/sw-yx/f1b8eb239559feb7e3d97b0e05564b6d",
      "instances": [
        {
          "venue": "FreeCodeCamp",
          "date": "2019-10-07T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=mT5siI19gtc",
          "url": "https://www.netlify.com/blog/2019/10/07/complete-intro-to-netlify-in-3.5-hours/"
        }
      ]
    },
    {
      "title": "Lunch & Learn - Develop, Test, and Deploy Serverless Functions",
      "slug": "netlify-functions-lunchnlearn",
      "categories": [
        "Netlify"
      ],
      "url": "https://smashingconf.com/toronto-2019/lunch-sessions",
      "desc": "This show-and-tell session will look at what you can do with serverless functions, how to get started creating and locally testing them with Netlify Dev, and finally deploying them as Netlify Functions with atomic deployments and instant rollbacks.",
      "description": "Making dynamic app functionality on the JAMstack often involves writing custom APIs as \"glue code\", \"token hiders\" and other business logic traditionally done on the server. Even _without_ a JAMstack architecture, serverless functions can be a great add-on, autoscaling solution for additional functionality for existing apps. It should be -easy- to spin up these serverless functions, but learning, testing and deploying them can often be more trouble than they are worth. This show-and-tell session will look at what you can do with serverless functions, how to get started creating and locally testing them with Netlify Dev, and finally deploying them as Netlify Functions with atomic deployments and instant rollbacks. Static has never looked this dynamic!",
      "instances": [
        {
          "venue": "SmashingConf Toronto",
          "date": "2019-06-26T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=iLc8rXlLoMU"
        },
        {
          "venue": "SmashingConf Toronto (Back)",
          "date": "2019-06-26T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=CdSwZZVnq6Q&feature=youtu.be"
        },
        {
          "venue": "SmashingConf NYC",
          "date": "2019-10-16T00:00:00.000Z",
          "url": "https://smashingconf.com/ny-2019/lunch-sessions",
          "video": "https://youtu.be/ewV-IGt0yls",
          "description": "A shorter, 20min version of the 1hr lunch 'n learn done at SmashingConf Toronto https://www.swyx.io/speaking/netlify-functions-lunchnlearn."
        }
      ]
    },
    {
      "title": "Intro to Netlify for React Devs",
      "slug": "netlify-intro-lightning",
      "categories": [
        "Netlify"
      ],
      "url": "https://reactknowledgeable.org/meetups/5/",
      "desc": "An intro to Netlify for the inaugural React + JAMstack Singapore meetup.",
      "github": "https://gist.github.com/sw-yx/09678b6fd9b756362d4e033ee1c32649",
      "instances": [
        {
          "venue": "ReactKnowledgeable",
          "date": "2019-12-05T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=o-Cp53QAQwM&feature=share"
        }
      ]
    },
    {
      "title": "Programming TypeScript",
      "subtitle": "Cultural Learnings of Programming for Make Benefit Glorious Users of TypeScript",
      "slug": "programming-typescript",
      "categories": [
        "TypeScript"
      ],
      "url": "https://www.meetup.com/TypeScriptNYC/events/263420132/?action=rsvp&response=yes",
      "desc": "some notes from Programming TypeScript, a book report",
      "description": "this is a book report version of some things i learned from reading Programming TypeScript https://twitter.com/swyx/status/1135525665971695617",
      "instances": [
        {
          "venue": "TypeScriptNYC",
          "date": "2019-08-07T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=B-gANQc0giM&feature=youtu.be"
        }
      ]
    },
    {
      "title": "A Gentle Introduction to React and TypeScript",
      "slug": "react-typescript",
      "categories": [
        "TypeScript"
      ],
      "url": "https://www.meetup.com/Real-World-React/events/256448268/",
      "desc": "a live coding demo of starting with typescript for react devs",
      "description": "TypeScript is increasingly being adopted in React apps at scale, from AirBnb to Shopify to Atlassian. In this live coding talk, we walk through best practices and introduce everything you need to know to get started, WITHOUT getting lost in arcane generic type logic! \nThe theme of this talk is showing how TypeScript (TS) tooling helps write and document apps at scale. We'll do: \n- a live coding demo of starting with typescript for react devs  - end with some resources and discussions of pitfalls",
      "instances": [
        {
          "venue": "Real World React",
          "date": "2019-01-17T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=TcDFd9W2Y2A"
        }
      ]
    },
    {
      "title": "Serverless GraphQL",
      "slug": "serverless-graphql",
      "categories": [
        "GraphQL"
      ],
      "desc": "A basic talk on how serverless functions work with GraphQL",
      "description": "GraphQL is often synonymous with the return of Monolithic architecture. Does this mean the benefits of Serverless are irrelevant? In this talk we explore how Serverless and GraphQL work together, explore ways to stitch individual function schemas, and get hard numbers to fight performance concerns.",
      "github": "https://gist.github.com/sw-yx/f099b6d197658e8818ceb5eefa490d1a",
      "instances": [
        {
          "venue": "GraphQL Asia",
          "url": "https://www.graphql-asia.org/",
          "date": "2019-04-12T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=lq_He6Buv14"
        },
        {
          "venue": "Apollo Day",
          "date": "2019-05-21T00:00:00.000Z",
          "alt-title": "Serverless GraphQL with Netlify Dev",
          "url": "https://www.youtube.com/watch?v=rCYOpTQReD4"
        }
      ]
    },
    {
      "title": "Compile Svelte in Your Head (Lightning Talk)",
      "slug": "svelte-compile-lightning",
      "categories": [
        "Tech",
        "Svelte"
      ],
      "desc": "A great way to break the black box of Svelte is to look at the compiled output. This helps you understand both the runtime and the compiler.",
      "description": "a fuller discussion of this was done by Tan Li Hau https://lihautan.com/compile-svelte-in-your-head-part-1/",
      "github": "https://gist.github.com/sw-yx/6a3f3c0bbab7c5b328bc60526b673441",
      "instances": [
        {
          "date": "2019-10-01T00:00:00.000Z",
          "description": "A lightning talk for Svelte Society Oct 1",
          "venue": "SvelteSociety"
        },
        {
          "date": "2019-12-06T00:00:00.000Z",
          "venue": "ReactKnowledgeable",
          "video": "https://www.youtube.com/watch?v=FNmvcswdjV8"
        }
      ]
    },
    {
      "title": "Introducing Svelte Site Generator",
      "slug": "svelte-intro-ssg",
      "categories": [
        "Tech",
        "Svelte"
      ],
      "description": "A lightning talk for Svelte Society November",
      "slides": "https://docs.google.com/presentation/d/1xvErwRiPjeVT2O9qIAoFpT0cSCpt37FHmK4QFuUE1ls/edit?usp=sharing_erl&userstoinvite=olegchursin@gmail.com&ts=5dc0be33",
      "instances": [
        {
          "venue": "SvelteSociety",
          "date": "2019-11-04T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=JEH0V-zNGUk"
        }
      ]
    },
    {
      "title": "Immutability is Changing",
      "subtitle": "From Immutable.js to Immer",
      "slug": "immutability-is-changing",
      "categories": [
        "Immutability"
      ],
      "github": "https://gist.github.com/sw-yx/0f7419f29e4ece87446dcd51a43d3855",
      "url": "https://www.netlify.com/blog/2018/09/12/the-rise-of-immer-in-react/",
      "desc": "Why Immutability in JS and why you shouldn't use Immutable.js to do it",
      "description": "The need for immutability in JavaScript isn’t obvious, but Immutable.js swept the Javascript world in 2015 when it enforced a stricter, more functional approach to code without any need for deep comparisons. Then Immer was introduced in 2018, and took the Javascript world by storm. What's different? What's better? And what do ES6 Proxies have to do with it?",
      "instances": [
        {
          "venue": "Rehearsal",
          "date": "2019-01-24T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=CbDD3c1KbKI"
        },
        {
          "venue": "ForwardJS",
          "url": "https://forwardjs.com/schedule",
          "date": "2019-01-24T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=bFuRvcAEiHg"
        }
      ]
    },
    {
      "title": "STAR Apps",
      "categories": [
        "React",
        "TypeScript"
      ],
      "github": "https://gist.github.com/sw-yx/531f6e848496c8744d8ee010d40a2e5a",
      "url": "https://css-tricks.com/star-apps-a-new-generation-of-front-end-tooling-for-development-workflows/",
      "desc": "A 1hr talk about Storybook, TypeScript, Apollo GraphQL, and React",
      "description": "A new front-end stack is emerging, with one theme - constraints that scale. They involve building Design Systems for visual consistency, using TypeScript for internal consistency, Apollo GraphQL for data manipulation, and server- or statically-rendered React for data representation. In this talk we explore how these trends fit together, and _why_ leading product teams from AirBnb to the New York Times are embracing them.",
      "instances": [
        {
          "venue": "All Things Open",
          "date": "2019-10-14T00:00:00.000Z",
          "url": "https://allthingsopen.org/schedule/",
          "video": "https://www.youtube.com/watch?v=vLVnwlrMDD0",
          "tweet": "https://twitter.com/swyx/status/1183884912321060864"
        },
        {
          "venue": "SV Code Camp",
          "date": "2019-10-19T00:00:00.000Z",
          "img": "https://user-images.githubusercontent.com/6764957/93413645-4b65ba00-f8d2-11ea-92db-6ea67a4a5094.jpg",
          "url": "https://www.siliconvalley-codecamp.com/Session/2019/star-apps-design-systems-typescript-apollo-graphql-and-react",
          "video": "https://www.youtube.com/watch?v=avJkYrfvutk"
        }
      ]
    },
    {
      "title": "A Skeptic's Intro to the JAMstack",
      "slug": "jamstack-skeptic",
      "categories": [
        "JAMstack"
      ],
      "github": "https://gist.github.com/sw-yx/8b8c13f9608c6aea21ec424b4bd10f7c",
      "desc": "An introduction to the JAMstack from a skeptical perspective",
      "description": "A delightful exploration of how JavaScript web apps, serverless APIs, the static-site renaissance, and Git-centric workflows are enabling a whole new architecture, from a fellow skeptic wary of marketing acronyms.",
      "instances": [
        {
          "venue": "Asbury Agile",
          "date": "2019-10-04T00:00:00.000Z",
          "url": "https://www.asburyagile.com/schedule",
          "video": "https://www.youtube.com/watch?v=DD6KTAGrj3E",
          "img": "https://user-images.githubusercontent.com/6764957/93413819-aa2b3380-f8d2-11ea-8bbb-f51b384b9a6f.jpeg"
        },
        {
          "venue": "All Things Open",
          "date": "2019-10-14T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=yzY1vIQmVUA&feature=youtu.be",
          "tweet": "https://twitter.com/swyx/status/1183886538251423744",
          "url": "https://allthingsopen.org/schedule/"
        },
        {
          "venue": "JSCamp Barcelona",
          "date": "2019-07-14T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=WVayQ66AGa4",
          "slides": "https://noti.st/swyx/gl7P6h/jamstack-the-total-victory-of-javascript",
          "url": "https://jscamp.tech/speakers/2019/shawn-wang/",
          "img": "https://user-images.githubusercontent.com/6764957/93413812-a5667f80-f8d2-11ea-8a4f-d51c88c6c99e.jpeg"
        }
      ]
    },
    {
      "title": "Heaps",
      "slug": "fullstack-heaps",
      "categories": [
        "Data Structures"
      ],
      "desc": "Bootcamp talk - guide to the Heap data structure and where they are used",
      "instances": [
        {
          "venue": "Fullstack Academy",
          "date": "2017-09-29T00:00:00.000Z",
          "slides": "https://slides.com/swyx/heaps#/"
        }
      ]
    },
    {
      "title": "Crossbones",
      "slug": "fullstack-crossbones",
      "categories": [
        "React Native"
      ],
      "github": "https://github.com/sw-yx/crossbones",
      "url": "https://www.fullstackacademy.com/hackathon-presentations/crossbones-fullstacks-react-native-boilerplate",
      "desc": "a React Native boilerplate for a hackathon",
      "instances": [
        {
          "venue": "Fullstack Academy",
          "date": "2017-09-29T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=QFIj6iiqjWw"
        }
      ]
    },
    {
      "title": "React Trip Planner",
      "slug": "fullstack-react-trip-planner",
      "categories": [
        "React"
      ],
      "github": "https://github.com/sw-yx/FSA-React-Trip-Planner",
      "desc": "a guided workshop on converting a vanilla JS app into React for the first time.",
      "instances": [
        {
          "venue": "Fullstack Academy",
          "date": "2017-08-17T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=M6rL0PXxPHs"
        }
      ]
    },
    {
      "title": "Babel ❤️ GraphQL",
      "slug": "babel-heart-graphql",
      "categories": [
        "Babel",
        "GraphQL"
      ],
      "desc": "Babel plugins can help solve DX and UX tradeoffs by metaprogramming to while delivering code that is why stop there? In this talk we explore how babel-blade solves the double declaration problem in all get started writing your first babel plugin!",
      "url": "https://babel-blade.netlify.com/",
      "github": "https://github.com/sw-yx/babel-blade",
      "misc": {
        "feedback": "https://shawnwang3.typeform.com/to/OYtqZ7",
        "description2": "Babel-Macros were shipped with Create-React-App v2 - but what are they? What can you do with them? In this lightning talk we discuss how babel macros differ from plugins, and my recent work with babel-blade creating an inline GraphQL compiler that works with all React GraphQL clients.",
        "description3": "Babel-Macros were shipped with Babel v7 - but what are they? What can you do with them? In this lightning talk we discuss how babel macros differ from plugins, and my recent work with babel-blade creating an inline GraphQL compiler that works with all clientside GraphQL clients.",
        "graphqlasianotes": "No technical requirements apart from internet connection. I am the best person to speak on the subject because I made this macro https://babel-blade.netlify.com. Initially it was just a cool toy but then people at Coursera, Netflix, FB, and Adobe have picked up it telling me to keep going so I am applying for a lightning talk so I can spread the idea and get feedback/collaboration with the major clientside GraphQL clients!"
      },
      "instances": [
        {
          "venue": "React Boston",
          "date": "2018-09-28T00:00:00.000Z",
          "video": "https://youtu.be/7OHXz7vXC0g"
        },
        {
          "venue": "GraphQLNYC",
          "date": "2018-09-28T00:00:00.000Z",
          "video": "https://youtu.be/30wOsJOluA4?t=497"
        }
      ]
    },
    {
      "title": "Contributing to React",
      "slug": "contributing-to-react",
      "categories": [
        "React",
        "Open Source"
      ],
      "desc": "My very first public talk at a meetup, on Contributing to React. This went really well and Dan Abramov even added it to the React docs to guide people!",
      "github": "https://github.com/sw-yx/react-contributing",
      "url": "https://reactjs.org/docs/how-to-contribute.html",
      "instances": [
        {
          "venue": "ReactNYC",
          "date": "2017-12-15T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=GWCcZ6fnpn4",
          "slides": "https://github.com/sw-yx/react-contributing"
        }
      ]
    },
    {
      "title": "Creating Create-React-App",
      "slug": "creating-cra",
      "categories": [
        "React"
      ],
      "github": "https://github.com/sw-yx/create-react-app-parcel",
      "desc": "diving into the history of CRA, how CRA works, and my experience making create-react-app-parcel",
      "misc": {
        "description": "We all use create-react-app but how much do we know about how it works internally? In this talk we discuss how I recently dived into the source code for create-react-app to make a fun clone! It looks intimidating but is really not, once you get a hang of how lerna monorepos work and try making one of your own. Watch this and then go make your own create-awesome-app!",
        "note": "[max stoiber](https://github.com/mxstbr/mxstbr.com/blob/b7b1471541cb9fee679115bb29ded8ef14d65bfa/data/old-blog-posts/2016/12/a-dream-come-true.md#create-react-app) notes that `eject` used to be named `graduate`"
      },
      "instances": [
        {
          "venue": "ReactNYC",
          "video": "https://www.youtube.com/watch?v=Et571vTAtT8",
          "slides": "https://www.beautiful.ai/player/-LD4eaMxlqSlCy6biPmZ/Creating-Create-React-App",
          "date": "2018-06-21T00:00:00.000Z"
        }
      ]
    },
    {
      "title": "Never Bundle React Again",
      "slug": "never-bundle-react-again",
      "categories": [
        "Bundling"
      ],
      "url": "https://slides.com/swyx/never-bundle-react-again#/",
      "desc": "a rehash of MJackson's React Rally 2017 talk but I am not very proud of it",
      "instances": [
        {
          "venue": "ReactNYC",
          "date": "2018-02-13T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=rPuwZJEA-9U"
        }
      ]
    },
    {
      "title": "React Suspense",
      "slug": "react-suspense",
      "categories": [
        "React"
      ],
      "url": "https://slides.com/swyx/react-suspense",
      "desc": "a compendium of everything discussed about the React Suspense API",
      "instances": [
        {
          "venue": "ReactNYC",
          "video": "https://www.youtube.com/watch?v=eRvbh5C6Lj0",
          "date": "2018-04-22T00:00:00.000Z"
        }
      ]
    },
    {
      "title": "React's New Defaults",
      "slug": "reacts-new-defaults",
      "categories": [
        "React"
      ],
      "url": "https://github.com/sw-yx/talk-reacts-new-defaults",
      "desc": "a talk about the Why of Suspense, Time Slicing, and Hooks in React",
      "misc": {
        "description": "Concurrent React and React Hooks aren't simply new ways to do old things. They represent a new, stronger opinion of what apps should do by default. Let's explore the -Why- of React's new APIs!",
        "discussion": "This is a talk version of a popular blogpost I wrote: https://gist.github.com/sw-yx/17965a31413acb461c4d64028527011e\nThe structure:\n- Introduce the future roadmap of React - Talk about the importance of good defaults in Technology - Introduce the new defaults in Concurrent React and React Hooks - Introduce a demo Movie app with today's React - Demonstrate the drawbacks inherent in our current defaults - Introduce React suspense, live code into the Movie app - Talk about time slicing and the scheduler API - Introduce React Hooks, live code into the Movie app - Talk about Immediate mode vs Retained mode, and the DX Mullet - Conclude by contrasting the current defaults vs the better defaults introduced by the new React APIs "
      },
      "instances": [
        {
          "venue": "Bay Area React",
          "video": "https://youtu.be/vhWaMPQhMLQ",
          "date": "2018-11-15T00:00:00.000Z"
        }
      ]
    },
    {
      "title": "Why Contribute to Open Source?",
      "slug": "contributing-to-open-source",
      "categories": [
        "Open Source"
      ],
      "url": "https://gist.github.com/sw-yx/505d15ed3e7febdab3aa3d25ee81f652",
      "desc": "8 reasons to Contribute to Open Source, and how to Get Started (p.s. It doesn't have to be code)",
      "instances": [
        {
          "venue": "JAMstackConf",
          "date": "2018-11-03T00:00:00.000Z",
          "video": "https://youtu.be/GgqQI3zdzFY"
        }
      ]
    },
    {
      "title": "Why React is -NOT- Reactive",
      "slug": "react-not-reactive",
      "categories": [
        "React",
        "Reactivity"
      ],
      "url": "https://slides.com/swyx/why-react-is-not-reactive",
      "github": "https://github.com/sw-yx/reactive-react",
      "desc": "diving into React's push-pull data flow and the importance of scheduling in React",
      "misc": {
        "banner": "./DkvCgB6XcAAeYcP.jpeg",
        "reddit": "https://www.reddit.com/r/reactjs/comments/98lbpi/why_react_is_not_reactive_react_rally_2018/",
        "feedback": "https://shawnwang3.typeform.com/to/cC7sYD",
        "cfp": "https://gist.github.com/sw-yx/9bf1fad03185613a4c19ef5352d90a09"
      },
      "instances": [
        {
          "venue": "ReactNYC",
          "date": "2018-08-12T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=nyFHR0dDZo0"
        },
        {
          "venue": "React Rally",
          "date": "2018-08-22T00:00:00.000Z",
          "video": "https://www.youtube.com/watch?v=ZZoB5frlcnE"
        }
      ]
    }
  ]
}