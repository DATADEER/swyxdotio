{
  "markdown": [
    {
      "slug": "clone-open-source-apps",
      "data": {
        "title": "Clone Open Source Apps",
        "slug": "clone-open-source-apps",
        "categories": [
          "Advice"
        ],
        "date": "2018-06-21T00:00:00.000Z"
      },
      "content": "\nYou already know you should be making projects to learn things and potentially add to your portfolio. You've read your Malcolm Gladwell, you know that you need 10,000 hours of deliberate practice. Given you're just starting out, I have a slightly contentious suggestion for you: DON'T make anything new.\n\nYour decision-making is a scarce resource. You start every day with a full tank, and as you make decisions through the day you gradually run low. We all know how good our late-late-night decisions are. Making a new app involves a thousand micro decisions - from what the app does, to how it should look, and everything in between. Decide now: Do you want to practice making technical decisions or product decisions?\n\nOk so you're coding. You know what involves making zero product decisions? Cloning things. Resist the urge to make your special snowflake (for now). Oh but then who would use yet another Hacker News clone? I've got news for you: No one was gonna use your thing anyway. You're practicing coding, not making a startup. Remember?\n\nMake the clone on your own, then check the original's source. Now you have TWO examples of how to implement something, so you even get to practice something only senior devs get to after years of experience: understanding the tradeoffs of technical choices!\n\nYou're lucky. You live in an age where companies and teams open source their entire apps. There's [Spectrum](https://github.com/withspectrum/spectrum) and [Codesandbox](https://github.com/CompuIves/codesandbox-client) and [FreeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp/) and [Ghost](https://github.com/TryGhost/Ghost) and if those seem like waaay too big of an app for you (they are huge) go look at the side projects of your mentors (see above). Ryan Florence has [planner](https://planner.now.sh/) and Kent Dodds has [TIL](https://til.netlify.com/)! Make a clone, then show it to them! You are guaranteed to get free feedback.\n\nHere's the subheading: **put a time limit on it**. Deadlines work wonders. Also you're not going for a pixel perfect clone of something that teams of people, way more experienced than you, have made. You want to have a set amount of time, get as much of the interesting features as possible, and then ship it. This guarantees that you will be freed up for the next clone, and the next. Different projects let you try different libraries and stacks, and figure out what you like there. Also you get to practice one of the hardest software engineering skills of all: Project Estimation. You'll create many, many opportunities for yourself to see what you can do in a set amount of time because you're deliberately practicing making things on the clock. And none of that time is taken up by product decisions!\n\nWhen you've done enough and start feeling bored, it's time to let your freak flag fly. You've earned the right to make your app because you've made others. You know what things cost and you have used your tools well enough to get there. You're still learning in public, though! Package up your experience into a talk. Livestream yourself coding. Blog about your game plan, then blog some more as you execute it. Developers who can communicate are in far more demand than developers who can't.\n\np.s. All this will be a lot easier if you Know Your Tools well.\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n\nmore: https://mobile.twitter.com/ryanflorence/status/1119661699617787904\n"
    },
    {
      "slug": "know-your-tools",
      "data": {
        "title": "Know Your Tools",
        "slug": "know-your-tools",
        "categories": [
          "Advice"
        ],
        "date": "2018-06-20T00:00:00.000Z"
      },
      "content": "\nYou missed a lot in your bootcamp. I'm not talking about compiler theory from computer science courses. I don't mean algos. I mean a lot of basic knowledge of your tools is lacking. \"A poor craftsperson blames his tools\", they say. But you. You're no \"craftsperson\", you're still a novice. You don't even know your own tools that well. You haven't built that much with them, and you still freak out when things go wrong. It's not your fault, but it's in your power to fix your gaps. The bootcamp gave you a head start, now you have to go the distance.\n\nIf you're a frontend dev: Learn Webpack. Learn Babel. Learn what the CSSWG and TC39 do. Heck, learn Javascript and CSS all over again. Did you know you can use the Chrome Devtools as a profiler and an IDE? Learn bash. Learn git. Learn CI/CD. Learn frontend testing. Learn Docker. Learn AWS, and Firebase. OPEN NODE_MODULES. Yeah, it's a lot, and I don't truly know some of these things either. I'm workin on it. Equally important is figuring out what is ok to miss. I have my list, I'm not sharing it. But there are some things you will use daily in whatever career you end up in, and some other things are sexier or seem important but are really just nice-to-have. Figure out the difference. Tech is a house of cards a mile high, abstractions atop abstractions. Lower levels of abstraction have a longer half-life than higher ones. Kyle Simpson says you should learn one abstraction level below where you work. I think that's directionally but maybe not literally correct.\n\nThe subheading for this one is **avoid FOMO**. Your favorite thought leader says you should check out ReasonML, is Javascript dead? Why the hell do people want to kill Redux so bad? Is CSS-in-JS literally the devil? Vue passed React in Github stars, should you pivot to Vue?\n\nI dunno, do you get paid in Github stars?\n\nFill in -your- gaps. Focus on you and your needs. There are so many opportunities in tech that you can pretty much pick out your turf and play entirely within it AND be completely ignorant of all the other stuff AND still do great! Don't get me wrong: I'm a big fan of playing the meta-game. It is possible to make strategic blunders but it's also impossible to avoid them altogether. Stop trying. It's much better to focus on the \"good enough\" and be directionally but not literally correct. The goal is to be accurate, not precise. Try your best to be right, but don't worry when you're wrong.\n\nThere's more to knowing your tools than just knowing _what_ they are. There's also the _why_ and the _who_. Who made the paradigms we live in now? Who's maintaining it today? Why is the API the way it is? Why did it change from past versions? (If you're feeling adventurous: _how_ does the tool work under the hood?) Let your intellectual curiosity carry you and fill in your lack of experience with research that nobody else bothers to do. Guess what? There could not be an easier subject matter to research, this stuff is literally all online and version controlled with git, and all the people involved are still alive and easily contactable.\n\nAnd when you've filled something in, when you've found something cool in your research, write it up.\n\np.s. Learn in public.\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n"
    },
    {
      "slug": "learn-in-public-hack",
      "data": {
        "title": "The Ultimate Hack for Learning In Public",
        "subtitle": "Pick Up What They Put Down",
        "desc": "By Picking Up What They Put Down, you are applying Nir Eyal's Hooked model to provide an inbuilt feedback mechanism to kickstart your",
        "slug": "learn-in-public-hack",
        "categories": [
          "Advice",
          "Learn In Public"
        ],
        "date": "2020-01-01T00:00:00.000Z"
      },
      "content": "\nLet's say you're sold on the idea of [Learning In Public](https://www.swyx.io/writing/learn-in-public/).\n\nYou want to start right away but are feeling intimidated at all the advice out there:\n\n- **\"Hey read my blogpost on [Learning Gears](https://www.swyx.io/writing/learning-gears/)!\"** lol typical me being too abstract 😛\n- **\"Just start a blog for the past you!\"** but you've done that before - and no one read it - and you lost interest.\n- **\"Ask people what they want to read!\"** but you don't have people to ask, and people always say yes to free content anyway. Which you write and they then don't read. So you lose interest.\n- **\"Don't worry it takes a while to get an audience!\"** but all the people telling you that are unrelatable because they're already successful in your eyes, so you lose interest.\n\n**You're not alone.**\n\nIn the past 2 years I've talked to a couple hundred people at various stages of their #LearnInPublic journey, and of course I went thru it myself. It's still too hard to start, no matter how many well-intentioned voices tell you what they do and how they did it.\n\nI think, like any new habit or diet, **the best plan for you is the plan you can stick to**.\n\nAfter doing a lot of thinking, **I have a hack for you**. It is 6 words long:\n\n## Pick Up What They Put Down\n\n**Who's \"they\"?** Anyone you look up to, anyone who knows more than you in the thing you're trying to learn. If that's still too broad for you: Look for the maintainers of libraries and languages you use, or the people who put out YouTube videos, podcasts, books, blogposts and courses.\n\n**What do you mean by \"put down\"?** Any **new** library, demo, video, podcast, book, blogpost, or course that _they_ put out. It is important that it be **new**. By virtue of it being **new**, it is simultaneously at the top of _their_ minds, and also the most likely to lack genuine feedback.\n\n(Psst... This is where you come in!)\n\n**How do I pick \"it\" up?** Here is a nonexhaustive smattering of ideas for you:\n\n- **If it's a new library, go try it out.** Report bugs, ask questions about ANY confusing documentation, make a demo using the library, then blog about it!\n- **If it's a new demo, go read the source code!** Then write a walkthrough of the source code explaining everything in your own words.\n- **If it's a new video/talk/podcast/book/blogpost**, summarize it in your own words.\n- **If it's a new course**, go through it, highlight the top 3 things you learned.\n- [Sketch notes](https://illustrated.dev/) for literally anything are always LOVED.\n- [Tan Li Hau](https://twitter.com/lihautan) literally became a Svelte maintainer by [picking up TODO's in the Svelte codebase](https://www.youtube.com/watch?v=NSUa1124ahs)\n- come up with your own ideas, I'm not the boss of you\n\nThe BIG requirement about any of the above is that **you MUST genuinely love/be excited about the thing you're picking up**. If you don't love it, move on quietly. You don't want to build a brand of shitting on things people put out.\n\nYou must also close the loop - when you have produced anything (e.g. a blogpost) based on their work, tag the creator in social media. Twitter is inherently designed for this, but you can also reply in a comment or email it to them with a nice note.\n\n## What happens when you do this?\n\nThere is a VERY high chance that you will get feedback on your blogpost or demo or tweet or whatever, directly from _them_. A retweet and/or follow back is common, especially on repeated interaction where you prove yourself an eager, earnest learner.\n\nIf you try your very best to understand the topic, AND you still get something wrong, you will be corrected. If you [keep your ego small](https://www.swyx.io/speaking/kentcdodds-podcast/), you will handle it. In fact, being wrong in public will be your biggest source of personal growth.\n\n## Why does this work on them?\n\nSimple: **not enough people do it. That's why this is a hack.**\n\nActivity on the Internet has an insane [Zipf's law](https://en.wikipedia.org/wiki/Zipf%27s_law) distribution. This is sometimes called the \"[one percent rule](<https://en.wikipedia.org/wiki/1%25_rule_(Internet_culture)>)\" - 90% of people passively view content, 9% comment on content, 1% create. I would endorse this but for the fact that it is HUGELY wrong:\n\n- I help moderate a [subreddit](https://www.reddit.com/r/reactjs) with ~300k monthly unique visitors - charitably, about 2k of them actually comment, and say 100 people consistently submit content.\n- I get [2-3m tweet impressions](https://www.swyx.io/writing/10000-loose-fans/) a month, but only about 1-2k mentions/replies.\n- Pick any YouTube video you care about. Look at the view count, and look at the number of comments.\n\nBasically, the correct number of passive consumption is closer to 99%, and less than 1% even comment on newly created content. I'm not exaggerating in the least.\n\n> Cesar Kuriyama [randomly tweeted](https://twitter.com/CesarKuriyama/status/331652847806595072) at Jon Favreau about something he made that didnt get picked up. Jon [ended up writing Cesar's app into his classic movie, Chef.](https://www.indiehackers.com/podcast/141-cesar-kuriyama-of-1-second-everyday)\n\nIn short, **people are lazy**. This also means you can get ahead via **strategic nonlaziness**.\n\nWhat's the strategy? Say it with me: **PICK UP WHAT THEY PUT DOWN**.\n\nThere is a _dire_ lack of feedback everywhere. Yes, there are industry superstars with inboxes too hot to respond to. You will get ignored. But even they go out of their way to respond to _some_ feedback. And we already established there aren't too much of those.\n\nOn Twitter in particular, people can be shy promoting their own work. But if _someone else_ on the Internet says nice things about their work, well, shit, they can RT that all day long.\n\n## Why does this work on -you-?\n\nFeedback, feedback, feedback. You lose interest when you get no feedback. What we all crave to keep going is feedback that we're doing something wrong, or right, anything to prime the next action we take. The fact that we don't know what the feedback will be makes it a \"variable reward\" - which is human catnip for forming a new habit.\n\n[Read Nir Eyal's Hooked model](https://www.nirandfar.com/how-to-manufacture-desire/) for more explanation, but basically we are setting up:\n\n- **Trigger**: Something new was created\n- **Action**: \"Pick it up\" a.k.a you create some piece of content based on the new thing\n- **Variable Reward**: You get feedback or endorsement or criticism from the creator\n- **Investment**: You respond to, or internalize, the feedback so you get better the next time around. (aka \"learning\")\n\n## Your call to action\n\nTis the season of launching things. In the next month, dozens of cool new libraries and demos and talks and podcasts and courses will be released, on things that you want to learn.\n\nPick 3 that interest you and \"pick up\" on them.\n\nI virtually guarantee you get feedback on at least one. If you don't aim _too_ high, you will go 3 for 3.\n\nDo this 12 times.\n\nYou will end the year having learned a good deal and having made many new friends along the way. Including me... if you (_ahem_) tag me 😉\n\n## Examples\n\n- [My breakdown of the React Suspense demo](https://dev.to/swyx/a-walkthrough-of-that-react-suspense-demo--4j6a) the day after it was released, in 2018 when I was still getting started with React Twitter, and [you can see the response here](https://nitter.net/search?f=tweets&q=https%3A%2F%2Fdev.to%2Fswyx%2Fa-walkthrough-of-that-react-suspense-demo--4j6a%20)\n- [Me summarizing Boris Cherny's TypeScript book](https://nitter.net/swyx/status/1135525665971695617#m)\n- [Me summarzing Evan You's podcast appearance](https://nitter.net/swyx/status/1199619073836867585#m)\n- Sean Wes: [Learn From People Ahead, Connect With People Beside](https://seanwes.com/podcast/486-sabbatical-episode-finding-community-part-3-of-5-learn-from-people-ahead-connect-with-people-beside/)\n  - Look for the Greatness formula and the Best Friend Method\n"
    },
    {
      "slug": "learn-in-public",
      "data": {
        "title": "Learn In Public",
        "slug": "learn-in-public",
        "subtitle": "The fastest way to learn",
        "categories": [
          "Advice",
          "Learn In Public"
        ],
        "date": "2018-06-19T00:00:00.000Z",
        "description": "The fastest way to learn, grow your career, and build your network."
      },
      "content": "\n> Author's Note: I have written an expanded version of this essay in [The Coding Career Handbook](http://learninpublic.org/?from=swyxdotio-LIP).\n> Translations welcome! ([한국어](https://velog.io/@kwanwooi/%EA%B3%B5%EA%B0%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%95%99%EC%8A%B5%ED%95%98%EB%9D%BC), [Español](https://ricardoerl.com/blog/aprender-en-publico), [中文](https://juejin.im/post/6855456536056037389))\n\nIf there's a golden rule, it's this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\n\nYou already know that you will never be done learning. But most people \"learn in private\", and lurk. They consume content without creating any themselves. Again, that's fine, but we're here to talk about being in the top quintile. What you do here is to have **a habit of creating learning exhaust**:\n\n- Write blogs and tutorials and cheatsheets.\n- Speak at meetups and conferences.\n- Ask and answer things on Stackoverflow or Reddit. **Avoid** the walled gardens like Slack and Discord, they're not public.\n- Make Youtube videos or Twitch streams.\n- Start a newsletter.\n- Draw cartoons ([people](https://code-cartoons.com/) [loooove](https://wizardzines.com/) [cartoons](https://arkwright.github.io/scaling-react-server-side-rendering.html)!).\n\nWhatever your thing is, **make the thing you wish you had found** when you were learning. **Don't judge** your results by \"claps\" or retweets or stars or upvotes - just talk to yourself from 3 months ago. I keep an almost-daily dev blog written for no one else but me.\n\nGuess what? It's not about reaching as many people as possible with your content. If you can do that, great, remember me when you're famous. But chances are that _by far_ the biggest beneficiary of you trying to help past you is _future you_. If others benefit, that's icing.\n\nOh you think you're done? Don't stop there:\n\n- Enjoyed a coding video? Reach out to the speaker/instructor and thank them, and ask questions.\n- Make PR's to libraries you use.\n- Make your own libraries no one will ever use.\n- **Clone stuff you like, from scratch, to see how they work**.\n- Teach workshops.\n- Go to conferences and summarize what you learned.\n\nIf you're tired of creating one-off things, start building a persistent knowledge base that grows over time. [Open Source your Knowledge](https://www.swyx.io/speaking/open-source-knowledge/)! At every step of the way: _Document what you did and the problems you solved._\n\nThe subheading under this rule would be: **Try your best to be right, but don't worry when you're wrong.** Repeatedly. If you feel uncomfortable, or like an impostor, good. You're pushing yourself. Don't assume you know everything, but try your best anyway, and let the internet correct you when you are inevitably wrong. Wear your noobyness on your sleeve.\n\n**People think you suck?** Good. You agree. Ask them to explain, in detail, why you suck. You want to just feel good or you want to **be** good? No objections, no hurt feelings. Then go away and prove them wrong. Of course, if they get abusive block them.\n\nDid I mention that teaching is the best way to learn? **Talk while you code**. It can be stressful and I haven't done it all that much but my best technical interviews have been where I ended up talking like I teach instead of desperately trying to prove myself. We're animals, we're attracted to confidence and can smell desperation.\n\nAt some point you'll get some support behind you. People notice genuine learners. They'll want to help you. Don't tell them, but they just became your mentors. **This is very important: [Pick up what they put down](https://www.swyx.io/writing/learn-in-public-hack)**. Think of them as offering up quests for you to complete. When they say \"Anyone willing to help with **\\_\\_** **\\_\\_**?\" you're that kid in the first row with your hand already raised. These are senior engineers, some of the most in-demand people in tech. They'll spend time with you, 1 on 1, if you help them out (p.s. and there's always something they want help on). You can't pay for this stuff. They'll teach you for free. Most people don't see what's right in front of them. But not you.\n\n\"With so many junior devs out there, why will they help _me_?\", you ask.\n\n**Because you learn in public.** By teaching you, they teach many. You amplify them. You have one thing they don't: a beginner's mind. You see how this works?\n\nAt some point people will start asking you for help because of all the stuff you put out. 80% of developers are \"dark\", they dont write or speak or participate in public tech discourse. But you do. You must be an expert, right? Don't tell them you aren't. Answer best as you can, and when you're stuck or wrong pass it up to your mentors.\n\nEventually you run out of mentors, and just solve things on your own. You're still putting out content though. You see how this works?\n\nLearn in public.\n\np.s. Eventually, they'll want to pay you for your help too. A lot more than you think.\n\n---\n\n> Next: [Learning Gears](https://www.swyx.io/writing/learning-gears/) (How to Start Learning In Public)\n\n> Also: [The Ultimate Hack for Learning In Public](https://www.swyx.io/writing/learn-in-public-hack/) (expanding on \"Pick Up What They Put Down\")\n\n> See Also: [How To Learn In Private](https://www.swyx.io/writing/learn-in-private) (not everything has to be public!)\n\n> Also: [Big L Notation](https://www.swyx.io/writing/big-l-notation) (expanding on why \"Learn In Public\" is the fastest way to learn)\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n\n---\n\n**Related links**\n\n- Talk version of this essay: https://www.swyx.io/speaking/learn-in-public-nyc\n- Patio11: [Do not end the week with nothing](https://training.kalzumeus.com/newsletters/archive/do-not-end-the-week-with-nothing)\n- Chris Coyier: [Showing up and Persistence](https://chriscoyier.net/2013/10/18/mediocre-ideas-showing-up-and-persistence/) and [Working in Public](https://chriscoyier.net/2012/09/23/working-in-public/)\n- Cory House: [Becoming an Outlier](https://vimeo.com/97415346) and [The Art of Learning](https://www.bitnative.com/2013/12/14/programming-your-brain-the-art-of-learning-in-three-steps/) and [Lifestyle Systems](https://www.infoq.com/presentations/lifestyle-software-developer/) and [The 7 Pillar Developer](https://www.youtube.com/watch?v=Nks_Fb5TUjs&feature=emb_title)\n- Jeff Atwood: [How to stop sucking and be awesome instead](https://blog.codinghorror.com/how-to-stop-sucking-and-be-awesome-instead/)\n- Kent C Dodds: [Intentional Career Building](https://kentcdodds.com/blog/intentional-career-building)\n- Joshua Branchaud: Learning In Public by [posting daily TIL's for 5 years](https://github.com/jbranchaud/til)\n- Patrick O’Shaughnessy: [Learn, Build, Share, Repeat](https://twitter.com/david_perell/status/1214559294273683456?s=20)\n\n    > Learn in public, fanatically. Find something you can't stop thinking about and know it better than anyone, and share everything you learn along the way. Once deep enough, start building something too. Make something you have to sell as early as possible. - [Patrick in David Perell's Twitter course](https://twitter.com/drkraft/status/1268194548343279616)\n- LadyBug Podcast: [Blogging 101](https://ladybug.dev/episode/blogging-101/) (esp [Ali Spittel's Blog Post Workflow](https://dev.to/aspittel/my-blog-post-workflow-from-topic-to-publication-4n78))\n- Quincy Larson: [Build your Skills, Build your Reputation, Build your Network](https://twitter.com/ossia/status/1079942716480344065?s=12)\n- [Ali Spittel on syndicating content](https://podcasts.google.com/?feed=aHR0cHM6Ly9mZWVkcy5wb2R0cmFjLmNvbS9WR0F1bHBON01ZMVU&episode=aHR0cHM6Ly9tZWRpYS5ibHVicnJ5LmNvbS9hcnJlc3RlZGRldm9wcy9jb250ZW50LmJsdWJycnkuY29tL2FycmVzdGVkZGV2b3BzL2FycmVzdGVkLWRldm9wcy1wb2RjYXN0LWVwaXNvZGUxNDMubXAz&hl=en&ved=2ahUKEwiFwevO-KvnAhUwFzQIHdd-Dn4QjrkEegQICBAI&ep=6) on the Arrested DevOps podcast\n- Reid Hoffman: [Those Who Teach, Can Do](https://medium.com/@reidhoffman/those-who-teach-can-do-98a30e9a74ea)\n- Shu Omi [did LIP on YouTube](https://www.youtube.com/watch?v=JpzTYxzcF8I) and gained 5k subscribers in 8 months!\n- Gift Egwuenu on [Learning in Public](https://www.youtube.com/watch?v=8VGoj8mrMnY)\n- [How do Rocket Scientists Learn? (Knowledge Management Lessons learned at Goddard, NASA)](https://www.govloop.com/community/blog/how-do-rocket-scientists-learn-aka-knowledge-management-lessons-learned-at-goddard-nasa/)\n\n> In some places, Knowledge Management is about creating systems that get around people’s knowledge deficiencies. At Goddard, it really seems like it is about empowering people to share and reflect on what they know best. It’s a subtle distinction, but I really like that they put people in the center of this work, and start from a place of abundant knowledge in people rather than a lack of information in systems.\n> Social media has a lot of potential, but you need to think about how to facilitate different kinds of (online and offline) relationships between people so that their thinking is improved, innovation occurs, they can get quick answers to complex problems, in order to enhance and accelerate business outcomes.\n> One of the great benefits of using social media as a KM tool is that you are creating and capturing the knowledge at the same time. However, in order for this to truly work people have to be willing to collaborate in the open throughout the project lifecycle. “Learning in Public” is scary for many reasons – people can find and cling to outdated information and users are exposing their knowledge during a vulnerable time in the project (i.e. when they don’t yet have all the answers). However, during this part of the process is when learning can be most valuable. If you share what you know and what you don’t know in the middle of a project, you give people an opportunity to share specific knowledge that can help you in the moment. If it works, this can help save time and money.\n\n- Nathan Barry in his book Authority:\n\n> Back in 2007 Chris Coyier launched a site called css-tricks.com. It was a site dedi- cated to teaching people how to code websites. (CSS is the language that describes how websites should look.) When CSS-Tricks first came out I remember reading a tutorial and arrogantly thinking, “I know that already.” Chris and I were at about the same skill level, so I didn’t learn anything new from him.\n> This continued for a while as he kept putting out new tutorials. But over time, as friends started asking me CSS questions, I found it easier to link to one of Chris’s articles (since they were really well written) than explain everything myself.\n> Years later Chris ran a Kickstarter campaign to redesign his site. Those who con- tributed would get behind-the-scenes access to additional tutorials and content re- lated to the redesign.\n> The goal was set fairly low at $3,500. He quickly blew past the goal and by the end of the campaign had raised $89,697.\n> Incredible.\n> The point is that he did it with relative ease, all because he had built up an audi- ence who loved his work.\n> **He and I started at the same point and our skills progressed at about the same rate. The difference was that he taught and shared, whereas I kept what I was learning to myself. That made the difference between being able to make tens of thousands of dollars on a new project versus releasing to no one.**\n\nNathan in general has a lot of riffs on LIP:\n\n- https://nathanbarry.com/4-ideas/\n- https://nathanbarry.com/consumer-to-creator/\n- https://www.smashingmagazine.com/2013/06/how-to-launch-anything/\n"
    },
    {
      "slug": "learning-gears",
      "data": {
        "title": "Learning Gears",
        "slug": "learning-gears",
        "categories": [
          "Advice",
          "Learn In Public"
        ],
        "date": "2019-04-19T00:00:00.000Z"
      },
      "content": "\nThe most common question I get when people hear about [#LearnInPublic](https://twitter.com/hashtag/LearnInPublic?src=hash) is how to start.\n\nIn a sense, this is a Bad Question™. What worked for me may or may not work for you. I don't know your situation, your interests, nor your skills. This is why [the original essay](https://www.swyx.io/writing/learn-in-public/) just gives an open ended list of ideas. Being overly prescriptive limits your personal expression, which I hate.\n\nBut I understand the desire for more structure. This is a new muscle to develop. Our entire childhoods we've been trained to learn in private. Now you're trying this new thing. It'd be nice to have a map.\n\nIn the year since I wrote that essay I've stumbled my way towards some sense of what _modes_ of Learning In Public have had disproportionate effectiveness, some by practicing it myself, some by observing others. I finally feel this is worth sharing, so I'll answer this question I've been avoiding.\n\n## Three Gears\n\nI can think of three gears of Learning In Public.\n\n### Explorer\n\nYour **Explorer** gear is your high speed gear. You're just trying to cover as much ground as possible, in many directions.\n\n- The main **problem** to solve is that **you don't know what you don't know**.\n- The **creative exhaust** you make are **mainly notes to self**, possibly in terms only you understand, possibly noting problems only you have. This is mostly in gists and blogposts and tweets and (good) StackOverflow questions, because text is cheap to produce, although Twitch streams are also on the rise. You are often laying out literally your entire state of knowledge for [a metaphorical rubber duck](https://en.wikipedia.org/wiki/Rubber_duck_debugging), looking for holes and documenting for the future.\n- Your public output is episodic - there is **no unifying theme** - you are just a field correspondent reporting from whatever foreign land you find yourself in. This is still useful, because you [can't connect the dots until much later in life](https://www.youtube.com/watch?v=D1R-jKKp3NA).\n- The **public commitment** level is low, usually doable in one day sprints, so this is a great way to get started Learning In Public and also finding what resonates so you can switch gears. It is easy to fall off the wagon though, because no one's really expecting anything from you, because you haven't _committed_ that much.\n\n### Connector\n\nMost people should aim for your **Connector** gear to be their default. This is a powerful, yet nimble gear. You connect people and ideas.\n\n- The main **problem** to solve is that **you know things many don't know**. Hence you should share that and they need to hear you. That takes a little extra effort.\n- The **creative exhaust** you make is **explicitly meant for others**. This means some effort is required that isn't just about your learning, but more about making things easy to digest. Here are the talks, tutorials, cartoons, cheatsheets, books, etc - Higher effort, higher usefulness, longer lasting. You usually arent sharing everything you know, though, so it can feel like you're learning less. However, this is the best way to master fundamentals because you are forced to cover your bases and be able to answer questions you haven't thought to ask.\n- You still dont have a grand **theme** to your work, but usually you are **juggling multiple themes**, and also learning and teaching about their intersections.\n- The **public commitment** is moderate - usually for a few weeks or months - and often involves active exercise of soft skills that you may feel ill equipped for. Check your ego at the door and learn that too. You are \"putting yourself out there\". But also remember Learning In Public is an art, not a science: always rely on and refine your _taste_ rather than objectively trying to please everyone. Find _your_ people, lean on strengths you always thought were irrelevant for coding.\n\nExamples:\n\n- [Samantha Ming](https://twitter.com/samantha_ming)\n- [b0rk](https://wizardzines.com/)\n- [Lin Clark](https://code-cartoons.com/)\n\n> See also: [The Ultimate Hack for Learning In Public](https://www.swyx.io/writing/learn-in-public-hack/) (expanding on \"Pick Up What They Put Down\")\n\n### Miner\n\nReserve the **Miner** gear for when you've struck gold. Something that resonates with people, that you are also abnormally fascinated by. When you strike gold, you'll know. Stop and plant your flag.\n\n- The main **problem** to solve is that something important is too hard, or the world knows too little about something this important. Therefore **you dive deep into something nobody else does**.\n- The **creative exhaust** you make is very specialized - you **do research and build community and infrastructure**. What you do is **meant to last**. Before you, the thing was very hard, or impossible. After you, the thing becomes much easier. The world will thank you.\n- You now have one **theme** that not just unifies your work, but that you become synonymous with. Every person in the world who has the problem you solve, will eventually find you, because that is how the Internet works. (Coincidentally, you no longer need to \"put yourself out there\", people will come to you.) This might feel boring since you're just about one thing all the time, but what seems like one topic to you today (e.g. Machine Learning) will eventually subdivide into different disciplines when you go deep enough (e.g. Supervised Learning, Unsupervised Learning, Reinforcement Learning).\n- The **public commitment** is very high - on the order of years and careers. You're digging a mine and spending energy far more than any other sane person is doing - it helps if the area you've chosen has a good chance of widening and deepening at the same time you're mining. So have some form of macro thesis for why this field in general will be increasingly important. (More on this in future writing.)\n\nExamples:\n\n- Tobias Koppers\n- Jen Simmons\n- Lea Verou\n- Evan You\n- Seb McKenzie\n\n## Why Gears\n\nThese are \"gears\" and not \"levels\" or \"modes\" because you can step in and out of any gear depending on what kind of terrain you're on and how fast and deep you need to go. (I bike a lot so I just like the analogy of \"gears\" - I also like the implication that one gear isn't necessarily better or worse than another, it just depends, and also adopting one gear does mean trading off speed or power.)\n\n## What do I do now?\n\nIf you're just starting to #LearnInPublic, start as an **Explorer**. Map out whatever you're learning, whatever tickles your fancy. Go as fast as you like, an inch deep and a mile wide.\n\nWhen you have a good sense of the terrain and see other Explorers you can help, start being a **Connector**. Link people and ideas, use your full creative talents. Go back and cover gaps in your knowledge.\n\nIf you find yourself tripping over gold, start **Mining**. If it turns out a dud, switch gears. No sweat.\n\nThree gears of learning, all in Public. We're cheering you on.\n\n> See Also: [Big L Notation](https://www.swyx.io/writing/big-l-notation) (expanding on why \"Learn In Public\" is the fastest way to learn)"
    },
    {
      "slug": "specialize-in-the-new",
      "data": {
        "title": "Specialize In The New",
        "slug": "specialize-in-the-new",
        "categories": [
          "Advice"
        ],
        "date": "2018-06-22T00:00:00.000Z"
      },
      "content": "\nYou already know the value of a niche - you go up in market value the more specialized you are in anything. So what do you specialize in?\n\nThere are many schools of thought, including ones where you could be a generalist that doesn't specialize in anything. I find one rule to be simplest and most effective above all: Specialize in the New.\n\nDidn't we just agree to avoid FOMO? Well yes, thats an important distinction - don't specialize in _everything_ new. Specializing means you have to say no to a lot of things. Just pick something new that fascinates you, and hopefully many others as well. Since you're learning in public, you'll know when you hit on a real nerve. Budget in the idea that you'll fail a few times before you find Your Thing.\n\nThen the other big objection: There are plenty of jobs/money/etc in (fill in the blank older technology) too! This is usually followed by some big numbers and anecdata. \"My brother's cousin's roommate's friend took this COBOL job and now he's earning six figures on the beach in Tahiti!\"\n\nIf that works for you, good. Here's why _I_ don't do it. It is far easier to rise up the ranks quickly in a new space than in an old, crowded space. You know how people rant and rail against companies who hire based on years of experience? That could go away tomorrow and you'd still have clients/employers silently comparing you with others based on your years of experience. It's human nature. But you know where it's impossible for someone to have 5 years' experience doing X? When X is less than 5 years old.\n\nThere's a practical element to it as well - technologies accumulate a LOT of cruft over time. Best practices form, some of which are total BS, but that is stamped by early experts as The Right Way To Do Things because Reasons. Books are written, careers are made. If you choose to play on their turf, you'll eventually need to read/deal with/overcome/win approval of all of that history. Even if you work twice as hard as the average developer you can only make up for all the context you missed half as slowly. You know where its possible to have read everything ever written about something? When it's new.\n\nThe subheading to this is: **Focus right next to where others are investing heavily.** Joel Spolsky notes that [demand for a product increases when the price of its complements decreases](https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/). \"Complements\" are an abstract idea so I will try to draw an example for you. If you brand yourself as a Firebase consultant and Google keeps adding and bugfixing Firebase functionality, they are in a very small way working for you (as you are also adding value to them). (Side note: this is why the developer relations job is a very special one for a midcareer dev - you are essentially a designated person showing off the investment of a company and team doing the real work in the background. As a focal point and an amplifier, you will get disproportionate credit.) As a developer (and not a startup) you don't even really have to make the bank shot of figuring out the overlooked adjacencies next to an area of heavy investment; you can just make yourself all about that area directly and let the market tell you where gaps exist. What's broadly true is that heavy investment usually leads to the cost or \"price\" of that thing decreasing, as the usual plan is larger scale at lower unit cost.\n\nI have an economics background so if I lost you there, it's my fault. But I really want to impress upon you that picking the right horse in this game of specializing for the new isn't that hard because the market is going to be fairly obvious about it. Why more people don't do it is because most people are busy being experts in other, older things. In this green field space, your \"weakness\" becomes a strength.\n\nPlant your flag on fertile ground, and say, \"this is what I do\". It will carry you far.\n\np.s. Clone open source apps using your technology; demonstrate how it is better and make fixes where it is worse. \"react-router\" was built by early adopters of React who simply missed the old router from Ember.\n\n_originally drafted [in a gist](https://gist.github.com/sw-yx/9720bd4a30606ca3ffb8d407113c0fe5)_\n"
    }
  ]
}