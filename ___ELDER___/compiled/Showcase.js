'use strict';

function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src/components/Showcase/ShowcaseItem.svelte generated by Svelte v3.25.1 */

const ShowcaseItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { item } = $$props;

	const shorten = str => str
	? str.length > 200 ? str.slice(0, 100) + "..." : str
	: undefined;

	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);
	let shortDesc;
	let longDesc;
	shortDesc = shorten(item.desc) || shorten(item.description);
	longDesc = item.description || item.desc || "No description provided. Suggest one!";

	return `<li class="${[
		"col-span-1 bg-gray-100 rounded-lg shadow flex flex-col justify-between\n    border-4 transition duration-100 transform hover:-translate-y-1",
		(item.type === "Essays" ? "border-green-500" : "") + " " + (item.type === "Talks" ? "border-blue-500" : "") + " " + (item.type === "Podcasts" ? "border-teal-500" : "")
	].join(" ").trim()}"><div><div class="${"w-full flex items-center justify-between p-6 space-x-6"}"><div class="${"flex-1 truncate"}">
        <div class="${""}"><span class="${[
		"flex-shrink-0 inline-block px-2 py-0.5 text-xs leading-4\n              font-medium rounded-full",
		(item.type === "Essays" ? "bg-green-100" : "") + " " + (item.type === "Essays" ? "text-green-800" : "") + " " + (item.type === "Talks" ? "bg-blue-100" : "") + " " + (item.type === "Talks" ? "text-blue-800" : "") + " " + (item.type === "Podcasts" ? "bg-teal-100" : "") + " " + (item.type === "Podcasts" ? "text-teal-800" : "")
	].join(" ").trim()}">
            ${escape(item.type)}</span>
          <h3 class="${"text-gray-900 text-sm leading-5 font-medium whitespace-normal\n              inline"}">${escape(item.title)}</h3></div>
        <p class="${"mt-1 text-gray-700 text-sm leading-5 whitespace-normal"}">${ shortDesc
	? `<div class="${""}">${escape(shortDesc)}</div>`
	: `<div>${escape(longDesc)}</div>

            <dl>${item.date
		? `<div class="${"py-2 sm:grid sm:grid-cols-3 sm:gap-4 break-all"}"><dt class="${"text-sm leading-5 font-medium text-gray-500"}">Date
                  </dt>
                  <dd class="${"mt-1 text-sm leading-5 text-gray-900 sm:mt-0\n                      sm:col-span-2"}">${escape(item.date.slice(0, 10))}</dd></div>`
		: ``}${item.canonical
		? `<div class="${"py-2 sm:grid sm:grid-cols-3 sm:gap-4"}"><dt class="${"text-sm leading-5 font-medium text-gray-500"}">Originally posted at:
                  </dt>
                  <dd class="${"mt-1 text-sm leading-5 text-gray-900 sm:mt-0\n                      sm:col-span-2"}"><a class="${"underline hover:text-blue-700"}"${add_attribute("href", item.canonical, 0)}>${escape(item.canonical)}</a></dd></div>`
		: ``}${item.url
		? `<div class="${"py-2 sm:grid sm:grid-cols-3 sm:gap-4 break-all"}"><dt class="${"text-sm leading-5 font-medium text-gray-500\n                      break-normal"}">External URL
                  </dt>
                  <dd class="${"mt-1 text-sm leading-5 text-gray-900 sm:mt-0\n                      sm:col-span-2"}"><a class="${"underline hover:text-blue-700"}"${add_attribute("href", item.url, 0)}>${escape(item.url)}</a></dd></div>`
		: ``}${item.slides
		? `<div class="${"py-2 sm:grid sm:grid-cols-3 sm:gap-4"}"><dt class="${"text-sm leading-5 font-medium text-gray-500"}">Slides
                  </dt>
                  <dd class="${"mt-1 text-sm leading-5 text-gray-900 sm:mt-0\n                      sm:col-span-2"}"><a class="${"underline hover:text-blue-700"}"${add_attribute("href", item.slides, 0)}>${escape(item.slides)}</a></dd></div>`
		: ``}${item.categories
		? `<div class="${"py-5 sm:grid sm:grid-cols-3 sm:gap-4"}"><dt class="${"text-sm leading-5 font-medium text-gray-500"}">Categories
                  </dt>
                  <dd class="${"mt-1 text-sm leading-5 text-gray-900 sm:mt-0\n                      sm:col-span-2"}">${escape(item.categories && item.categories.length
			? item.categories.join(", ")
			: "Uncategorized")}</dd></div>`
		: ``}</dl>

            ${item.instances
		? `<ul class="${"border border-gray-200 rounded-md list-disc"}">${each(item.instances, instance => `<li class="${"pr-4 text-sm leading-5"}">${escape(new Date(instance.date).toDateString().slice(4))} at ${escape(instance.venue)}
                    
                    
                    

                    <div class="${"ml-4"}">${instance.video
			? `<a class="${"underline hover:text-blue-700"}"${add_attribute("href", instance.video, 0)}>Video</a>`
			: ``}
                      ${instance.slides
			? `<a class="${"underline hover:text-blue-700"}"${add_attribute("href", instance.slides, 0)}>Slides</a>`
			: ``}
                      ${instance.github
			? `<a class="${"underline hover:text-blue-700 text-sm leading-5\n                            font-medium text-gray-500"}"${add_attribute("href", instance.github, 0)}>GitHub</a>`
			: ``}
                      ${instance.tweet
			? `<a class="${"underline hover:text-blue-700 text-sm leading-5\n                            font-medium text-gray-500"}"${add_attribute("href", instance.tweet, 0)}>Tweet</a>`
			: ``}
                      ${instance.description
			? `<span class="${"text-sm leading-5 text-gray-700"}">${escape(instance.description)}</span>`
			: ``}</div>
                  </li>`)}</ul>`
		: ``}

            `}</p></div>
      
      <div></div></div></div>
  <div class="${"border-t border-gray-200"}"><div class="${"-mt-px flex"}"><div class="${"w-0 flex-1 flex border-r border-gray-200"}"><button class="${[
		"relative -mr-px w-0 flex-1 inline-flex items-center\n            justify-center py-4 text-sm leading-5 text-gray-700 font-medium\n            border border-transparent rounded-bl-lg hover:bg-gray-300\n            focus:outline-none focus:shadow-outline-blue focus:border-blue-300\n            focus:z-10 transition ease-in-out duration-150",
		( "") + " " + ( "")
	].join(" ").trim()}">
          <svg class="${"w-5 h-5 text-gray-400"}" xmlns="${"http://www.w3.org/2000/svg"}" fill="${"none"}" viewBox="${"0 0 24 24"}" stroke="${"currentColor"}"><path stroke-linecap="${"round"}" stroke-linejoin="${"round"}" stroke-width="${"2"}" d="${"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"}"></path></svg>
          
          <span class="${"ml-3"}">More Info</span></button></div>
      <div class="${"-ml-px w-0 flex-1 flex"}">${item.type === "Essays" && item.slug
	? `<a${add_attribute("href", `/${item.slug}`, 0)} class="${"relative w-0 flex-1 inline-flex items-center justify-center\n              py-4 text-sm leading-5 text-gray-700 font-medium border\n              border-transparent rounded-br-lg hover:text-gray-500\n              focus:outline-none focus:shadow-outline-blue focus:border-blue-300\n              focus:z-10 transition ease-in-out duration-150"}">
            <svg class="${"w-5 h-5 text-gray-400"}" viewBox="${"0 0 20 20"}" fill="${"currentColor"}"><path d="${"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"}"></path></svg>
            <span class="${"ml-3"}">Read</span></a>
          `
	: `${item.type === "Talks" && item.instances && item.instances[0].video
		? `<a${add_attribute("href", item.instances[0].video, 0)} target="${"_blank"}" rel="${"noopener"}" class="${"relative w-0 flex-1 inline-flex items-center justify-center\n              py-4 text-sm leading-5 text-gray-700 font-medium border\n              border-transparent rounded-br-lg hover:text-gray-500\n              focus:outline-none focus:shadow-outline-blue focus:border-blue-300\n              focus:z-10 transition ease-in-out duration-150"}">
            <svg class="${"w-5 h-5 text-gray-400"}" fill="${"currentColor"}" role="${"img"}" xmlns="${"http://www.w3.org/2000/svg"}" viewBox="${"0 0 24 24"}"><title>YouTube icon</title><path d="${"M23.495 6.205a3.007 3.007 0 0 0-2.088-2.088c-1.87-.501-9.396-.501-9.396-.501s-7.507-.01-9.396.501A3.007 3.007 0 0 0 .527 6.205a31.247 31.247 0 0 0-.522 5.805 31.247 31.247 0 0 0 .522 5.783 3.007 3.007 0 0 0 2.088 2.088c1.868.502 9.396.502 9.396.502s7.506 0 9.396-.502a3.007 3.007 0 0 0 2.088-2.088 31.247 31.247 0 0 0 .5-5.783 31.247 31.247 0 0 0-.5-5.805zM9.609 15.601V8.408l6.264 3.602z"}"></path></svg>
            <span class="${"ml-3"}">Watch</span></a>`
		: `${item.type === "Podcasts" && item.url
			? `<a${add_attribute("href", item.url, 0)} target="${"_blank"}" rel="${"noopener"}" class="${"relative w-0 flex-1 inline-flex items-center justify-center\n              py-4 text-sm leading-5 text-gray-700 font-medium border\n              border-transparent rounded-br-lg hover:text-gray-500\n              focus:outline-none focus:shadow-outline-blue focus:border-blue-300\n              focus:z-10 transition ease-in-out duration-150"}">
            <svg class="${"w-5 h-5 text-gray-400"}" xmlns="${"http://www.w3.org/2000/svg"}" fill="${"none"}" viewBox="${"0 0 24 24"}" stroke="${"currentColor"}"><path stroke-linecap="${"round"}" stroke-linejoin="${"round"}" stroke-width="${"2"}" d="${"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"}"></path></svg>
            <span class="${"ml-3"}">Listen</span></a>`
			: `<div></div>`}`}`}</div></div></div></li>`;
});

function createCommonjsModule(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

var decodeUriComponent = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};

var splitOnFirst = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};

var queryString = createCommonjsModule(function (module, exports) {




const isNullOrUndefined = value => value === null || value === undefined;

function encoderForArrayFormat(options) {
	switch (options.arrayFormat) {
		case 'index':
			return key => (result, value) => {
				const index = result.length;

				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[', index, ']'].join('')];
				}

				return [
					...result,
					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
				];
			};

		case 'bracket':
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[]'].join('')];
				}

				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
			};

		case 'comma':
		case 'separator':
			return key => (result, value) => {
				if (value === null || value === undefined || value.length === 0) {
					return result;
				}

				if (result.length === 0) {
					return [[encode(key, options), '=', encode(value, options)].join('')];
				}

				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
			};

		default:
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, encode(key, options)];
				}

				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
			};
	}
}

function parserForArrayFormat(options) {
	let result;

	switch (options.arrayFormat) {
		case 'index':
			return (key, value, accumulator) => {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return (key, value, accumulator) => {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'comma':
		case 'separator':
			return (key, value, accumulator) => {
				const isArray = typeof value === 'string' && value.split('').indexOf(options.arrayFormatSeparator) > -1;
				const newValue = isArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
				accumulator[key] = newValue;
			};

		default:
			return (key, value, accumulator) => {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function validateArrayFormatSeparator(value) {
	if (typeof value !== 'string' || value.length !== 1) {
		throw new TypeError('arrayFormatSeparator must be single character string');
	}
}

function encode(value, options) {
	if (options.encode) {
		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function decode(value, options) {
	if (options.decode) {
		return decodeUriComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	}

	if (typeof input === 'object') {
		return keysSorter(Object.keys(input))
			.sort((a, b) => Number(a) - Number(b))
			.map(key => input[key]);
	}

	return input;
}

function removeHash(input) {
	const hashStart = input.indexOf('#');
	if (hashStart !== -1) {
		input = input.slice(0, hashStart);
	}

	return input;
}

function getHash(url) {
	let hash = '';
	const hashStart = url.indexOf('#');
	if (hashStart !== -1) {
		hash = url.slice(hashStart);
	}

	return hash;
}

function extract(input) {
	input = removeHash(input);
	const queryStart = input.indexOf('?');
	if (queryStart === -1) {
		return '';
	}

	return input.slice(queryStart + 1);
}

function parseValue(value, options) {
	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
		value = Number(value);
	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
		value = value.toLowerCase() === 'true';
	}

	return value;
}

function parse(input, options) {
	options = Object.assign({
		decode: true,
		sort: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ',',
		parseNumbers: false,
		parseBooleans: false
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const formatter = parserForArrayFormat(options);

	// Create an object with no prototype
	const ret = Object.create(null);

	if (typeof input !== 'string') {
		return ret;
	}

	input = input.trim().replace(/^[?#&]/, '');

	if (!input) {
		return ret;
	}

	for (const param of input.split('&')) {
		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

		// Missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		value = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);
		formatter(decode(key, options), value, ret);
	}

	for (const key of Object.keys(ret)) {
		const value = ret[key];
		if (typeof value === 'object' && value !== null) {
			for (const k of Object.keys(value)) {
				value[k] = parseValue(value[k], options);
			}
		} else {
			ret[key] = parseValue(value, options);
		}
	}

	if (options.sort === false) {
		return ret;
	}

	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
		const value = ret[key];
		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
			// Sort object keys, not values
			result[key] = keysSorter(value);
		} else {
			result[key] = value;
		}

		return result;
	}, Object.create(null));
}

exports.extract = extract;
exports.parse = parse;

exports.stringify = (object, options) => {
	if (!object) {
		return '';
	}

	options = Object.assign({
		encode: true,
		strict: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ','
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const shouldFilter = key => (
		(options.skipNull && isNullOrUndefined(object[key])) ||
		(options.skipEmptyString && object[key] === '')
	);

	const formatter = encoderForArrayFormat(options);

	const objectCopy = {};

	for (const key of Object.keys(object)) {
		if (!shouldFilter(key)) {
			objectCopy[key] = object[key];
		}
	}

	const keys = Object.keys(objectCopy);

	if (options.sort !== false) {
		keys.sort(options.sort);
	}

	return keys.map(key => {
		const value = object[key];

		if (value === undefined) {
			return '';
		}

		if (value === null) {
			return encode(key, options);
		}

		if (Array.isArray(value)) {
			return value
				.reduce(formatter(key), [])
				.join('&');
		}

		return encode(key, options) + '=' + encode(value, options);
	}).filter(x => x.length > 0).join('&');
};

exports.parseUrl = (input, options) => {
	options = Object.assign({
		decode: true
	}, options);

	const [url, hash] = splitOnFirst(input, '#');

	return Object.assign(
		{
			url: url.split('?')[0] || '',
			query: parse(extract(input), options)
		},
		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
	);
};

exports.stringifyUrl = (input, options) => {
	options = Object.assign({
		encode: true,
		strict: true
	}, options);

	const url = removeHash(input.url).split('?')[0] || '';
	const queryFromUrl = exports.extract(input.url);
	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

	const query = Object.assign(parsedQueryFromUrl, input.query);
	let queryString = exports.stringify(query, options);
	if (queryString) {
		queryString = `?${queryString}`;
	}

	let hash = getHash(input.url);
	if (input.fragmentIdentifier) {
		hash = `#${encode(input.fragmentIdentifier, options)}`;
	}

	return `${url}${queryString}${hash}`;
};
});

/* src/components/Showcase/Showcase.svelte generated by Svelte v3.25.1 */

const Showcase = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let urlState = { filter: "", show: [] };

	let defaultURLState = {
		filter: "",
		show: ["Essays", "Talks", "Podcasts"]
	};

	onMount(() => {
		urlState = {
			...defaultURLState,
			...queryString.parse(location.search)
		};
	});

	const setURLState = newState => {
		const finalState = { ...urlState, ...newState }; // merge with existing urlstate
		urlState = finalState;

		Object.keys(finalState).forEach(function (k) {
			if (// don't save some state values if it meets the conditions below
			!finalState[k] || // falsy
			finalState[k] === "" || // string
			Array.isArray(finalState[k]) && !finalState[k].length || // array
			finalState[k] === defaultURLState[k]) {
				delete finalState[k]; // same as default state, unnecessary
				// drop query params with new values = falsy
			}
		});

		if (typeof window !== "undefined") history.pushState({}, "", document.location.origin + document.location.pathname + "?" + queryString.stringify(finalState));
	};

	let { data } = $$props;
	let tutorials = false;
	let notes = false;
	let filterStr = "";
	if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
	let filteredData;

	 {
		setURLState({
			filter: filterStr,
			show: [
				 "Essays",
				 "Talks",
				 "Podcasts",
				tutorials ,
				notes 
			].filter(Boolean)
		});
	}

	filteredData = data.filter(x => {
		{
			if ( x.type === "Essays") return true;
			if ( x.type === "Talks") return true;
			if ( x.type === "Podcasts") return true;
		}
	}).map(x => {
		if (x.date) x.effectiveDate = new Date(x.date);
		if (x.instances) x.effectiveDate = new Date(x.instances[0].date);
		return x;
	}).sort((a, z) => z.effectiveDate - a.effectiveDate);

	return `<div class="${"relative max-w-lg mx-auto lg:max-w-7xl mb-8"}"><div class="${"text-center"}"><h1 class="${"text-5xl leading-9 tracking-tight font-extrabold text-gray-200\n        sm:text-4xl sm:leading-10"}">Idea Showcase
    </h1>
    <p class="${"mt-3 text-xl leading-7 text-gray-400 sm:mt-4"}">For Free: ${escape(filteredData.length)} Great Ideas. Lightly Used.
    </p></div></div>

<div><div class="${"flex rounded-md mb-4"}">
    <label for="${"search_candidate"}" class="${"sr-only"}">Search</label>
    <div class="${"relative flex-grow focus-within:z-10"}"><div class="${"absolute inset-y-0 left-0 pl-3 flex items-center"}">
        <label for="${"search_candidate"}"><svg class="${"h-5 w-5 text-gray-400"}" viewBox="${"0 0 20 20"}" fill="${"currentColor"}"><path fill-rule="${"evenodd"}" d="${"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"}" clip-rule="${"evenodd"}"></path></svg></label>
        <input id="${"search_candidate"}" type="${"text"}" class="${"form-input block w-full rounded-md pl-2 transition ease-in-out\n            duration-150 sm:hidden"}" placeholder="${"Filter"}"${add_attribute("value", filterStr, 1)}>
        <input id="${"search_candidate"}" type="${"text"}" class="${"hidden form-input w-full rounded-md pl-2 transition ease-in-out\n            duration-150 sm:block sm:text-sm sm:leading-5 py-2 ml-4"}" placeholder="${"Filter ideas"}"${add_attribute("value", filterStr, 1)}></div></div>
    
    <span class="${"relative z-0 inline-flex flex-col sm:flex-row shadow-sm rounded-md"}"><div class="${"inline-flex items-center mr-2 text-gray-400"}">Show:</div>
      <button type="${"button"}" class="${[
		"-ml-px sm:ml-0 relative inline-flex items-center px-4 py-2\n          sm:rounded-l-md border border-gray-300 bg-white text-sm leading-5\n          font-medium text-gray-700 hover:text-gray-500 focus:z-10\n          focus:outline-none focus:border-blue-300 focus:shadow-outline-blue\n          active:bg-gray-100 active:text-gray-700 transition ease-in-out\n          duration-150",
		 "bg-gray-300" 
	].join(" ").trim()}">Essays
      </button>
      <button type="${"button"}" class="${[
		"-ml-px relative inline-flex items-center px-4 py-2 border\n          border-gray-300 bg-white text-sm leading-5 font-medium text-gray-700\n          hover:text-gray-500 focus:z-10 focus:outline-none\n          focus:border-blue-300 focus:shadow-outline-blue active:bg-gray-100\n          active:text-gray-700 transition ease-in-out duration-150",
		 "bg-gray-300" 
	].join(" ").trim()}">Talks
      </button>
      <button type="${"button"}" class="${[
		"-ml-px relative inline-flex items-center px-4 py-2 border\n          border-gray-300 bg-white text-sm leading-5 font-medium text-gray-700\n          hover:text-gray-500 focus:z-10 focus:outline-none\n          focus:border-blue-300 focus:shadow-outline-blue active:bg-gray-100\n          active:text-gray-700 transition ease-in-out duration-150",
		 "bg-gray-300" 
	].join(" ").trim()}">Podcasts
      </button>
      <button type="${"button"}" class="${[
		"-ml-px relative inline-flex items-center px-4 py-2 border\n          border-gray-300 bg-white text-sm leading-5 font-medium text-gray-700\n          hover:text-gray-500 focus:z-10 focus:outline-none\n          focus:border-blue-300 focus:shadow-outline-blue active:bg-gray-100\n          active:text-gray-700 transition ease-in-out duration-150",
		 ""
	].join(" ").trim()}"><strike>Tutorials</strike></button>
      <button type="${"button"}" class="${[
		"-ml-px relative inline-flex items-center px-4 py-2\n          sm:rounded-r-md border border-gray-300 bg-white text-sm leading-5\n          font-medium text-gray-700 hover:text-gray-500 focus:z-10\n          focus:outline-none focus:border-blue-300 focus:shadow-outline-blue\n          active:bg-gray-100 active:text-gray-700 transition ease-in-out\n          duration-150",
		 ""
	].join(" ").trim()}"><strike>Notes</strike></button></span>

    
    ${ ``}</div>

  
  ${filteredData.length
	? `<ul class="${"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3"}">${each(filteredData, item => `${validate_component(ShowcaseItem, "ShowcaseItem").$$render($$result, { item }, {}, {})}`)}</ul>`
	: `<div class="${"p-8 text-red-500"}">Nothing found! The filter was too restrictive. ${!urlState.show
		? `Please
        pick either Essays, Talks, or Podcasts to show.`
		: ``}
      ${urlState.filter
		? `Please clear the filter bar and you&#39;ll see more stuff.`
		: ``}</div>`}
  </div>
`;
});

module.exports = Showcase;
